[gd_resource type="ShaderMaterial" load_steps=8 format=3 uid="uid://667vkq8iqu4i"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_jncuc"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_kk2wb"]
constant = 1.294

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_2nur4"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_dik4f"]
input_name = "color"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_kxhc7"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_20aj8"]
parameter_name = "ColorParameter"

[sub_resource type="VisualShader" id="VisualShader_e2qve"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, depth_test_disabled, unshaded;

uniform vec4 ColorParameter : source_color;



void fragment() {
// ColorParameter:7
	vec4 n_out7p0 = ColorParameter;


// Input:5
	vec4 n_out5p0 = COLOR;


// FloatConstant:3
	float n_out3p0 = 1.294000;


// FloatConstant:2
	float n_out2p0 = 0.400000;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out2p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out3p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_out6p0 = step(n_out5p0.x, n_out4p0);


// Output:0
	ALBEDO = vec3(n_out7p0.xyz);
	ALPHA = n_out6p0;


}
"
graph_offset = Vector2(-634.57, -201.059)
flags/depth_test_disabled = true
flags/unshaded = true
nodes/fragment/0/position = Vector2(440, 120)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_jncuc")
nodes/fragment/2/position = Vector2(-860, 460)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_kk2wb")
nodes/fragment/3/position = Vector2(-860, 320)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_2nur4")
nodes/fragment/4/position = Vector2(-580, 320)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_dik4f")
nodes/fragment/5/position = Vector2(-200, 80)
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_kxhc7")
nodes/fragment/6/position = Vector2(160, 160)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorParameter_20aj8")
nodes/fragment/7/position = Vector2(100, -60)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 1, 3, 0, 4, 0, 5, 0, 6, 0, 4, 0, 6, 1, 6, 0, 0, 1, 7, 0, 0, 0)

[resource]
render_priority = 0
shader = SubResource("VisualShader_e2qve")
shader_parameter/ColorParameter = Color(1, 0.776471, 0.396078, 1)
