[gd_resource type="VisualShader" load_steps=13 format=3 uid="uid://jjqliete2f27"]

[ext_resource type="Texture2D" uid="uid://b2wyv8gs1cvkn" path="res://05_SHADER_TEST/Full_screen/Dither_pattners/blue_noise.png" id="1_f3bss"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_5521w"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_npkvj"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_00645"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_6wwch"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_0va0m"]
parameter_name = "Distance"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_qllni"]
constant = Color(0.461686, 0.318787, 0.144089, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_88uj8"]
output_port_for_preview = 0
expanded_output_ports = [0]
texture = ExtResource("1_f3bss")

[sub_resource type="VisualShaderNodeSmoothStep" id="VisualShaderNodeSmoothStep_qe3e2"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_bku56"]
constant = 5.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_vdnlo"]
input_name = "view"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_mmedx"]
default_input_values = [1, Vector2(0, 0), 2, Vector2(0, 0)]
function = 1

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform float Distance = 1;



void fragment() {
// ColorConstant:2
	vec4 n_out2p0 = vec4(0.461686, 0.318787, 0.144089, 1.000000);


// FloatParameter:14
	float n_out14p0 = Distance;


// Fresnel:13
	float n_out13p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_out14p0);


// FloatConstant:11
	float n_out11p0 = 1.000000;


// FloatConstant:10
	float n_out10p0 = 0.400000;


	float n_out12p0;
// Expression:12
	n_out12p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out10p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out12p0 = n_out11p0 - DITHER_THRESHOLDS[index];
	}


// SmoothStep:4
	float n_in4p2 = 1.00000;
	float n_out4p0 = smoothstep(n_out13p0, n_out12p0, n_in4p2);


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out4p0;


}
"
flags/unshaded = true
nodes/fragment/2/node = SubResource("VisualShaderNodeColorConstant_qllni")
nodes/fragment/2/position = Vector2(-66.9813, 167.356)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_88uj8")
nodes/fragment/3/position = Vector2(-1880, 960)
nodes/fragment/4/node = SubResource("VisualShaderNodeSmoothStep_qe3e2")
nodes/fragment/4/position = Vector2(-580, 360)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_bku56")
nodes/fragment/7/position = Vector2(-2760, 1580)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_vdnlo")
nodes/fragment/8/position = Vector2(-2660, 1280)
nodes/fragment/9/node = SubResource("VisualShaderNodeUVFunc_mmedx")
nodes/fragment/9/position = Vector2(-2200, 1240)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatConstant_5521w")
nodes/fragment/10/position = Vector2(-1480, 1120)
nodes/fragment/11/node = SubResource("VisualShaderNodeFloatConstant_npkvj")
nodes/fragment/11/position = Vector2(-1480, 980)
nodes/fragment/12/node = SubResource("VisualShaderNodeExpression_00645")
nodes/fragment/12/position = Vector2(-1180, 1100)
nodes/fragment/12/size = Vector2(724.789, 654.559)
nodes/fragment/12/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/12/output_ports = "0,0,Dither_Node;"
nodes/fragment/12/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/13/node = SubResource("VisualShaderNodeFresnel_6wwch")
nodes/fragment/13/position = Vector2(-820, 140)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatParameter_0va0m")
nodes/fragment/14/position = Vector2(-1180, 220)
nodes/fragment/connections = PackedInt32Array(7, 0, 9, 1, 8, 0, 9, 0, 9, 0, 3, 0, 10, 0, 12, 1, 11, 0, 12, 0, 4, 0, 0, 1, 2, 0, 0, 0, 13, 0, 4, 0, 12, 0, 4, 1, 14, 0, 13, 3)
