[gd_resource type="VisualShader" load_steps=11 format=3 uid="uid://jjqliete2f27"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_npkvj"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_00645"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_6wwch"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_0va0m"]
parameter_name = "Distance"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2vr7o"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_cixrr"]
size = Vector2(580, 220)
expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_djy86"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_17uey"]
parameter_name = "isGray"
qualifier = 1

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_gvj74"]
parameter_name = "Sonar_color"
default_value_enabled = true
default_value = Color(0.6507, 0.467281, 0.270726, 1)

[sub_resource type="VisualShaderNodeSmoothStep" id="VisualShaderNodeSmoothStep_qe3e2"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1.0]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 Sonar_color : source_color = vec4(0.650700, 0.467281, 0.270726, 1.000000);
global uniform bool isGray;
uniform float Distance = 1;
global uniform float Dither_size;



void fragment() {
// ColorParameter:20
	vec4 n_out20p0 = Sonar_color;


	float n_out16p0;
// Expression:16
	n_out16p0 = 0.0;
	{
		float luminance = 0.299 * vec3(n_out20p0.xyz).x + 0.587 * vec3(n_out20p0.xyz).y + 0.114 * vec3(n_out20p0.xyz).z;
		n_out16p0 = luminance;
	}


// BooleanParameter:19
	bool n_out19p0 = isGray;


// Mix:18
	vec3 n_out18p0 = mix(vec3(n_out20p0.xyz), vec3(n_out16p0), vec3(n_out19p0 ? 1.0 : 0.0));


// FloatParameter:14
	float n_out14p0 = Distance;


// Fresnel:13
	float n_out13p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_out14p0);


// FloatConstant:11
	float n_out11p0 = 1.000000;


// FloatParameter:15
	float n_out15p0 = Dither_size;


	float n_out12p0;
// Expression:12
	n_out12p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out15p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out12p0 = n_out11p0 - DITHER_THRESHOLDS[index];
	}


// SmoothStep:4
	float n_in4p2 = 1.00000;
	float n_out4p0 = smoothstep(n_out13p0, n_out12p0, n_in4p2);


// Output:0
	ALBEDO = n_out18p0;
	ALPHA = n_out4p0;


}
"
graph_offset = Vector2(-646.198, -208.354)
flags/unshaded = true
nodes/fragment/0/position = Vector2(740, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeSmoothStep_qe3e2")
nodes/fragment/4/position = Vector2(-580, 360)
nodes/fragment/11/node = SubResource("VisualShaderNodeFloatConstant_npkvj")
nodes/fragment/11/position = Vector2(-1480, 980)
nodes/fragment/12/node = SubResource("VisualShaderNodeExpression_00645")
nodes/fragment/12/position = Vector2(-1180, 1100)
nodes/fragment/12/size = Vector2(724.789, 654.559)
nodes/fragment/12/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/12/output_ports = "0,0,Dither_Node;"
nodes/fragment/12/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/13/node = SubResource("VisualShaderNodeFresnel_6wwch")
nodes/fragment/13/position = Vector2(-820, 140)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatParameter_0va0m")
nodes/fragment/14/position = Vector2(-1180, 220)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatParameter_2vr7o")
nodes/fragment/15/position = Vector2(-1753.66, 1202.88)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_cixrr")
nodes/fragment/16/position = Vector2(-149.134, -217.058)
nodes/fragment/16/size = Vector2(580, 220)
nodes/fragment/16/input_ports = "0,4,color;"
nodes/fragment/16/output_ports = "0,0,grey_value;"
nodes/fragment/16/expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"
nodes/fragment/18/node = SubResource("VisualShaderNodeMix_djy86")
nodes/fragment/18/position = Vector2(590.866, -37.0582)
nodes/fragment/19/node = SubResource("VisualShaderNodeBooleanParameter_17uey")
nodes/fragment/19/position = Vector2(-155.702, 218.498)
nodes/fragment/20/node = SubResource("VisualShaderNodeColorParameter_gvj74")
nodes/fragment/20/position = Vector2(-540, -80)
nodes/fragment/connections = PackedInt32Array(11, 0, 12, 0, 4, 0, 0, 1, 13, 0, 4, 0, 12, 0, 4, 1, 14, 0, 13, 3, 15, 0, 12, 1, 16, 0, 18, 1, 18, 0, 0, 0, 19, 0, 18, 2, 20, 0, 16, 0, 20, 0, 18, 0)
