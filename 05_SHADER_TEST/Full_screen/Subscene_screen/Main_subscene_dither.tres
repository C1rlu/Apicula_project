[gd_resource type="ShaderMaterial" load_steps=7 format=3 uid="uid://dbu2q4lhlk8w5"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_getfj"]
parameter_name = "Opacity"
hint = 1
step = 0.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_wpx2v"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_7ht7b"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_rrkda"]
size = Vector2(634.014, 470.339)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ul8ru"]
default_input_values = [0, 1.5, 1, 0.0]

[sub_resource type="VisualShader" id="VisualShader_8isr1"]
code = "shader_type canvas_item;
render_mode blend_mix, unshaded;

uniform float Opacity : hint_range(0, 1) = 1;
global uniform float Dither_size;



void fragment() {
// FloatParameter:18
	float n_out18p0 = Opacity;


// FloatConstant:23
	float n_out23p0 = 1.000000;


// FloatParameter:32
	float n_out32p0 = Dither_size;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out32p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out23p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_out7p0 = step(n_out18p0, n_out4p0);


// Output:0
	COLOR.a = n_out7p0;


}
"
mode = 1
flags/unshaded = true
flags/light_only = false
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_rrkda")
nodes/fragment/4/position = Vector2(-680, 600)
nodes/fragment/4/size = Vector2(634.014, 470.339)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_ul8ru")
nodes/fragment/7/position = Vector2(40, 60)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatParameter_getfj")
nodes/fragment/18/position = Vector2(-480, 60)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatConstant_wpx2v")
nodes/fragment/23/position = Vector2(-1220, 620)
nodes/fragment/32/node = SubResource("VisualShaderNodeFloatParameter_7ht7b")
nodes/fragment/32/position = Vector2(-1680, 880)
nodes/fragment/connections = PackedInt32Array(4, 0, 7, 1, 18, 0, 7, 0, 23, 0, 4, 0, 7, 0, 0, 1, 32, 0, 4, 1)

[resource]
shader = SubResource("VisualShader_8isr1")
shader_parameter/Opacity = 0.0
