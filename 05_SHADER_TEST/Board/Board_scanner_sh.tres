[gd_resource type="VisualShader" load_steps=18 format=3 uid="uid://ldgfjh6i8vem"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_87j0d"]
input_name = "attenuation"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_peby0"]
default_input_values = [0, 0.0, 1, 0.1]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_jhl1y"]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_fblbh"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0.125, 0.125, 0.125, 0.125), 2, Quaternion(0.5, 0.5, 0.5, 0.5)]
op_type = 5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_v6kqx"]
parameter_name = "ColorParameter"
default_value_enabled = true
default_value = Color(0.027451, 0.14902, 0.156863, 1)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_7rtch"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_f7d57"]
parameter_name = "mirror_scene_active"
qualifier = 1

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_5wp2j"]
default_input_values = [0, false, 1, Quaternion(1, 1, 1, 1), 2, Quaternion(0, 0, 0, 0)]
op_type = 5

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_doys0"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0.125, 0.125, 0.125, 0.125), 2, Quaternion(0.5, 0.5, 0.5, 0.5)]
op_type = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_7nrmj"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_g6028"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_lfps2"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_bcdm8"]
input_name = "normal"

[sub_resource type="VisualShaderNodeDotProduct" id="VisualShaderNodeDotProduct_mqvbd"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1.325, 4.3, 2.415)]

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_lchnw"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_trqck"]
input_name = "light"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_hylrr"]
parameter_name = "light_color"
default_value = Color(0.401313, 0.399257, 0, 1)

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

global uniform bool mirror_scene_active;
uniform vec4 ColorParameter : source_color = vec4(0.027451, 0.149020, 0.156863, 1.000000);
uniform vec4 light_color : source_color;
global uniform float Dither_size;



void light() {
// BooleanParameter:16
	bool n_out16p0 = mirror_scene_active;


// ColorParameter:14
	vec4 n_out14p0 = ColorParameter;


// ColorParameter:9
	vec4 n_out9p0 = light_color;


// Input:5
	vec3 n_out5p0 = NORMAL;


// Input:8
	vec3 n_out8p0 = LIGHT;


// DotProduct:6
	float n_out6p0 = dot(n_out5p0, n_out8p0);


// Clamp:7
	float n_in7p1 = 0.00000;
	float n_in7p2 = 1.00000;
	float n_out7p0 = clamp(n_out6p0, n_in7p1, n_in7p2);


// Input:10
	float n_out10p0 = ATTENUATION;


// FloatOp:11
	float n_in11p1 = 0.10000;
	float n_out11p0 = n_out10p0 * n_in11p1;


// VectorOp:12
	vec3 n_out12p0 = vec3(n_out7p0) * vec3(n_out11p0);


// Mix:18
	vec4 n_out18p0 = mix(n_out14p0, n_out9p0, vec4(n_out12p0, 0.0));


// FloatConstant:2
	float n_out2p0 = 1.000000;


// FloatParameter:15
	float n_out15p0 = Dither_size;


	float n_out3p0;
// Expression:3
	n_out3p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out15p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out3p0 = n_out2p0 - DITHER_THRESHOLDS[index];
	}


// Step:4
	float n_out4p0 = step(n_out3p0, n_out12p0.x);


// Mix:13
	vec4 n_out13p0 = mix(n_out14p0, n_out9p0, vec4(n_out4p0));


	vec4 n_out17p0;
// Switch:17
	n_out17p0 = mix(n_out13p0, n_out18p0, float(n_out16p0));


// Output:0
	SPECULAR_LIGHT = vec3(n_out17p0.xyz);


}
"
nodes/vertex/0/position = Vector2(400, 160)
nodes/light/0/position = Vector2(2440, 1640)
nodes/light/2/node = SubResource("VisualShaderNodeFloatConstant_7nrmj")
nodes/light/2/position = Vector2(-320, 2120)
nodes/light/3/node = SubResource("VisualShaderNodeExpression_g6028")
nodes/light/3/position = Vector2(-40, 2120)
nodes/light/3/size = Vector2(724.789, 654.559)
nodes/light/3/input_ports = "0,0,In;1,0,Size;"
nodes/light/3/output_ports = "0,0,Dither_Node;"
nodes/light/3/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/light/4/node = SubResource("VisualShaderNodeStep_lfps2")
nodes/light/4/position = Vector2(860, 1640)
nodes/light/5/node = SubResource("VisualShaderNodeInput_bcdm8")
nodes/light/5/position = Vector2(-1020, 1460)
nodes/light/6/node = SubResource("VisualShaderNodeDotProduct_mqvbd")
nodes/light/6/position = Vector2(-600, 1580)
nodes/light/7/node = SubResource("VisualShaderNodeClamp_lchnw")
nodes/light/7/position = Vector2(-400, 1460)
nodes/light/8/node = SubResource("VisualShaderNodeInput_trqck")
nodes/light/8/position = Vector2(-1020, 1760)
nodes/light/9/node = SubResource("VisualShaderNodeColorParameter_hylrr")
nodes/light/9/position = Vector2(740, 1140)
nodes/light/10/node = SubResource("VisualShaderNodeInput_87j0d")
nodes/light/10/position = Vector2(-160, 1560)
nodes/light/11/node = SubResource("VisualShaderNodeFloatOp_peby0")
nodes/light/11/position = Vector2(220, 1540)
nodes/light/12/node = SubResource("VisualShaderNodeVectorOp_jhl1y")
nodes/light/12/position = Vector2(400, 1420)
nodes/light/13/node = SubResource("VisualShaderNodeMix_fblbh")
nodes/light/13/position = Vector2(1700, 1500)
nodes/light/14/node = SubResource("VisualShaderNodeColorParameter_v6kqx")
nodes/light/14/position = Vector2(1140, 1140)
nodes/light/15/node = SubResource("VisualShaderNodeFloatParameter_7rtch")
nodes/light/15/position = Vector2(-680, 2280)
nodes/light/16/node = SubResource("VisualShaderNodeBooleanParameter_f7d57")
nodes/light/16/position = Vector2(1920, 1400)
nodes/light/17/node = SubResource("VisualShaderNodeSwitch_5wp2j")
nodes/light/17/position = Vector2(2140, 1620)
nodes/light/18/node = SubResource("VisualShaderNodeMix_doys0")
nodes/light/18/position = Vector2(1700, 1740)
nodes/light/connections = PackedInt32Array(4, 0, 13, 2, 10, 0, 11, 0, 11, 0, 12, 1, 8, 0, 6, 1, 2, 0, 3, 0, 3, 0, 4, 0, 12, 0, 4, 1, 15, 0, 3, 1, 9, 0, 13, 1, 14, 0, 13, 0, 5, 0, 6, 0, 7, 0, 12, 0, 6, 0, 7, 0, 14, 0, 18, 0, 9, 0, 18, 1, 12, 0, 18, 2, 16, 0, 17, 0, 13, 0, 17, 2, 18, 0, 17, 1, 17, 0, 0, 1)
