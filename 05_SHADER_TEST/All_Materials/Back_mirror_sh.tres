[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://d144mdc0v5u55"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_kgc11"]
parameter_name = "Opacity"
hint = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_wuefm"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_jsbko"]

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_lr3iq"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_s6h7i"]
parameter_name = "Dither_size"
qualifier = 1

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded, shadows_disabled;

uniform float Opacity : hint_range(0, 1);
global uniform float Dither_size;



void fragment() {
// Fresnel:13
	float n_in13p3 = 1.00000;
	float n_out13p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in13p3);


// FloatParameter:10
	float n_out10p0 = Opacity;


// FloatParameter:9
	float n_out9p0 = Dither_size;


	float n_out11p0;
// Expression:11
	n_out11p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out9p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out11p0 = n_out10p0 - DITHER_THRESHOLDS[index];
	}


// Step:12
	float n_out12p0 = step(n_out13p0, n_out11p0);


// Output:0
	ALPHA = n_out12p0;


}
"
graph_offset = Vector2(-578.533, -69.5549)
flags/unshaded = true
flags/shadows_disabled = true
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_s6h7i")
nodes/fragment/9/position = Vector2(-1540, 460)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatParameter_kgc11")
nodes/fragment/10/position = Vector2(-1455.63, -39.6136)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_wuefm")
nodes/fragment/11/position = Vector2(-1060, 240)
nodes/fragment/11/size = Vector2(724.789, 654.559)
nodes/fragment/11/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/11/output_ports = "0,0,Dither_Node;"
nodes/fragment/11/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/12/node = SubResource("VisualShaderNodeStep_jsbko")
nodes/fragment/12/position = Vector2(-140, 360)
nodes/fragment/13/node = SubResource("VisualShaderNodeFresnel_lr3iq")
nodes/fragment/13/position = Vector2(-135.331, 11.8951)
nodes/fragment/connections = PackedInt32Array(11, 0, 12, 1, 10, 0, 11, 0, 9, 0, 11, 1, 12, 0, 0, 1, 13, 0, 12, 0)
