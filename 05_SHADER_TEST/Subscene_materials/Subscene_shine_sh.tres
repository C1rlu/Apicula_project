[gd_resource type="VisualShader" load_steps=7 format=3 uid="uid://drchaj5fcdan0"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_nos7h"]
parameter_name = "ColorParameter2"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_7tg70"]
constant = 1.227

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_786d0"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_fwm4k"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_0nrdm"]

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_uw5nl"]
default_input_values = [2, true, 3, 3.195]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 ColorParameter2 : source_color;
global uniform float Dither_size;



void fragment() {
// ColorParameter:2
	vec4 n_out2p0 = ColorParameter2;


// Fresnel:8
	float n_in8p3 = 3.19500;
	float n_out8p0 = pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in8p3);


// FloatConstant:4
	float n_out4p0 = 1.227000;


// FloatParameter:5
	float n_out5p0 = Dither_size;


	float n_out6p0;
// Expression:6
	n_out6p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out6p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_out7p0 = step(n_out8p0, n_out6p0);


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out7p0;


}
"
modes/depth_draw = 1
flags/unshaded = true
nodes/fragment/2/node = SubResource("VisualShaderNodeColorParameter_nos7h")
nodes/fragment/2/position = Vector2(-140, 120)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_7tg70")
nodes/fragment/4/position = Vector2(-1180, 640)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_786d0")
nodes/fragment/5/position = Vector2(-1320, 860)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_fwm4k")
nodes/fragment/6/position = Vector2(-940, 800)
nodes/fragment/6/size = Vector2(724.789, 654.559)
nodes/fragment/6/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/6/output_ports = "0,0,Dither_Node;"
nodes/fragment/6/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_0nrdm")
nodes/fragment/7/position = Vector2(-60, 600)
nodes/fragment/8/node = SubResource("VisualShaderNodeFresnel_uw5nl")
nodes/fragment/8/position = Vector2(-187.712, 431.868)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 4, 0, 6, 0, 5, 0, 6, 1, 6, 0, 7, 1, 7, 0, 0, 1, 8, 0, 7, 0)
nodes/light/0/position = Vector2(840, 240)
