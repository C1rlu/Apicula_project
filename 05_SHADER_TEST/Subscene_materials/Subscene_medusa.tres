[gd_resource type="VisualShader" load_steps=21 format=3 uid="uid://df0b3qbvnktga"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_nos7h"]
parameter_name = "ColorParameter2"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_7tg70"]
constant = 1.227

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_786d0"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_fwm4k"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_0nrdm"]

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_uw5nl"]
default_input_values = [2, true, 3, 3.195]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_4j46g"]
parameter_name = "Speed"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_h04ti"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_4xiff"]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_n4k7g"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_butd5"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_jcps5"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3bad7"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_kkl0c"]
constant = 0.5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_igc63"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_kviv2"]
operator = 2

[sub_resource type="FastNoiseLite" id="FastNoiseLite_nddgw"]
noise_type = 2
frequency = 0.0058
fractal_weighted_strength = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_1d3jq"]
bump_strength = 27.2
noise = SubResource("FastNoiseLite_nddgw")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_0e5f5"]
texture = SubResource("NoiseTexture2D_1d3jq")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_jvdb7"]
default_input_values = [0, 0.0, 1, 0.075]
operator = 2

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform float Speed : hint_range(0, 1) = 0.5;
uniform sampler2D tex_vtx_8;
uniform vec4 ColorParameter2 : source_color;
global uniform float Dither_size;



void vertex() {
// Input:4
	float n_out4p0 = TIME;


// FloatConstant:5
	float n_out5p0 = 0.500000;


// FloatParameter:10
	float n_out10p0 = Speed;


// FloatOp:13
	float n_out13p0 = n_out5p0 * n_out10p0;


// FloatOp:7
	float n_out7p0 = n_out4p0 * n_out13p0;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.00000, 1.00000);
	vec2 n_out6p0 = vec2(n_out7p0) * n_in6p1 + UV;


// Texture2D:8
	vec4 n_out8p0 = texture(tex_vtx_8, n_out6p0);


// FloatConstant:11
	float n_out11p0 = 10.000000;


// FloatOp:12
	float n_out12p0 = n_out11p0 * n_out10p0;


// FloatOp:9
	float n_out9p0 = n_out8p0.x * n_out12p0;


// Input:2
	vec3 n_out2p0 = VERTEX;


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out9p0) + n_out2p0;


// Output:0
	VERTEX = n_out3p0;


}

void fragment() {
// ColorParameter:2
	vec4 n_out2p0 = ColorParameter2;


// Fresnel:8
	float n_in8p3 = 3.19500;
	float n_out8p0 = pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in8p3);


// FloatConstant:4
	float n_out4p0 = 1.227000;


// FloatParameter:5
	float n_out5p0 = Dither_size;


	float n_out6p0;
// Expression:6
	n_out6p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out6p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_out7p0 = step(n_out8p0, n_out6p0);


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out7p0;


}
"
modes/depth_draw = 1
flags/unshaded = true
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_butd5")
nodes/vertex/2/position = Vector2(-280, 560)
nodes/vertex/3/node = SubResource("VisualShaderNodeVectorOp_jcps5")
nodes/vertex/3/position = Vector2(0, 140)
nodes/vertex/4/node = SubResource("VisualShaderNodeInput_3bad7")
nodes/vertex/4/position = Vector2(-1360, 160)
nodes/vertex/5/node = SubResource("VisualShaderNodeFloatConstant_kkl0c")
nodes/vertex/5/position = Vector2(-1400, 340)
nodes/vertex/6/node = SubResource("VisualShaderNodeUVFunc_igc63")
nodes/vertex/6/position = Vector2(-920, 300)
nodes/vertex/7/node = SubResource("VisualShaderNodeFloatOp_kviv2")
nodes/vertex/7/position = Vector2(-1120, 340)
nodes/vertex/8/node = SubResource("VisualShaderNodeTexture_0e5f5")
nodes/vertex/8/position = Vector2(-640, -20)
nodes/vertex/9/node = SubResource("VisualShaderNodeFloatOp_jvdb7")
nodes/vertex/9/position = Vector2(-200, 40)
nodes/vertex/10/node = SubResource("VisualShaderNodeFloatParameter_4j46g")
nodes/vertex/10/position = Vector2(-1240, 820)
nodes/vertex/11/node = SubResource("VisualShaderNodeFloatConstant_h04ti")
nodes/vertex/11/position = Vector2(-440, 180)
nodes/vertex/12/node = SubResource("VisualShaderNodeFloatOp_4xiff")
nodes/vertex/12/position = Vector2(-260, 220)
nodes/vertex/13/node = SubResource("VisualShaderNodeFloatOp_n4k7g")
nodes/vertex/13/position = Vector2(-1200, 520)
nodes/vertex/connections = PackedInt32Array(2, 0, 3, 1, 4, 0, 7, 0, 7, 0, 6, 2, 9, 0, 3, 0, 11, 0, 12, 0, 10, 0, 12, 1, 12, 0, 9, 1, 5, 0, 13, 0, 10, 0, 13, 1, 13, 0, 7, 1, 6, 0, 8, 0, 8, 0, 9, 0, 3, 0, 0, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorParameter_nos7h")
nodes/fragment/2/position = Vector2(-140, 120)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_7tg70")
nodes/fragment/4/position = Vector2(-1180, 640)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_786d0")
nodes/fragment/5/position = Vector2(-1320, 860)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_fwm4k")
nodes/fragment/6/position = Vector2(-940, 800)
nodes/fragment/6/size = Vector2(724.789, 654.559)
nodes/fragment/6/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/6/output_ports = "0,0,Dither_Node;"
nodes/fragment/6/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_0nrdm")
nodes/fragment/7/position = Vector2(-60, 600)
nodes/fragment/8/node = SubResource("VisualShaderNodeFresnel_uw5nl")
nodes/fragment/8/position = Vector2(-187.712, 431.868)
nodes/fragment/connections = PackedInt32Array(4, 0, 6, 0, 5, 0, 6, 1, 6, 0, 7, 1, 7, 0, 0, 1, 8, 0, 7, 0, 2, 0, 0, 0)
nodes/light/0/position = Vector2(840, 240)
