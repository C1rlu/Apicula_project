[gd_resource type="ShaderMaterial" load_steps=24 format=3 uid="uid://pvr0u5gwh5ek"]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_jwu6u"]
parameter_name = "active_Dither"
qualifier = 1

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_gfrb5"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_tf6yy"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_u68nh"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_6v1if"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_6t5si"]

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_egxv0"]
default_input_values = [2, true, 3, 1.0]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_e4a5h"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_mcs3j"]
parameter_name = "Speed"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_q0dqp"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_3ndta"]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_5hpn1"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_i1c7b"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_8nqxw"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_2s0rt"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_5hhiq"]
constant = 0.5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_1cu0t"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_f0xbm"]
operator = 2

[sub_resource type="FastNoiseLite" id="FastNoiseLite_75nlw"]
noise_type = 2
frequency = 0.3
fractal_weighted_strength = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_xij0p"]
bump_strength = 27.2
noise = SubResource("FastNoiseLite_75nlw")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_1bhus"]
texture = SubResource("NoiseTexture2D_xij0p")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_emt3f"]
default_input_values = [0, 0.0, 1, 0.075]
operator = 2

[sub_resource type="VisualShader" id="VisualShader_g43lm"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_disabled, diffuse_lambert, specular_schlick_ggx, shadows_disabled, debug_shadow_splits;

uniform float Speed : hint_range(0, 1) = 0.5;
uniform sampler2D tex_vtx_8;



void vertex() {
// Input:4
	float n_out4p0 = TIME;


// FloatConstant:5
	float n_out5p0 = 0.500000;


// FloatParameter:10
	float n_out10p0 = Speed;


// FloatOp:13
	float n_out13p0 = n_out5p0 * n_out10p0;


// FloatOp:7
	float n_out7p0 = n_out4p0 * n_out13p0;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.00000, 1.00000);
	vec2 n_out6p0 = vec2(n_out7p0) * n_in6p1 + UV;


// Texture2D:8
	vec4 n_out8p0 = texture(tex_vtx_8, n_out6p0);


// FloatConstant:11
	float n_out11p0 = 10.000000;


// FloatOp:12
	float n_out12p0 = n_out11p0 * n_out10p0;


// FloatOp:9
	float n_out9p0 = n_out8p0.x * n_out12p0;


// Input:2
	vec3 n_out2p0 = VERTEX;


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out9p0) + n_out2p0;


// Output:0
	VERTEX = n_out3p0;


}

void fragment() {
// ColorConstant:3
	vec4 n_out3p0 = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Fresnel:8
	float n_in8p3 = 1.00000;
	float n_out8p0 = pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in8p3);


// Output:0
	ALBEDO = vec3(n_out3p0.xyz);
	ALPHA = n_out8p0;


}
"
modes/depth_draw = 1
modes/cull = 2
flags/shadows_disabled = true
flags/debug_shadow_splits = true
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_i1c7b")
nodes/vertex/2/position = Vector2(-80.4978, 470.82)
nodes/vertex/3/node = SubResource("VisualShaderNodeVectorOp_8nqxw")
nodes/vertex/3/position = Vector2(199.502, 50.8203)
nodes/vertex/4/node = SubResource("VisualShaderNodeInput_2s0rt")
nodes/vertex/4/position = Vector2(-1160.5, 70.8203)
nodes/vertex/5/node = SubResource("VisualShaderNodeFloatConstant_5hhiq")
nodes/vertex/5/position = Vector2(-1200.5, 250.82)
nodes/vertex/6/node = SubResource("VisualShaderNodeUVFunc_1cu0t")
nodes/vertex/6/position = Vector2(-720.498, 210.82)
nodes/vertex/7/node = SubResource("VisualShaderNodeFloatOp_f0xbm")
nodes/vertex/7/position = Vector2(-920.498, 250.82)
nodes/vertex/8/node = SubResource("VisualShaderNodeTexture_1bhus")
nodes/vertex/8/position = Vector2(-440.498, -109.18)
nodes/vertex/9/node = SubResource("VisualShaderNodeFloatOp_emt3f")
nodes/vertex/9/position = Vector2(-0.497803, -49.1797)
nodes/vertex/10/node = SubResource("VisualShaderNodeFloatParameter_mcs3j")
nodes/vertex/10/position = Vector2(-1040.5, 730.82)
nodes/vertex/11/node = SubResource("VisualShaderNodeFloatConstant_q0dqp")
nodes/vertex/11/position = Vector2(-240.498, 90.8203)
nodes/vertex/12/node = SubResource("VisualShaderNodeFloatOp_3ndta")
nodes/vertex/12/position = Vector2(-60.4978, 130.82)
nodes/vertex/13/node = SubResource("VisualShaderNodeFloatOp_5hpn1")
nodes/vertex/13/position = Vector2(-1000.5, 430.82)
nodes/vertex/connections = PackedInt32Array(2, 0, 3, 1, 4, 0, 7, 0, 7, 0, 6, 2, 9, 0, 3, 0, 11, 0, 12, 0, 10, 0, 12, 1, 12, 0, 9, 1, 5, 0, 13, 0, 10, 0, 13, 1, 13, 0, 7, 1, 6, 0, 8, 0, 8, 0, 9, 0, 3, 0, 0, 0)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorConstant_tf6yy")
nodes/fragment/3/position = Vector2(-320, -80)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatConstant_u68nh")
nodes/fragment/5/position = Vector2(-1720, 440)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_6v1if")
nodes/fragment/6/position = Vector2(-1440, 440)
nodes/fragment/6/size = Vector2(724.789, 654.559)
nodes/fragment/6/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/6/output_ports = "0,0,Dither_Node;"
nodes/fragment/6/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_6t5si")
nodes/fragment/7/position = Vector2(-780, 160)
nodes/fragment/8/node = SubResource("VisualShaderNodeFresnel_egxv0")
nodes/fragment/8/position = Vector2(-1460, 100)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_e4a5h")
nodes/fragment/9/position = Vector2(-1760, 800)
nodes/fragment/10/node = SubResource("VisualShaderNodeBooleanParameter_jwu6u")
nodes/fragment/10/position = Vector2(-1020, -120)
nodes/fragment/11/node = SubResource("VisualShaderNodeSwitch_gfrb5")
nodes/fragment/11/position = Vector2(-620, -100)
nodes/fragment/connections = PackedInt32Array(5, 0, 6, 0, 6, 0, 7, 1, 8, 0, 7, 0, 3, 0, 0, 0, 9, 0, 6, 1, 10, 0, 11, 0, 7, 0, 11, 1, 8, 0, 11, 2, 8, 0, 0, 1)
nodes/light/0/position = Vector2(1060, 580)

[resource]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("VisualShader_g43lm")
shader_parameter/Speed = 0.02
