[gd_resource type="ShaderMaterial" load_steps=7 format=3 uid="uid://clw3a375133r3"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_irn40"]
constant = Color(0.574833, 0.459803, 0.228215, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_lygi0"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_0rwn3"]
constant = 0.757

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_cygvy"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_merkm"]

[sub_resource type="VisualShader" id="VisualShader_0pt0r"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;




void fragment() {
// ColorConstant:2
	vec4 n_out2p0 = vec4(0.574833, 0.459803, 0.228215, 1.000000);


// FloatConstant:4
	float n_out4p0 = 0.757000;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out5p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_out6p0 = step(n_out2p0.x, n_out5p0);


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out6p0;


}
"
graph_offset = Vector2(-461.594, -88.4484)
flags/unshaded = true
nodes/fragment/2/node = SubResource("VisualShaderNodeColorConstant_irn40")
nodes/fragment/2/position = Vector2(-128, 185)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_lygi0")
nodes/fragment/3/position = Vector2(-920, 640)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_0rwn3")
nodes/fragment/4/position = Vector2(-920, 500)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_cygvy")
nodes/fragment/5/position = Vector2(-640, 500)
nodes/fragment/5/size = Vector2(724.789, 654.559)
nodes/fragment/5/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/5/output_ports = "0,0,Dither_Node;"
nodes/fragment/5/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_merkm")
nodes/fragment/6/position = Vector2(21.9654, 343.579)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 5, 1, 4, 0, 5, 0, 2, 0, 6, 0, 5, 0, 6, 1, 6, 0, 0, 1)

[resource]
render_priority = 0
shader = SubResource("VisualShader_0pt0r")
