[gd_resource type="ShaderMaterial" load_steps=10 format=3 uid="uid://dmi6np7l0110b"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3ywqg"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_p57tx"]
source = 5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_68ja8"]
parameter_name = "ColorParameter"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_f87xt"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_d7q4s"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_erpt8"]
constant = 1.0

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ip24k"]
default_input_values = [0, Vector3(0.66, 0.66, 0.66), 1, Vector3(0, 0, 0)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_duyip"]
function = 31

[sub_resource type="VisualShader" id="VisualShader_25b8v"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 ColorParameter : source_color;



void fragment() {
// ColorParameter:4
	vec4 n_out4p0 = ColorParameter;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);


// FloatFunc:9
	float n_out9p0 = 1.0 - n_out3p0.x;


// FloatConstant:7
	float n_out7p0 = 1.000000;


// FloatConstant:5
	float n_out5p0 = 0.400000;


	float n_out6p0;
// Expression:6
	n_out6p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out6p0 = n_out7p0 - DITHER_THRESHOLDS[index];
	}


// Step:8
	vec3 n_out8p0 = step(vec3(n_out9p0), vec3(n_out6p0));


// Output:0
	COLOR.rgb = vec3(n_out4p0.xyz);
	COLOR.a = n_out8p0.x;


}
"
graph_offset = Vector2(-747.337, -17.3327)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_3ywqg")
nodes/fragment/2/position = Vector2(-1120, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_p57tx")
nodes/fragment/3/position = Vector2(-560, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorParameter_68ja8")
nodes/fragment/4/position = Vector2(-740, 40)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatConstant_f87xt")
nodes/fragment/5/position = Vector2(-980, 740)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_d7q4s")
nodes/fragment/6/position = Vector2(-700, 600)
nodes/fragment/6/size = Vector2(724.789, 654.559)
nodes/fragment/6/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/6/output_ports = "0,0,Dither_Node;"
nodes/fragment/6/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_erpt8")
nodes/fragment/7/position = Vector2(-960, 620)
nodes/fragment/8/node = SubResource("VisualShaderNodeStep_ip24k")
nodes/fragment/8/position = Vector2(136.472, 446.162)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatFunc_duyip")
nodes/fragment/9/position = Vector2(-63.4559, 301.489)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 2, 5, 0, 6, 1, 7, 0, 6, 0, 6, 0, 8, 1, 4, 0, 0, 0, 8, 0, 0, 1, 3, 0, 9, 0, 9, 0, 8, 0)

[resource]
shader = SubResource("VisualShader_25b8v")
shader_parameter/ColorParameter = Color(0.439216, 0.403922, 0.34902, 1)
