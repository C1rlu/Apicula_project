[gd_scene load_steps=46 format=3 uid="uid://dr7pcue70x0dt"]

[ext_resource type="Script" path="res://12_INVENTORY/Behaviour/Movable_paper.tres.gd" id="1_hutrl"]
[ext_resource type="Script" path="res://12_INVENTORY/Behaviour/legend.tres.gd" id="2_jvqxf"]
[ext_resource type="Texture2D" uid="uid://cvgf4l4anpjfx" path="res://12_INVENTORY/Photo/PhotoTest_01 .jpg" id="4_5je6e"]

[sub_resource type="GDScript" id="GDScript_6ohgl"]
script/source = "extends Node

@onready var root = $\"..\"

var t 
var is_denoise = false


func _ready():
	#_global_datas._backFrom_subscene.connect(_change_photo_shade)
	_global_datas._subscene_fail.connect(_remove_photo)
	_change_photo_shade()


func _remove_photo():
	
	if is_denoise:
		return
	root.queue_free()	
	

		
func _apply_photo(photo_data : PhotoData):
	
	var color_rect = $\"../ColorRect5/Photo\"
	var _material : Material = color_rect.get_material()
	var imageN : Texture2D = photo_data.image
	_material.set_shader_parameter(\"Photo\",imageN)
	
	var text = $\"../text\"
	text.text = photo_data.name
	
	var legend = $\"../Legend\"
	var legend_text = photo_data.legend
	legend.set_legend(legend_text)
	
			
func _change_photo_shade():
	
	if is_denoise:
		return

	is_denoise = true
	
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(change_value,1.5,1,2.0).set_trans(Tween.TRANS_SINE)	
	
func change_value(value : float):
	var color_rect = $\"../ColorRect5/Photo\"
	var _material : Material = color_rect.get_material()
	_material.set_shader_parameter(\"Denoiser\" , value)
"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_l5qlk"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_gv6jj"]
constant = 0.475

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_b08nu"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ii4gj"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5etsi"]
input_name = "color"

[sub_resource type="VisualShader" id="VisualShader_4lwo1"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:6
	vec4 n_out6p0 = COLOR;


// FloatConstant:3
	float n_out3p0 = 0.475000;


// FloatConstant:2
	float n_out2p0 = 0.300000;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out2p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out3p0 - DITHER_THRESHOLDS[index];
	}


// Step:5
	float n_out5p0 = step(n_out6p0.x, n_out4p0);


// Output:0
	COLOR.a = n_out5p0;


}
"
graph_offset = Vector2(-555.827, 27.7819)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_l5qlk")
nodes/fragment/2/position = Vector2(-1080, 460)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_gv6jj")
nodes/fragment/3/position = Vector2(-1000, 340)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_b08nu")
nodes/fragment/4/position = Vector2(-660, 320)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeStep_ii4gj")
nodes/fragment/5/position = Vector2(80, 140)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_5etsi")
nodes/fragment/6/position = Vector2(-420, 160)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 1, 3, 0, 4, 0, 6, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0na45"]
shader = SubResource("VisualShader_4lwo1")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_yi0ts"]
constant = 0.16

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_6vvps"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_7rww3"]
source = 5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_a3x28"]
function = 1

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_xq2ka"]
parameter_name = "Dither_size"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5dr0r"]
input_name = "color"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_k4u8l"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_kipq4"]
constant = 1.313

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_xcjd2"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_v7yj6"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_qiosn"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_o4sih"]
constant = Color(0.0238592, 0.144913, 0.160659, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_nsd4x"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShader" id="VisualShader_gpyxh"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


// ColorConstant:8
	vec4 n_out8p0 = vec4(0.023859, 0.144913, 0.160659, 1.000000);


// FloatConstant:4
	float n_out4p0 = 1.313000;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out5p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_out6p0 = step(n_out2p0.x, n_out5p0);


// Mix:7
	vec3 n_out7p0 = mix(vec3(n_out2p0.xyz), vec3(n_out8p0.xyz), vec3(n_out6p0));


// FloatConstant:10
	float n_out10p0 = 0.160000;


// Mix:9
	vec3 n_out9p0 = mix(vec3(n_out2p0.xyz), n_out7p0, vec3(n_out10p0));


// Output:0
	COLOR.rgb = n_out9p0;


}
"
graph_offset = Vector2(-622.908, -165.014)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1160, 200)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_5dr0r")
nodes/fragment/2/position = Vector2(-360, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_k4u8l")
nodes/fragment/3/position = Vector2(-1300, 880)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_kipq4")
nodes/fragment/4/position = Vector2(-1300, 740)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_xcjd2")
nodes/fragment/5/position = Vector2(-980, 840)
nodes/fragment/5/size = Vector2(724.789, 654.559)
nodes/fragment/5/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/5/output_ports = "0,0,Dither_Node;"
nodes/fragment/5/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_v7yj6")
nodes/fragment/6/position = Vector2(220, 560)
nodes/fragment/7/node = SubResource("VisualShaderNodeMix_qiosn")
nodes/fragment/7/position = Vector2(680, 180)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_o4sih")
nodes/fragment/8/position = Vector2(200, 340)
nodes/fragment/9/node = SubResource("VisualShaderNodeMix_nsd4x")
nodes/fragment/9/position = Vector2(800, 380)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatConstant_yi0ts")
nodes/fragment/10/position = Vector2(620, 540)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture2DParameter_6vvps")
nodes/fragment/11/position = Vector2(-1260, 420)
nodes/fragment/12/node = SubResource("VisualShaderNodeTexture_7rww3")
nodes/fragment/12/position = Vector2(-340, 500)
nodes/fragment/13/node = SubResource("VisualShaderNodeUVFunc_a3x28")
nodes/fragment/13/position = Vector2(-664.982, 376.977)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatParameter_xq2ka")
nodes/fragment/14/position = Vector2(-1260, 120)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 1, 4, 0, 5, 0, 2, 0, 6, 0, 2, 0, 7, 0, 8, 0, 7, 1, 6, 0, 7, 2, 2, 0, 9, 0, 7, 0, 9, 1, 10, 0, 9, 2, 11, 0, 12, 2, 13, 0, 12, 0, 14, 0, 13, 1, 5, 0, 6, 1, 9, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_b0g2v"]
shader = SubResource("VisualShader_gpyxh")

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_4dsys"]
parameter_name = "Photo"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_fbip5"]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_oe65p"]
operator = 6

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ij7fi"]
input_name = "color"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_umple"]
parameter_name = "Denoiser"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_7bxtg"]
constant = 0.4

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_a3ao4"]
default_input_values = [0, 0.275, 1, 0.54]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_2233u"]
fractal_gain = 1.705

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_rnntn"]
noise = SubResource("FastNoiseLite_2233u")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_y6qfl"]
texture = SubResource("NoiseTexture2D_rnntn")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_bdip6"]
constant = 1.587

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_6uvgy"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pnjxy"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_aikbk"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_5u3d4"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_2ja4v"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_22r7c"]
constant = Color(0.0238592, 0.144913, 0.160659, 1)

[sub_resource type="VisualShader" id="VisualShader_n63tb"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Photo;
uniform sampler2D tex_frg_32;
uniform float Denoiser = 0;



void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


// ColorConstant:8
	vec4 n_out8p0 = vec4(0.023859, 0.144913, 0.160659, 1.000000);


	vec4 n_out18p0;
// Texture2D:18
	n_out18p0 = texture(Photo, UV);


// FloatConstant:33
	float n_out33p0 = 1.587000;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out5p0 = n_out33p0 - DITHER_THRESHOLDS[index];
	}


// Texture2D:32
	vec4 n_out32p0 = texture(tex_frg_32, UV);


// Step:31
	float n_out31p0 = step(n_out5p0, n_out32p0.x);


// VectorOp:19
	vec3 n_out19p0 = max(vec3(n_out18p0.xyz), vec3(n_out31p0));


// FloatParameter:24
	float n_out24p0 = Denoiser;


// FloatConstant:35
	float n_out35p0 = 0.400000;


	float n_out37p0;
// Expression:37
	n_out37p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out35p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out37p0 = n_out24p0 - DITHER_THRESHOLDS[index];
	}


// Step:38
	float n_out38p0 = step(n_out19p0.x, n_out37p0);


// Mix:7
	vec3 n_out7p0 = mix(vec3(n_out2p0.xyz), vec3(n_out8p0.xyz), vec3(n_out38p0));


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-608.823, -233.726)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1220, 340)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_ij7fi")
nodes/fragment/2/position = Vector2(340, 20)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_7bxtg")
nodes/fragment/3/position = Vector2(-2680, 1180)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_5u3d4")
nodes/fragment/5/position = Vector2(-2100, 1060)
nodes/fragment/5/size = Vector2(724.789, 654.559)
nodes/fragment/5/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/5/output_ports = "0,0,Dither_Node;"
nodes/fragment/5/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/7/node = SubResource("VisualShaderNodeMix_2ja4v")
nodes/fragment/7/position = Vector2(680, 180)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_22r7c")
nodes/fragment/8/position = Vector2(300, 180)
nodes/fragment/17/node = SubResource("VisualShaderNodeTexture2DParameter_4dsys")
nodes/fragment/17/position = Vector2(-1220, 100)
nodes/fragment/18/node = SubResource("VisualShaderNodeTexture_fbip5")
nodes/fragment/18/position = Vector2(-680, 260)
nodes/fragment/19/node = SubResource("VisualShaderNodeVectorOp_oe65p")
nodes/fragment/19/position = Vector2(-400, 580)
nodes/fragment/24/node = SubResource("VisualShaderNodeFloatParameter_umple")
nodes/fragment/24/position = Vector2(-280, 1140)
nodes/fragment/31/node = SubResource("VisualShaderNodeStep_a3ao4")
nodes/fragment/31/position = Vector2(-720, 920)
nodes/fragment/32/node = SubResource("VisualShaderNodeTexture_y6qfl")
nodes/fragment/32/position = Vector2(-1140, 1220)
nodes/fragment/33/node = SubResource("VisualShaderNodeFloatConstant_bdip6")
nodes/fragment/33/position = Vector2(-2440, 1020)
nodes/fragment/35/node = SubResource("VisualShaderNodeFloatConstant_6uvgy")
nodes/fragment/35/position = Vector2(-380, 1380)
nodes/fragment/37/node = SubResource("VisualShaderNodeExpression_pnjxy")
nodes/fragment/37/position = Vector2(80, 1260)
nodes/fragment/37/size = Vector2(724.789, 654.559)
nodes/fragment/37/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/37/output_ports = "0,0,Dither_Node;"
nodes/fragment/37/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/38/node = SubResource("VisualShaderNodeStep_aikbk")
nodes/fragment/38/position = Vector2(420, 780)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 1, 17, 0, 18, 2, 2, 0, 7, 0, 8, 0, 7, 1, 7, 0, 0, 0, 18, 0, 19, 0, 32, 0, 31, 1, 33, 0, 5, 0, 35, 0, 37, 1, 19, 0, 38, 0, 38, 0, 7, 2, 24, 0, 37, 0, 37, 0, 38, 1, 5, 0, 31, 0, 31, 0, 19, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_idu35"]
resource_local_to_scene = true
shader = SubResource("VisualShader_n63tb")
shader_parameter/Denoiser = 1.0
shader_parameter/Photo = ExtResource("4_5je6e")

[node name="Photo_Square_prefabs" type="Node2D"]
scale = Vector2(3, 3)

[node name="Change_photo" type="Node" parent="."]
script = SubResource("GDScript_6ohgl")

[node name="Take_object" type="Node" parent="."]
script = ExtResource("1_hutrl")
object_center_marge = Vector2(40, 40)

[node name="Legend" type="Node" parent="."]
script = ExtResource("2_jvqxf")
_legend = "put a legend pls"

[node name="shadow" type="ColorRect" parent="."]
light_mask = 3
material = SubResource("ShaderMaterial_0na45")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -40.4924
offset_top = -35.9924
offset_right = 37.5076
offset_bottom = 42.0076
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(0.990485, 0.990485)
pivot_offset = Vector2(40, 40)
mouse_filter = 2
color = Color(0.0117647, 0.0941176, 0.105882, 1)

[node name="ColorRect5" type="ColorRect" parent="."]
light_mask = 3
material = SubResource("ShaderMaterial_b0g2v")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -40.0
offset_top = -40.0
offset_right = 40.0
offset_bottom = 40.0
grow_horizontal = 2
grow_vertical = 2
pivot_offset = Vector2(40, 40)
mouse_filter = 2
color = Color(0.52549, 0.482353, 0.392157, 1)
metadata/_edit_use_anchors_ = true

[node name="Photo" type="ColorRect" parent="ColorRect5"]
light_mask = 3
material = SubResource("ShaderMaterial_idu35")
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -36.0
offset_top = -35.0
offset_right = 36.0
offset_bottom = 26.0
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(1.05, 1.05)
pivot_offset = Vector2(40, 40)
mouse_filter = 2
color = Color(0.45098, 0.396078, 0.278431, 1)

[node name="text" type="Label" parent="."]
visible = false
offset_left = -40.0
offset_top = 29.0
offset_right = 222.0
offset_bottom = 67.0
scale = Vector2(0.295642, 0.295642)
theme_override_colors/font_color = Color(0.0234375, 0.144531, 0.160156, 1)
theme_override_font_sizes/font_size = 25
text = "Description"
horizontal_alignment = 2
