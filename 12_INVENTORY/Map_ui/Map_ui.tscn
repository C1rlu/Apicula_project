[gd_scene load_steps=47 format=3 uid="uid://bjy34o0nbhbc3"]

[ext_resource type="Script" path="res://10_BOARD/Behaviour/Movable_paper.tres.gd" id="1_4v3k2"]
[ext_resource type="Script" path="res://10_BOARD/Behaviour/Apply_pos_anim.gd" id="2_linhc"]
[ext_resource type="Texture2D" uid="uid://kaln43e5c5my" path="res://10_BOARD/Map/Map_board_test.png" id="3_gbywh"]

[sub_resource type="GDScript" id="GDScript_vq4md"]
script/source = "extends Node

@export var _legend : String

func set_legend(legend : String):
	_legend = legend	

func get_legend():
	return _legend
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_icff5"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_w18uv"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_1irwe"]
source = 5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_j84ll"]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_d78hh"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_w1om8"]
constant = 1.0

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_7fg63"]
default_input_values = [0, 0.0, 1, 1.0, 2, 0.065]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ue53i"]
input_name = "color"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_u4ehj"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_cxkkj"]
constant = 1.121

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_dl6u5"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_qgp8h"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_aqiiq"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_7fgls"]
constant = Color(0.0238592, 0.144913, 0.160659, 1)

[sub_resource type="VisualShader" id="VisualShader_w5ow2"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


// ColorConstant:8
	vec4 n_out8p0 = vec4(0.023859, 0.144913, 0.160659, 1.000000);


// FloatConstant:4
	float n_out4p0 = 1.121000;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out5p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Mix:16
	float n_in16p1 = 1.00000;
	float n_in16p2 = 0.06500;
	float n_out16p0 = mix(n_out5p0, n_in16p1, n_in16p2);


// Step:6
	float n_out6p0 = step(n_out2p0.x, n_out16p0);


// Mix:7
	vec3 n_out7p0 = mix(vec3(n_out2p0.xyz), vec3(n_out8p0.xyz), vec3(n_out6p0));


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-1174.96, 582.119)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1020, 180)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_ue53i")
nodes/fragment/2/position = Vector2(-360, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_u4ehj")
nodes/fragment/3/position = Vector2(-1300, 880)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_cxkkj")
nodes/fragment/4/position = Vector2(-1300, 740)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_dl6u5")
nodes/fragment/5/position = Vector2(-1000, 860)
nodes/fragment/5/size = Vector2(724.789, 654.559)
nodes/fragment/5/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/5/output_ports = "0,0,Dither_Node;"
nodes/fragment/5/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_qgp8h")
nodes/fragment/6/position = Vector2(220, 560)
nodes/fragment/7/node = SubResource("VisualShaderNodeMix_aqiiq")
nodes/fragment/7/position = Vector2(680, 180)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_7fgls")
nodes/fragment/8/position = Vector2(60, 40)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture2DParameter_w18uv")
nodes/fragment/11/position = Vector2(-20, 1260)
nodes/fragment/12/node = SubResource("VisualShaderNodeTexture_1irwe")
nodes/fragment/12/position = Vector2(600, 1080)
nodes/fragment/13/node = SubResource("VisualShaderNodeUVFunc_j84ll")
nodes/fragment/13/position = Vector2(160, 1020)
nodes/fragment/14/node = SubResource("VisualShaderNodeInput_d78hh")
nodes/fragment/14/position = Vector2(-180, 900)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatConstant_w1om8")
nodes/fragment/15/position = Vector2(-120, 1060)
nodes/fragment/16/node = SubResource("VisualShaderNodeMix_7fg63")
nodes/fragment/16/position = Vector2(514.01, 768.594)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 1, 4, 0, 5, 0, 2, 0, 6, 0, 2, 0, 7, 0, 6, 0, 7, 2, 8, 0, 7, 1, 13, 0, 12, 0, 11, 0, 12, 2, 14, 0, 13, 0, 15, 0, 13, 1, 16, 0, 6, 1, 5, 0, 16, 0, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_41fye"]
shader = SubResource("VisualShader_w5ow2")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_vy3uy"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_wrakf"]
constant = 1.3

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yf2cc"]
input_name = "texture"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_rcux5"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ynjn2"]
parameter_name = "Color2"
default_value_enabled = true
default_value = Color(0.470642, 0.389814, 0.0971986, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_6gs4j"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_eg6mi"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_8h7o3"]
size = Vector2(582.979, 472.949)
expression = "vec2 uv = (offset / size) + UV;
vec2 r = mod(size * uv, vec2(grid_size));
vec2 lines = smoothstep(1.0 - line_width, 1, r / vec2(grid_size));
float alpha = dot(lines, vec2(1.0, 1.0));
COLOR = alpha;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_e4ymr"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_44tuy"]
parameter_name = "Offset"
default_value_enabled = true

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_7cgvi"]
parameter_name = "Size"
default_value_enabled = true
default_value = Vector2(1000, 1000)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_n3egp"]
constant = 200.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_k6ony"]
parameter_name = "Ligne_widht"
default_value_enabled = true
default_value = 0.025

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_fwdul"]
source = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_d7vb0"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_xqvny"]
constant = 1.3

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_xeqnp"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ypj7o"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_bhpx4"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_q6qdc"]
parameter_name = "Grid_color"
default_value_enabled = true
default_value = Color(0.470642, 0.389814, 0.0971986, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_xbs7r"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_5osmr"]
parameter_name = "ColorParameter"

[sub_resource type="VisualShader" id="VisualShader_qrx8b"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 ColorParameter : source_color;
uniform vec4 Color2 : source_color = vec4(0.470642, 0.389814, 0.097199, 1.000000);
uniform vec4 Grid_color : source_color = vec4(0.470642, 0.389814, 0.097199, 1.000000);
uniform vec2 Offset = vec2(0.000000, 0.000000);
uniform vec2 Size = vec2(1000.000000, 1000.000000);
uniform float Ligne_widht = 0.02500000037253;



void fragment() {
// ColorParameter:40
	vec4 n_out40p0 = ColorParameter;


// ColorParameter:21
	vec4 n_out21p0 = Color2;


// FloatConstant:19
	float n_out19p0 = 1.300000;


// FloatConstant:18
	float n_out18p0 = 0.400000;


	float n_out20p0;
// Expression:20
	n_out20p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out18p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out20p0 = n_out19p0 - DITHER_THRESHOLDS[index];
	}


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);


// Step:23
	float n_out23p0 = step(n_out20p0, n_out3p0.x);


// Mix:22
	vec3 n_in22p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out22p0 = mix(n_in22p0, vec3(n_out21p0.xyz), vec3(n_out23p0));


// ColorParameter:35
	vec4 n_out35p0 = Grid_color;


// FloatConstant:31
	float n_out31p0 = 1.300000;


// FloatConstant:30
	float n_out30p0 = 0.400000;


	float n_out32p0;
// Expression:32
	n_out32p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out30p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out32p0 = n_out31p0 - DITHER_THRESHOLDS[index];
	}


// Vector2Parameter:26
	vec2 n_out26p0 = Offset;


// Input:25
	vec2 n_out25p0 = UV;


// Vector2Parameter:27
	vec2 n_out27p0 = Size;


// FloatConstant:28
	float n_out28p0 = 200.000000;


// FloatParameter:29
	float n_out29p0 = Ligne_widht;


	float n_out24p0;
// Expression:24
	n_out24p0 = 0.0;
	{
		vec2 uv = (n_out26p0 / n_out27p0) + n_out25p0;
		vec2 r = mod(n_out27p0 * uv, vec2(n_out28p0));
		vec2 lines = smoothstep(1.0 - n_out29p0, 1, r / vec2(n_out28p0));
		float alpha = dot(lines, vec2(1.0, 1.0));
		n_out24p0 = alpha;
	}


// Step:33
	float n_out33p0 = step(n_out32p0, n_out24p0);


// Mix:34
	vec3 n_out34p0 = mix(n_out22p0, vec3(n_out35p0.xyz), vec3(n_out33p0));


// Mix:36
	vec3 n_in36p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out36p0 = mix(vec3(n_out40p0.xyz), n_out34p0, n_in36p2);


// Output:0
	COLOR.rgb = n_out36p0;


}
"
graph_offset = Vector2(-1056.7, -198.981)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_yf2cc")
nodes/fragment/2/position = Vector2(-4340, 420)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_fwdul")
nodes/fragment/3/position = Vector2(-4040, 360)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatConstant_vy3uy")
nodes/fragment/18/position = Vector2(-4480, 740)
nodes/fragment/19/node = SubResource("VisualShaderNodeFloatConstant_wrakf")
nodes/fragment/19/position = Vector2(-4480, 600)
nodes/fragment/20/node = SubResource("VisualShaderNodeExpression_rcux5")
nodes/fragment/20/position = Vector2(-4180, 720)
nodes/fragment/20/size = Vector2(724.789, 654.559)
nodes/fragment/20/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/20/output_ports = "0,0,Dither_Node;"
nodes/fragment/20/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/21/node = SubResource("VisualShaderNodeColorParameter_ynjn2")
nodes/fragment/21/position = Vector2(-3140, -360)
nodes/fragment/22/node = SubResource("VisualShaderNodeMix_6gs4j")
nodes/fragment/22/position = Vector2(-2160, 100)
nodes/fragment/23/node = SubResource("VisualShaderNodeStep_eg6mi")
nodes/fragment/23/position = Vector2(-3660, 420)
nodes/fragment/24/node = SubResource("VisualShaderNodeExpression_8h7o3")
nodes/fragment/24/position = Vector2(-2420, 700)
nodes/fragment/24/size = Vector2(582.979, 472.949)
nodes/fragment/24/input_ports = "0,3,offset;1,3,UV;2,3,size;3,0,grid_size;4,0,line_width;"
nodes/fragment/24/output_ports = "0,0,COLOR;"
nodes/fragment/24/expression = "vec2 uv = (offset / size) + UV;
vec2 r = mod(size * uv, vec2(grid_size));
vec2 lines = smoothstep(1.0 - line_width, 1, r / vec2(grid_size));
float alpha = dot(lines, vec2(1.0, 1.0));
COLOR = alpha;"
nodes/fragment/25/node = SubResource("VisualShaderNodeInput_e4ymr")
nodes/fragment/25/position = Vector2(-2940, 760)
nodes/fragment/26/node = SubResource("VisualShaderNodeVec2Parameter_44tuy")
nodes/fragment/26/position = Vector2(-2980, 560)
nodes/fragment/27/node = SubResource("VisualShaderNodeVec2Parameter_7cgvi")
nodes/fragment/27/position = Vector2(-3020, 900)
nodes/fragment/28/node = SubResource("VisualShaderNodeFloatConstant_n3egp")
nodes/fragment/28/position = Vector2(-2740, 980)
nodes/fragment/29/node = SubResource("VisualShaderNodeFloatParameter_k6ony")
nodes/fragment/29/position = Vector2(-2820, 1160)
nodes/fragment/30/node = SubResource("VisualShaderNodeFloatConstant_d7vb0")
nodes/fragment/30/position = Vector2(-1580, 980)
nodes/fragment/31/node = SubResource("VisualShaderNodeFloatConstant_xqvny")
nodes/fragment/31/position = Vector2(-1580, 840)
nodes/fragment/32/node = SubResource("VisualShaderNodeExpression_xeqnp")
nodes/fragment/32/position = Vector2(-1280, 960)
nodes/fragment/32/size = Vector2(724.789, 654.559)
nodes/fragment/32/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/32/output_ports = "0,0,Dither_Node;"
nodes/fragment/32/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/33/node = SubResource("VisualShaderNodeStep_ypj7o")
nodes/fragment/33/position = Vector2(-1440, 420)
nodes/fragment/34/node = SubResource("VisualShaderNodeMix_bhpx4")
nodes/fragment/34/position = Vector2(-1120, 220)
nodes/fragment/35/node = SubResource("VisualShaderNodeColorParameter_q6qdc")
nodes/fragment/35/position = Vector2(-1740, 260)
nodes/fragment/36/node = SubResource("VisualShaderNodeMix_xbs7r")
nodes/fragment/36/position = Vector2(-438.285, 52.1627)
nodes/fragment/40/node = SubResource("VisualShaderNodeColorParameter_5osmr")
nodes/fragment/40/position = Vector2(-840, -80)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 2, 18, 0, 20, 1, 19, 0, 20, 0, 20, 0, 23, 0, 25, 0, 24, 1, 28, 0, 24, 3, 26, 0, 24, 0, 27, 0, 24, 2, 29, 0, 24, 4, 30, 0, 32, 1, 31, 0, 32, 0, 32, 0, 33, 0, 35, 0, 34, 1, 22, 0, 34, 0, 3, 0, 23, 1, 36, 0, 0, 0, 34, 0, 36, 1, 23, 0, 22, 2, 21, 0, 22, 1, 33, 0, 34, 2, 24, 0, 33, 1, 40, 0, 36, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lf4bd"]
shader = SubResource("VisualShader_qrx8b")
shader_parameter/ColorParameter = Color(0.0666667, 0.258824, 0.286275, 1)
shader_parameter/Color2 = Color(0.721569, 0.792157, 0.8, 1)
shader_parameter/Grid_color = Color(0.517647, 0.607843, 0.619608, 1)
shader_parameter/Offset = Vector2(0, 0)
shader_parameter/Size = Vector2(2000, 2000)
shader_parameter/Ligne_widht = 0.03

[sub_resource type="GDScript" id="GDScript_y5o0k"]
script/source = "extends Node

signal  move_behind


func _move_behind():
	move_behind.emit()
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_epdke"]
size = Vector2(411, 409)

[node name="Map" type="Node2D"]

[node name="Take_object" type="Node" parent="."]
script = ExtResource("1_4v3k2")

[node name="Apply_pos_anim" type="Node" parent="."]
script = ExtResource("2_linhc")

[node name="Show_map_grid" type="Node" parent="."]

[node name="Legend" type="Node" parent="."]
script = SubResource("GDScript_vq4md")
_legend = "Never travel without a map"

[node name="shadow" type="ColorRect" parent="."]
visible = false
light_mask = 3
material = SubResource("ShaderMaterial_icff5")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -66.8367
offset_top = 36.8761
offset_right = 11.1633
offset_bottom = 114.876
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(7.5833, 10.1534)
pivot_offset = Vector2(40, 40)
mouse_filter = 2
color = Color(0, 0, 0, 1)

[node name="ColorRect3" type="ColorRect" parent="."]
light_mask = 3
material = SubResource("ShaderMaterial_41fye")
offset_left = -292.0
offset_top = -287.0
offset_right = 290.0
offset_bottom = 283.0
scale = Vector2(0.70678, 0.718924)
pivot_offset = Vector2(292, 292)
mouse_filter = 2
color = Color(0.576471, 0.52549, 0.45098, 1)

[node name="Map" type="TextureRect" parent="."]
light_mask = 3
material = SubResource("ShaderMaterial_lf4bd")
offset_left = -400.0
offset_top = -400.0
offset_right = 400.0
offset_bottom = 400.0
scale = Vector2(0.5, 0.5)
pivot_offset = Vector2(400, 400)
mouse_filter = 2
texture = ExtResource("3_gbywh")

[node name="Area2D" type="Area2D" parent="."]

[node name="Apply_pos_behind" type="Node" parent="Area2D"]
script = SubResource("GDScript_y5o0k")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2(-0.499999, -0.499999)
scale = Vector2(1, 1)
shape = SubResource("RectangleShape2D_epdke")

[connection signal="mouse_entered" from="Area2D" to="Take_object" method="_on_area_2d_mouse_entered"]
[connection signal="mouse_exited" from="Area2D" to="Take_object" method="_on_area_2d_mouse_exited"]
[connection signal="move_behind" from="Area2D/Apply_pos_behind" to="Apply_pos_anim" method="_on_apply_pos_behind_move_behind"]
