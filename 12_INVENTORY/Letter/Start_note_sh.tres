[gd_resource type="VisualShader" load_steps=10 format=3 uid="uid://c38pab15ywxmh"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_6x6gu"]
parameter_name = "Gradient"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_brndl"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_mqd3q"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_aqmy3"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_mc6q3"]
input_name = "color"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_al5hj"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_3bwkx"]
default_input_values = [0, 0.195, 1, 0.0]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_tf8wn"]
constant = 0.073

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_uln7k"]
source = 5

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Gradient;
global uniform float Dither_size;



void fragment() {
// Input:5
	vec4 n_out5p0 = COLOR;


	vec4 n_out9p0;
// Texture2D:9
	n_out9p0 = texture(Gradient, UV);


// FloatConstant:2
	float n_out2p0 = 1.000000;


// FloatParameter:4
	float n_out4p0 = Dither_size;


	float n_out3p0;
// Expression:3
	n_out3p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out4p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out3p0 = n_out2p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_out7p0 = step(n_out9p0.x, n_out3p0);


// FloatConstant:8
	float n_out8p0 = 0.073000;


// Mix:6
	vec3 n_out6p0 = mix(vec3(n_out5p0.xyz), vec3(n_out7p0), vec3(n_out8p0));


// Output:0
	COLOR.rgb = n_out6p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1020, 120)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_brndl")
nodes/fragment/2/position = Vector2(-800, -60)
nodes/fragment/3/node = SubResource("VisualShaderNodeExpression_mqd3q")
nodes/fragment/3/position = Vector2(-480, 160)
nodes/fragment/3/size = Vector2(724.789, 654.559)
nodes/fragment/3/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/3/output_ports = "0,0,Dither_Node;"
nodes/fragment/3/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatParameter_aqmy3")
nodes/fragment/4/position = Vector2(-1060, 160)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_mc6q3")
nodes/fragment/5/position = Vector2(40, -200)
nodes/fragment/6/node = SubResource("VisualShaderNodeMix_al5hj")
nodes/fragment/6/position = Vector2(760, 20)
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_3bwkx")
nodes/fragment/7/position = Vector2(260, 20)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatConstant_tf8wn")
nodes/fragment/8/position = Vector2(474.426, 212.771)
nodes/fragment/9/node = SubResource("VisualShaderNodeTexture_uln7k")
nodes/fragment/9/position = Vector2(-240, -120)
nodes/fragment/10/node = SubResource("VisualShaderNodeTexture2DParameter_6x6gu")
nodes/fragment/10/position = Vector2(-700, -240)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 4, 0, 3, 1, 5, 0, 6, 0, 6, 0, 0, 0, 7, 0, 6, 1, 3, 0, 7, 1, 8, 0, 6, 2, 9, 0, 7, 0, 10, 0, 9, 2)
