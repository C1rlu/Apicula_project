[gd_resource type="VisualShader" load_steps=35 format=3 uid="uid://cw0x3o7tvvdcv"]

[ext_resource type="Texture2D" uid="uid://j82ecsafafol" path="res://10_BOARD/Map/Map_board_isle_01.png" id="2_5sv43"]
[ext_resource type="Texture2D" uid="uid://v5bi85b50j4g" path="res://10_BOARD/Map/Map_board_01.png" id="2_hic37"]

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_g35gv"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_86ydh"]
size = Vector2(582.979, 472.949)
expression = "vec2 uv = (offset / size) + UV;
vec2 r = mod(size * uv, vec2(grid_size));
vec2 lines = smoothstep(1.0 - line_width, 1, r / vec2(grid_size));
float alpha = dot(lines, vec2(1.0, 1.0));
COLOR = alpha;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_eooh5"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_x22b7"]
parameter_name = "Offset"
default_value_enabled = true

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_5oitx"]
parameter_name = "Size"
default_value_enabled = true
default_value = Vector2(1000, 1000)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ylh4o"]
constant = 200.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_34pw2"]
parameter_name = "Ligne_widht"
default_value_enabled = true
default_value = 0.025

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_m1hb7"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_47gm1"]
constant = 1.3

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ymidu"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_wpsel"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_rg8ws"]
parameter_name = "Grid_color"
default_value_enabled = true
default_value = Color(0.470642, 0.389814, 0.0971986, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_o0kew"]
texture = ExtResource("2_hic37")

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_8in3j"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_dv0kw"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_q2q1n"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_6akoj"]
parameter_name = "Opacity"
hint = 1
min = 1.0
max = 2.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_mrum1"]
texture = ExtResource("2_5sv43")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_27421"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_wwjdk"]
parameter_name = "Isle_color"
default_value_enabled = true
default_value = Color(0.575368, 0.573518, 0, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_2jpii"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_vf3t8"]
default_input_values = [0, 0.0, 1, 1.0, 2, 0.07]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_tylat"]
parameter_name = "BlueNoise"
qualifier = 1
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_d3l06"]
source = 5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_myes7"]
function = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_247on"]
constant = 3.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_yvglx"]
size = Vector2(620, 200)
expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_v50np"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_1vipu"]
parameter_name = "isGray"
qualifier = 1

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_b75wv"]
parameter_name = "Color"
default_value_enabled = true
default_value = Color(0.575368, 0.573518, 0, 1)

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_rs22v"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ifvs2"]
parameter_name = "Color2"
default_value_enabled = true
default_value = Color(0.470642, 0.389814, 0.0971986, 1)

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 Color : source_color = vec4(0.575368, 0.573518, 0.000000, 1.000000);
uniform vec4 Color2 : source_color = vec4(0.470642, 0.389814, 0.097199, 1.000000);
uniform float Opacity : hint_range(1, 2) = 1;
global uniform float Dither_size;
uniform sampler2D tex_frg_23;
uniform vec4 Isle_color : source_color = vec4(0.575368, 0.573518, 0.000000, 1.000000);
uniform sampler2D tex_frg_29;
uniform vec4 Grid_color : source_color = vec4(0.470642, 0.389814, 0.097199, 1.000000);
uniform vec2 Offset = vec2(0.000000, 0.000000);
uniform vec2 Size = vec2(1000.000000, 1000.000000);
uniform float Ligne_widht = 0.02500000037253;
global uniform bool isGray;



void fragment() {
// ColorParameter:5
	vec4 n_out5p0 = Color;


// ColorParameter:9
	vec4 n_out9p0 = Color2;


// FloatParameter:28
	float n_out28p0 = Opacity;


// FloatParameter:27
	float n_out27p0 = Dither_size;


	float n_out8p0;
// Expression:8
	n_out8p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out27p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out8p0 = n_out28p0 - DITHER_THRESHOLDS[index];
	}


// Texture2D:23
	vec4 n_out23p0 = texture(tex_frg_23, UV);


// Step:10
	float n_out10p0 = step(n_out8p0, n_out23p0.x);


// Mix:25
	vec3 n_out25p0 = mix(vec3(n_out5p0.xyz), vec3(n_out9p0.xyz), vec3(n_out10p0));


// ColorParameter:31
	vec4 n_out31p0 = Isle_color;


// Texture2D:29
	vec4 n_out29p0 = texture(tex_frg_29, UV);


// Mix:33
	float n_in33p0 = 0.00000;
	float n_in33p2 = 0.07000;
	float n_out33p0 = mix(n_in33p0, n_out29p0.x, n_in33p2);


// Mix:32
	vec3 n_out32p0 = mix(n_out25p0, vec3(n_out31p0.xyz), vec3(n_out33p0));


// ColorParameter:21
	vec4 n_out21p0 = Grid_color;


// FloatConstant:18
	float n_out18p0 = 1.300000;


	float n_out19p0;
// Expression:19
	n_out19p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out27p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out19p0 = n_out18p0 - DITHER_THRESHOLDS[index];
	}


// Vector2Parameter:13
	vec2 n_out13p0 = Offset;


// Input:12
	vec2 n_out12p0 = UV;


// Vector2Parameter:14
	vec2 n_out14p0 = Size;


// FloatConstant:15
	float n_out15p0 = 200.000000;


// FloatParameter:16
	float n_out16p0 = Ligne_widht;


	float n_out11p0;
// Expression:11
	n_out11p0 = 0.0;
	{
		vec2 uv = (n_out13p0 / n_out14p0) + n_out12p0;
		vec2 r = mod(n_out14p0 * uv, vec2(n_out15p0));
		vec2 lines = smoothstep(1.0 - n_out16p0, 1, r / vec2(n_out15p0));
		float alpha = dot(lines, vec2(1.0, 1.0));
		n_out11p0 = alpha;
	}


// Step:20
	float n_out20p0 = step(n_out19p0, n_out11p0);


// Mix:24
	vec3 n_out24p0 = mix(n_out32p0, vec3(n_out21p0.xyz), vec3(n_out20p0));


	float n_out38p0;
// Expression:38
	n_out38p0 = 0.0;
	{
		float luminance = 0.299 * n_out24p0.x + 0.587 * n_out24p0.y + 0.114 * n_out24p0.z;
		n_out38p0 = luminance;
	}


// BooleanParameter:41
	bool n_out41p0 = isGray;


// Mix:39
	vec3 n_out39p0 = mix(n_out24p0, vec3(n_out38p0), vec3(n_out41p0 ? 1.0 : 0.0));


// Output:0
	ALBEDO = n_out39p0;


}
"
graph_offset = Vector2(-439.683, -434.537)
flags/unshaded = true
nodes/fragment/5/node = SubResource("VisualShaderNodeColorParameter_b75wv")
nodes/fragment/5/position = Vector2(-3140, -240)
nodes/fragment/8/node = SubResource("VisualShaderNodeExpression_rs22v")
nodes/fragment/8/position = Vector2(-4680, 1580)
nodes/fragment/8/size = Vector2(724.789, 654.559)
nodes/fragment/8/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/8/output_ports = "0,0,Dither_Node;"
nodes/fragment/8/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/9/node = SubResource("VisualShaderNodeColorParameter_ifvs2")
nodes/fragment/9/position = Vector2(-2840, -460)
nodes/fragment/10/node = SubResource("VisualShaderNodeStep_g35gv")
nodes/fragment/10/position = Vector2(-3180, 720)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_86ydh")
nodes/fragment/11/position = Vector2(-1900, 1000)
nodes/fragment/11/size = Vector2(582.979, 472.949)
nodes/fragment/11/input_ports = "0,3,offset;1,3,UV;2,3,size;3,0,grid_size;4,0,line_width;"
nodes/fragment/11/output_ports = "0,0,COLOR;"
nodes/fragment/11/expression = "vec2 uv = (offset / size) + UV;
vec2 r = mod(size * uv, vec2(grid_size));
vec2 lines = smoothstep(1.0 - line_width, 1, r / vec2(grid_size));
float alpha = dot(lines, vec2(1.0, 1.0));
COLOR = alpha;"
nodes/fragment/12/node = SubResource("VisualShaderNodeInput_eooh5")
nodes/fragment/12/position = Vector2(-2420, 1060)
nodes/fragment/13/node = SubResource("VisualShaderNodeVec2Parameter_x22b7")
nodes/fragment/13/position = Vector2(-2360, 780)
nodes/fragment/14/node = SubResource("VisualShaderNodeVec2Parameter_5oitx")
nodes/fragment/14/position = Vector2(-2500, 1200)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatConstant_ylh4o")
nodes/fragment/15/position = Vector2(-2220, 1280)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatParameter_34pw2")
nodes/fragment/16/position = Vector2(-2300, 1460)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatConstant_m1hb7")
nodes/fragment/17/position = Vector2(-1060, 1280)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatConstant_47gm1")
nodes/fragment/18/position = Vector2(-1060, 1140)
nodes/fragment/19/node = SubResource("VisualShaderNodeExpression_ymidu")
nodes/fragment/19/position = Vector2(-760, 1260)
nodes/fragment/19/size = Vector2(724.789, 654.559)
nodes/fragment/19/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/19/output_ports = "0,0,Dither_Node;"
nodes/fragment/19/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/20/node = SubResource("VisualShaderNodeStep_wpsel")
nodes/fragment/20/position = Vector2(-920, 720)
nodes/fragment/21/node = SubResource("VisualShaderNodeColorParameter_rg8ws")
nodes/fragment/21/position = Vector2(-1080, 260)
nodes/fragment/23/node = SubResource("VisualShaderNodeTexture_o0kew")
nodes/fragment/23/position = Vector2(-3800, 600)
nodes/fragment/24/node = SubResource("VisualShaderNodeMix_8in3j")
nodes/fragment/24/position = Vector2(-600, 540)
nodes/fragment/25/node = SubResource("VisualShaderNodeMix_dv0kw")
nodes/fragment/25/position = Vector2(-1860, 0)
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatParameter_q2q1n")
nodes/fragment/27/position = Vector2(-5200, 2200)
nodes/fragment/28/node = SubResource("VisualShaderNodeFloatParameter_6akoj")
nodes/fragment/28/position = Vector2(-5100, 1620)
nodes/fragment/29/node = SubResource("VisualShaderNodeTexture_mrum1")
nodes/fragment/29/position = Vector2(-4580, 780)
nodes/fragment/30/node = SubResource("VisualShaderNodeStep_27421")
nodes/fragment/30/position = Vector2(-3120, 940)
nodes/fragment/31/node = SubResource("VisualShaderNodeColorParameter_wwjdk")
nodes/fragment/31/position = Vector2(-2998.04, 68.1573)
nodes/fragment/32/node = SubResource("VisualShaderNodeMix_2jpii")
nodes/fragment/32/position = Vector2(-1700, 420)
nodes/fragment/33/node = SubResource("VisualShaderNodeMix_vf3t8")
nodes/fragment/33/position = Vector2(-4140, 840)
nodes/fragment/34/node = SubResource("VisualShaderNodeTexture2DParameter_tylat")
nodes/fragment/34/position = Vector2(-4900, 1160)
nodes/fragment/35/node = SubResource("VisualShaderNodeTexture_d3l06")
nodes/fragment/35/position = Vector2(-4000, 1160)
nodes/fragment/36/node = SubResource("VisualShaderNodeUVFunc_myes7")
nodes/fragment/36/position = Vector2(-4391.08, 1140.61)
nodes/fragment/37/node = SubResource("VisualShaderNodeFloatConstant_247on")
nodes/fragment/37/position = Vector2(-4620, 1100)
nodes/fragment/38/node = SubResource("VisualShaderNodeExpression_yvglx")
nodes/fragment/38/position = Vector2(-480.491, -647.303)
nodes/fragment/38/size = Vector2(620, 200)
nodes/fragment/38/input_ports = "0,4,color;"
nodes/fragment/38/output_ports = "0,0,grey_value;"
nodes/fragment/38/expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"
nodes/fragment/39/node = SubResource("VisualShaderNodeMix_v50np")
nodes/fragment/39/position = Vector2(219.509, -367.303)
nodes/fragment/41/node = SubResource("VisualShaderNodeBooleanParameter_1vipu")
nodes/fragment/41/position = Vector2(-340, -240)
nodes/fragment/connections = PackedInt32Array(12, 0, 11, 1, 15, 0, 11, 3, 13, 0, 11, 0, 14, 0, 11, 2, 16, 0, 11, 4, 18, 0, 19, 0, 11, 0, 20, 1, 19, 0, 20, 0, 20, 0, 24, 2, 27, 0, 8, 1, 27, 0, 19, 1, 5, 0, 25, 0, 9, 0, 25, 1, 28, 0, 8, 0, 10, 0, 25, 2, 8, 0, 10, 0, 23, 0, 10, 1, 25, 0, 32, 0, 32, 0, 24, 0, 31, 0, 32, 1, 33, 0, 30, 1, 29, 0, 33, 1, 34, 0, 35, 2, 35, 0, 30, 0, 36, 0, 35, 0, 37, 0, 36, 1, 33, 0, 32, 2, 21, 0, 24, 1, 38, 0, 39, 1, 24, 0, 38, 0, 39, 0, 0, 0, 24, 0, 39, 0, 41, 0, 39, 2)
nodes/light/0/position = Vector2(2920, 40)
