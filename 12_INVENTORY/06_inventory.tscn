[gd_scene load_steps=178 format=3 uid="uid://dmg5brvcww8lq"]

[ext_resource type="Script" path="res://12_INVENTORY/Change_cursor.gd" id="1_8ci41"]
[ext_resource type="PackedScene" uid="uid://dyfif7fbf51gx" path="res://12_INVENTORY/Book/Book_prefab.tscn" id="1_mrfq4"]
[ext_resource type="PackedScene" uid="uid://dr7pcue70x0dt" path="res://10_BOARD/Behaviour/Photo_square_prefabs.tscn" id="2_3xfr3"]
[ext_resource type="Texture2D" uid="uid://kaln43e5c5my" path="res://10_BOARD/Map/Map_board_test.png" id="3_5pa05"]
[ext_resource type="Script" path="res://10_BOARD/Behaviour/Movable_paper.tres.gd" id="3_yssyu"]
[ext_resource type="Script" path="res://10_BOARD/Behaviour/Apply_pos_anim.gd" id="4_ueoox"]
[ext_resource type="PackedScene" uid="uid://by7rfopxdjwq" path="res://12_INVENTORY/coins_r.tscn" id="5_6qspm"]
[ext_resource type="PackedScene" uid="uid://bba4phbllf3f8" path="res://12_INVENTORY/coins.tscn" id="6_iwb8l"]
[ext_resource type="PackedScene" uid="uid://clc3sbquuu1us" path="res://12_INVENTORY/Clock_montre/Clock_oxygene_prefab.tscn" id="7_ci51x"]

[sub_resource type="GDScript" id="GDScript_mh7vf"]
script/source = "extends Node

@onready var control = $Control
@onready var bougie_zone = $Control/Bougie_zone/Bougie/light_flare
@onready var board = $Control/Board

func _ready():
	pass

	#_global_datas._open_dialogue.connect(_hide)
	#_global_datas._close_dialogue.connect(_show)
	#_global_datas._active_sonar.connect(_hide)
	#_global_datas._disable_sonar.connect(_show)
	#_global_datas._go_Subscene.connect(_hide)
	
func _hide_2d_enventory():
	control.visible = false
	
func _show_2d_enventory():
	control.visible = true


func _hide():

	board.visible = false
func _show():
	
	if _global_datas.Player_InSubScene:
		return

	board.visible = true
"

[sub_resource type="GDScript" id="GDScript_qiikw"]
script/source = "extends Node

@onready var coins_prefab = preload(\"res://12_INVENTORY/coins.tscn\")
@onready var coins_group = $\"../Control/Coins_group\"

@onready var instance_pos = $\"../Control/Coins_group/instance_pos\"


func _ready():
	_global_datas._find_coins.connect(_intance_coins)	
	

func _intance_coins():
	
	print(\"INSTANCE COINS\")
	var new_node = coins_prefab.instantiate()
	coins_group.add_child(new_node)
	
	var screen_position = get_viewport().get_camera_3d().unproject_position(_global_datas._forreuse_impact_origin)
	
	var random_angle = randf_range(-6.0, 6.0)
	new_node.rotation_degrees = random_angle
	new_node.position = screen_position
	new_node.get_node(\"Push\")._push()
"

[sub_resource type="GDScript" id="GDScript_om7tc"]
script/source = "extends Node

@onready var photo_prefab = preload(\"res://10_BOARD/Behaviour/Photo_square_prefabs.tscn\")
@onready var photo_group = $\"../Control/Photo_group\"


func _ready():
	_global_datas._take_photo.connect(_intance_photo)	
	
func _intance_photo():
	print(\"INSTANCE PHOTO\")
	var new_node = photo_prefab.instantiate()
	photo_group.add_child(new_node)
	
	var screen_center = Vector2(1920.0 / 2.0, 1080.0/ 2.0)
	var random_angle = randf_range(-6.0, 6.0)
	new_node.rotation_degrees = random_angle
	new_node.position = screen_center
	
"

[sub_resource type="GDScript" id="GDScript_wd62i"]
script/source = "extends Node

@onready var words_note_prefab = preload(\"res://12_INVENTORY/Words_note/note_words_prefab.tscn\")
@onready var words_note = $\"../Control/Words_note\"




func _ready():
	_global_datas.instance_word_text = self
	
func _intance_words_note(value : String, name_words : String):
	
	print(\"INSTANCE NOTE\")
	var new_node = words_note_prefab.instantiate()
	words_note.add_child(new_node)
	
	var screen_center = Vector2(1920.0 / 2.0, 1080/ 2.0 + 250.0)
	var random_angle = randf_range(-6.0, 6.0)
	new_node.rotation_degrees = random_angle
	new_node.position = screen_center
	# change text
	var text : Label = new_node.get_node(\"text\")
	text.text = \"'\"+value+\"'\"
	# change owner ,ame text
	var text_name : Label = text.get_node(\"name\")
	text_name.text = name_words
"

[sub_resource type="GDScript" id="GDScript_3n8kc"]
script/source = "extends Node

@onready var backdrop = $\"../Control/Backdrop\"
@onready var timer = $Timer
@onready var material : Material = backdrop.get_material()
@onready var timer_out = $Timer_out


func _ready():
	
	backdrop.visible = false

	_global_datas.using_board_enable.connect(_enable_board_backdrop)
	_global_datas.using_board_disable.connect(_disable_board_backdrop)

func _enable_board_backdrop():
	backdrop.visible = true

	timer.start()	
	
func _disable_board_backdrop():
	backdrop.visible = false
	timer.stop()

	
func _process(delta):
	
	
	if !timer.is_stopped():
		var lerp_time = lerp(0.5,0.0, timer.time_left / timer.wait_time)	
		material.set_shader_parameter(\"Opacity\",lerp_time)	
	

func _on_timer_timeout():
	timer.stop()



"

[sub_resource type="GDScript" id="GDScript_xw7ed"]
script/source = "extends Node

@export var active_teleport = false		
func _input(event):

	if !active_teleport:
		return
		
	if Input.is_action_just_pressed(\"Click\"):
		
		_global_datas.get_raycastPosition.emit()
		var mouse_pos = _global_datas.mouseRaycastPosition
		var mouse_pos3D = Vector3(mouse_pos.x,mouse_pos.y,0.0)
		_global_datas._teleport_position.emit(mouse_pos3D)
		print(\"TELEPORT\")
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_icff5"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_w18uv"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_1irwe"]
source = 5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_j84ll"]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_d78hh"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_w1om8"]
constant = 1.0

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_7fg63"]
default_input_values = [0, 0.0, 1, 1.0, 2, 0.065]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ue53i"]
input_name = "color"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_u4ehj"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_cxkkj"]
constant = 1.121

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_dl6u5"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_qgp8h"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_aqiiq"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_7fgls"]
constant = Color(0.0238592, 0.144913, 0.160659, 1)

[sub_resource type="VisualShader" id="VisualShader_w5ow2"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


// ColorConstant:8
	vec4 n_out8p0 = vec4(0.023859, 0.144913, 0.160659, 1.000000);


// FloatConstant:4
	float n_out4p0 = 1.121000;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out5p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Mix:16
	float n_in16p1 = 1.00000;
	float n_in16p2 = 0.06500;
	float n_out16p0 = mix(n_out5p0, n_in16p1, n_in16p2);


// Step:6
	float n_out6p0 = step(n_out2p0.x, n_out16p0);


// Mix:7
	vec3 n_out7p0 = mix(vec3(n_out2p0.xyz), vec3(n_out8p0.xyz), vec3(n_out6p0));


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-1174.96, 582.119)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1020, 180)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_ue53i")
nodes/fragment/2/position = Vector2(-360, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_u4ehj")
nodes/fragment/3/position = Vector2(-1300, 880)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_cxkkj")
nodes/fragment/4/position = Vector2(-1300, 740)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_dl6u5")
nodes/fragment/5/position = Vector2(-1000, 860)
nodes/fragment/5/size = Vector2(724.789, 654.559)
nodes/fragment/5/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/5/output_ports = "0,0,Dither_Node;"
nodes/fragment/5/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_qgp8h")
nodes/fragment/6/position = Vector2(220, 560)
nodes/fragment/7/node = SubResource("VisualShaderNodeMix_aqiiq")
nodes/fragment/7/position = Vector2(680, 180)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_7fgls")
nodes/fragment/8/position = Vector2(60, 40)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture2DParameter_w18uv")
nodes/fragment/11/position = Vector2(-20, 1260)
nodes/fragment/12/node = SubResource("VisualShaderNodeTexture_1irwe")
nodes/fragment/12/position = Vector2(600, 1080)
nodes/fragment/13/node = SubResource("VisualShaderNodeUVFunc_j84ll")
nodes/fragment/13/position = Vector2(160, 1020)
nodes/fragment/14/node = SubResource("VisualShaderNodeInput_d78hh")
nodes/fragment/14/position = Vector2(-180, 900)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatConstant_w1om8")
nodes/fragment/15/position = Vector2(-120, 1060)
nodes/fragment/16/node = SubResource("VisualShaderNodeMix_7fg63")
nodes/fragment/16/position = Vector2(514.01, 768.594)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 1, 4, 0, 5, 0, 2, 0, 6, 0, 2, 0, 7, 0, 6, 0, 7, 2, 8, 0, 7, 1, 13, 0, 12, 0, 11, 0, 12, 2, 14, 0, 13, 0, 15, 0, 13, 1, 16, 0, 6, 1, 5, 0, 16, 0, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_41fye"]
shader = SubResource("VisualShader_w5ow2")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_vy3uy"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_wrakf"]
constant = 1.3

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yf2cc"]
input_name = "texture"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_rcux5"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ynjn2"]
parameter_name = "Color2"
default_value_enabled = true
default_value = Color(0.470642, 0.389814, 0.0971986, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_6gs4j"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_eg6mi"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_8h7o3"]
size = Vector2(582.979, 472.949)
expression = "vec2 uv = (offset / size) + UV;
vec2 r = mod(size * uv, vec2(grid_size));
vec2 lines = smoothstep(1.0 - line_width, 1, r / vec2(grid_size));
float alpha = dot(lines, vec2(1.0, 1.0));
COLOR = alpha;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_e4ymr"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_44tuy"]
parameter_name = "Offset"
default_value_enabled = true

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_7cgvi"]
parameter_name = "Size"
default_value_enabled = true
default_value = Vector2(1000, 1000)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_n3egp"]
constant = 200.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_k6ony"]
parameter_name = "Ligne_widht"
default_value_enabled = true
default_value = 0.025

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_fwdul"]
source = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_d7vb0"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_xqvny"]
constant = 1.3

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_xeqnp"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ypj7o"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_bhpx4"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_q6qdc"]
parameter_name = "Grid_color"
default_value_enabled = true
default_value = Color(0.470642, 0.389814, 0.0971986, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_xbs7r"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_87uec"]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_s1ver"]
input_name = "texture"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_oedot"]
function = 31

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_bcn8x"]
parameter_name = "Subscene_Darker_color"
qualifier = 1

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_5osmr"]
parameter_name = "ColorParameter"

[sub_resource type="VisualShader" id="VisualShader_qrx8b"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 ColorParameter : source_color;
uniform vec4 Color2 : source_color = vec4(0.470642, 0.389814, 0.097199, 1.000000);
uniform vec4 Grid_color : source_color = vec4(0.470642, 0.389814, 0.097199, 1.000000);
uniform vec2 Offset = vec2(0.000000, 0.000000);
uniform vec2 Size = vec2(1000.000000, 1000.000000);
uniform float Ligne_widht = 0.02500000037253;



void fragment() {
// ColorParameter:40
	vec4 n_out40p0 = ColorParameter;


// ColorParameter:21
	vec4 n_out21p0 = Color2;


// FloatConstant:19
	float n_out19p0 = 1.300000;


// FloatConstant:18
	float n_out18p0 = 0.400000;


	float n_out20p0;
// Expression:20
	n_out20p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out18p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out20p0 = n_out19p0 - DITHER_THRESHOLDS[index];
	}


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);


// Step:23
	float n_out23p0 = step(n_out20p0, n_out3p0.x);


// Mix:22
	vec3 n_in22p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out22p0 = mix(n_in22p0, vec3(n_out21p0.xyz), vec3(n_out23p0));


// ColorParameter:35
	vec4 n_out35p0 = Grid_color;


// FloatConstant:31
	float n_out31p0 = 1.300000;


// FloatConstant:30
	float n_out30p0 = 0.400000;


	float n_out32p0;
// Expression:32
	n_out32p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out30p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out32p0 = n_out31p0 - DITHER_THRESHOLDS[index];
	}


// Vector2Parameter:26
	vec2 n_out26p0 = Offset;


// Input:25
	vec2 n_out25p0 = UV;


// Vector2Parameter:27
	vec2 n_out27p0 = Size;


// FloatConstant:28
	float n_out28p0 = 200.000000;


// FloatParameter:29
	float n_out29p0 = Ligne_widht;


	float n_out24p0;
// Expression:24
	n_out24p0 = 0.0;
	{
		vec2 uv = (n_out26p0 / n_out27p0) + n_out25p0;
		vec2 r = mod(n_out27p0 * uv, vec2(n_out28p0));
		vec2 lines = smoothstep(1.0 - n_out29p0, 1, r / vec2(n_out28p0));
		float alpha = dot(lines, vec2(1.0, 1.0));
		n_out24p0 = alpha;
	}


// Step:33
	float n_out33p0 = step(n_out32p0, n_out24p0);


// Mix:34
	vec3 n_out34p0 = mix(n_out22p0, vec3(n_out35p0.xyz), vec3(n_out33p0));


// Mix:36
	vec3 n_in36p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out36p0 = mix(vec3(n_out40p0.xyz), n_out34p0, n_in36p2);


// Output:0
	COLOR.rgb = n_out36p0;


}
"
graph_offset = Vector2(-2112.19, 76.5855)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_yf2cc")
nodes/fragment/2/position = Vector2(-4340, 420)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_fwdul")
nodes/fragment/3/position = Vector2(-4040, 360)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorParameter_bcn8x")
nodes/fragment/4/position = Vector2(-1100, -60)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatConstant_vy3uy")
nodes/fragment/18/position = Vector2(-4480, 740)
nodes/fragment/19/node = SubResource("VisualShaderNodeFloatConstant_wrakf")
nodes/fragment/19/position = Vector2(-4480, 600)
nodes/fragment/20/node = SubResource("VisualShaderNodeExpression_rcux5")
nodes/fragment/20/position = Vector2(-4180, 720)
nodes/fragment/20/size = Vector2(724.789, 654.559)
nodes/fragment/20/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/20/output_ports = "0,0,Dither_Node;"
nodes/fragment/20/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/21/node = SubResource("VisualShaderNodeColorParameter_ynjn2")
nodes/fragment/21/position = Vector2(-3140, -360)
nodes/fragment/22/node = SubResource("VisualShaderNodeMix_6gs4j")
nodes/fragment/22/position = Vector2(-2160, 100)
nodes/fragment/23/node = SubResource("VisualShaderNodeStep_eg6mi")
nodes/fragment/23/position = Vector2(-3660, 420)
nodes/fragment/24/node = SubResource("VisualShaderNodeExpression_8h7o3")
nodes/fragment/24/position = Vector2(-2420, 700)
nodes/fragment/24/size = Vector2(582.979, 472.949)
nodes/fragment/24/input_ports = "0,3,offset;1,3,UV;2,3,size;3,0,grid_size;4,0,line_width;"
nodes/fragment/24/output_ports = "0,0,COLOR;"
nodes/fragment/24/expression = "vec2 uv = (offset / size) + UV;
vec2 r = mod(size * uv, vec2(grid_size));
vec2 lines = smoothstep(1.0 - line_width, 1, r / vec2(grid_size));
float alpha = dot(lines, vec2(1.0, 1.0));
COLOR = alpha;"
nodes/fragment/25/node = SubResource("VisualShaderNodeInput_e4ymr")
nodes/fragment/25/position = Vector2(-2940, 760)
nodes/fragment/26/node = SubResource("VisualShaderNodeVec2Parameter_44tuy")
nodes/fragment/26/position = Vector2(-2980, 560)
nodes/fragment/27/node = SubResource("VisualShaderNodeVec2Parameter_7cgvi")
nodes/fragment/27/position = Vector2(-3020, 900)
nodes/fragment/28/node = SubResource("VisualShaderNodeFloatConstant_n3egp")
nodes/fragment/28/position = Vector2(-2740, 980)
nodes/fragment/29/node = SubResource("VisualShaderNodeFloatParameter_k6ony")
nodes/fragment/29/position = Vector2(-2820, 1160)
nodes/fragment/30/node = SubResource("VisualShaderNodeFloatConstant_d7vb0")
nodes/fragment/30/position = Vector2(-1580, 980)
nodes/fragment/31/node = SubResource("VisualShaderNodeFloatConstant_xqvny")
nodes/fragment/31/position = Vector2(-1580, 840)
nodes/fragment/32/node = SubResource("VisualShaderNodeExpression_xeqnp")
nodes/fragment/32/position = Vector2(-1280, 960)
nodes/fragment/32/size = Vector2(724.789, 654.559)
nodes/fragment/32/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/32/output_ports = "0,0,Dither_Node;"
nodes/fragment/32/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/33/node = SubResource("VisualShaderNodeStep_ypj7o")
nodes/fragment/33/position = Vector2(-1440, 420)
nodes/fragment/34/node = SubResource("VisualShaderNodeMix_bhpx4")
nodes/fragment/34/position = Vector2(-1120, 220)
nodes/fragment/35/node = SubResource("VisualShaderNodeColorParameter_q6qdc")
nodes/fragment/35/position = Vector2(-1740, 260)
nodes/fragment/36/node = SubResource("VisualShaderNodeMix_xbs7r")
nodes/fragment/36/position = Vector2(-438.285, 52.1627)
nodes/fragment/37/node = SubResource("VisualShaderNodeTexture_87uec")
nodes/fragment/37/position = Vector2(-820, -300)
nodes/fragment/38/node = SubResource("VisualShaderNodeInput_s1ver")
nodes/fragment/38/position = Vector2(-1120, -240)
nodes/fragment/39/node = SubResource("VisualShaderNodeFloatFunc_oedot")
nodes/fragment/39/position = Vector2(-426.818, -172.097)
nodes/fragment/40/node = SubResource("VisualShaderNodeColorParameter_5osmr")
nodes/fragment/40/position = Vector2(-840, -80)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 2, 18, 0, 20, 1, 19, 0, 20, 0, 20, 0, 23, 0, 25, 0, 24, 1, 28, 0, 24, 3, 26, 0, 24, 0, 27, 0, 24, 2, 29, 0, 24, 4, 30, 0, 32, 1, 31, 0, 32, 0, 32, 0, 33, 0, 35, 0, 34, 1, 22, 0, 34, 0, 3, 0, 23, 1, 38, 0, 37, 2, 37, 0, 39, 0, 36, 0, 0, 0, 34, 0, 36, 1, 23, 0, 22, 2, 21, 0, 22, 1, 33, 0, 34, 2, 24, 0, 33, 1, 40, 0, 36, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lf4bd"]
shader = SubResource("VisualShader_qrx8b")
shader_parameter/ColorParameter = Color(0.0666667, 0.258824, 0.286275, 1)
shader_parameter/Color2 = Color(0.721569, 0.792157, 0.8, 1)
shader_parameter/Grid_color = Color(0.517647, 0.607843, 0.619608, 1)
shader_parameter/Offset = Vector2(0, 0)
shader_parameter/Size = Vector2(2000, 2000)
shader_parameter/Ligne_widht = 0.03

[sub_resource type="GDScript" id="GDScript_y5o0k"]
script/source = "extends Node

signal  move_behind


func _move_behind():
	move_behind.emit()
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_epdke"]
size = Vector2(563.416, 817)

[sub_resource type="GDScript" id="GDScript_xyojo"]
script/source = "extends Node

@onready var light_flare = $\"../light_flare\"
@onready var light_f = $\"../Light_F\"
@onready var light_b = $\"../Light_b\"


func _ready():
	_global_datas._go_Subscene.connect(_disable_bougie)
	_global_datas._go_Mainscene.connect(_active_bougie)
	
	
func _active_bougie():
	light_flare.visible = true
	light_f.visible = true
	light_b.visible = true
func _disable_bougie():
	light_flare.visible = false
	light_f.visible = false
	light_b.visible = false
"

[sub_resource type="GDScript" id="GDScript_c27os"]
script/source = "extends Node




func _on_area_2d_area_shape_entered(area_rid, area, area_shape_index, local_shape_index):
	if area.get_node_or_null(\"I_Burn\") == null:
		return
	var i_burn = area.get_node(\"I_Burn\")
	
	
	i_burn._in_zone()
	

func _on_area_2d_area_shape_exited(area_rid, area, area_shape_index, local_shape_index):
	if !_global_datas.Player_lock_click:
		return
	if area.get_node_or_null(\"I_Burn\") == null:
		return
	var i_burn = area.get_node(\"I_Burn\")	
	i_burn._out_zone()



"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_0fbvr"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_a3pvp"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_mnk67"]
input_name = "color"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_56kj4"]
default_input_values = [0, 0.0, 1, 1.0, 2, 0.31]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_xnyqf"]
parameter_name = "Intensity"
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_vgofo"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_y5wre"]
default_input_values = [0, 0.0, 1, 25.0]
operator = 2

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_18eog"]
function = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ag54u"]
default_input_values = [0, 0.0, 1, 25.0]
operator = 2

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_c5ups"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1.025]

[sub_resource type="VisualShaderNodeRandomRange" id="VisualShaderNodeRandomRange_84u5y"]
default_input_values = [0, Vector3(1, 1, 1), 1, 10.0, 2, 25.0]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_i6gf7"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_kgoag"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_86fqp"]
input_name = "texture"

[sub_resource type="VisualShader" id="VisualShader_g3ehj"]
code = "shader_type canvas_item;
render_mode blend_add;

uniform float Intensity = 0.5;




// 3D Noise with friendly permission by Inigo Quilez
vec3 hash_noise_range( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
}


void fragment() {
// Input:15
	vec4 n_out15p0 = COLOR;


// Input:18
	float n_out18p0 = TIME;


// RandomRange:23
	vec3 n_in23p0 = vec3(1.00000, 1.00000, 1.00000);
	float n_in23p1 = 10.00000;
	float n_in23p2 = 25.00000;
	float n_out23p0 = mix(n_in23p1, n_in23p2, hash_noise_range(n_in23p0).x);


// FloatOp:19
	float n_out19p0 = n_out18p0 * n_out23p0;


// FloatFunc:20
	float n_out20p0 = sin(n_out19p0);


// FloatOp:21
	float n_in21p1 = 25.00000;
	float n_out21p0 = n_out20p0 * n_in21p1;


// Clamp:22
	float n_in22p1 = 1.00000;
	float n_in22p2 = 1.02500;
	float n_out22p0 = clamp(n_out21p0, n_in22p1, n_in22p2);


// FloatConstant:6
	float n_out6p0 = 0.400000;


	float n_out8p0;
// Expression:8
	n_out8p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out6p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out8p0 = n_out22p0 - DITHER_THRESHOLDS[index];
	}


	vec4 n_out10p0;
// Texture2D:10
	n_out10p0 = texture(TEXTURE, UV);


// Step:14
	float n_out14p0 = step(n_out8p0, n_out10p0.x);


// FloatParameter:17
	float n_out17p0 = Intensity;


// Mix:16
	float n_in16p0 = 0.00000;
	float n_out16p0 = mix(n_in16p0, n_out14p0, n_out17p0);


// Output:0
	COLOR.rgb = vec3(n_out15p0.xyz);
	COLOR.a = n_out16p0;


}
"
mode = 1
modes/blend = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 80)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatConstant_i6gf7")
nodes/fragment/6/position = Vector2(-2400, 680)
nodes/fragment/8/node = SubResource("VisualShaderNodeExpression_kgoag")
nodes/fragment/8/position = Vector2(-2140, 440)
nodes/fragment/8/size = Vector2(724.789, 654.559)
nodes/fragment/8/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/8/output_ports = "0,0,Dither_Node;"
nodes/fragment/8/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/9/node = SubResource("VisualShaderNodeInput_86fqp")
nodes/fragment/9/position = Vector2(-1320, 40)
nodes/fragment/10/node = SubResource("VisualShaderNodeTexture_0fbvr")
nodes/fragment/10/position = Vector2(-960, -40)
nodes/fragment/14/node = SubResource("VisualShaderNodeStep_a3pvp")
nodes/fragment/14/position = Vector2(60, 80)
nodes/fragment/15/node = SubResource("VisualShaderNodeInput_mnk67")
nodes/fragment/15/position = Vector2(-729.078, -335.456)
nodes/fragment/16/node = SubResource("VisualShaderNodeMix_56kj4")
nodes/fragment/16/position = Vector2(260, 240)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_xnyqf")
nodes/fragment/17/position = Vector2(-220, 300)
nodes/fragment/18/node = SubResource("VisualShaderNodeInput_vgofo")
nodes/fragment/18/position = Vector2(-3480, 340)
nodes/fragment/19/node = SubResource("VisualShaderNodeFloatOp_y5wre")
nodes/fragment/19/position = Vector2(-3040, 280)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatFunc_18eog")
nodes/fragment/20/position = Vector2(-2900, 480)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatOp_ag54u")
nodes/fragment/21/position = Vector2(-2720, 600)
nodes/fragment/22/node = SubResource("VisualShaderNodeClamp_c5ups")
nodes/fragment/22/position = Vector2(-2460, 440)
nodes/fragment/23/node = SubResource("VisualShaderNodeRandomRange_84u5y")
nodes/fragment/23/position = Vector2(-3220, 500)
nodes/fragment/connections = PackedInt32Array(6, 0, 8, 1, 9, 0, 10, 2, 10, 0, 14, 1, 8, 0, 14, 0, 15, 0, 0, 0, 16, 0, 0, 1, 14, 0, 16, 1, 17, 0, 16, 2, 18, 0, 19, 0, 19, 0, 20, 0, 22, 0, 8, 0, 20, 0, 21, 0, 21, 0, 22, 0, 23, 0, 19, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_iywle"]
shader = SubResource("VisualShader_g3ehj")
shader_parameter/Intensity = 0.59

[sub_resource type="Gradient" id="Gradient_g2eju"]
interpolation_mode = 2
offsets = PackedFloat32Array(0.145963, 0.493789, 0.833333)
colors = PackedColorArray(0, 0, 0, 0, 0.431373, 0.321569, 0.129412, 1, 0, 0, 0, 0)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_ltt6a"]
gradient = SubResource("Gradient_g2eju")
width = 512
height = 512
fill = 1
fill_from = Vector2(0.5, 0.5)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_jgvvv"]
input_name = "color"

[sub_resource type="Gradient" id="Gradient_wu3n3"]
offsets = PackedFloat32Array(0, 0.528875, 0.547112, 0.984802)
colors = PackedColorArray(1, 1, 1, 1, 0.0102558, 0.0102558, 0.0102558, 1, 0.0243161, 0.0243161, 0.0243161, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_2xai1"]
gradient = SubResource("Gradient_wu3n3")
fill_from = Vector2(0, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_a0tbq"]
source = 5
texture = SubResource("GradientTexture2D_2xai1")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_cdm5u"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ypf05"]
constant = 0.826

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_1bmkn"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_32tbt"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7eewe"]
input_name = "uv"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_lm1bn"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ug46v"]
constant = 0.1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_21did"]
parameter_name = "Gradiant"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_psm58"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_x5mon"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_5qa2i"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_u68rx"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_xcs0n"]
function = 31

[sub_resource type="VisualShader" id="VisualShader_85gqb"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Gradiant;



void fragment() {
// Input:10
	vec4 n_out10p0 = COLOR;


// Input:16
	vec2 n_out16p0 = UV;


	vec4 n_out11p0;
// Texture2D:11
	n_out11p0 = texture(Gradiant, n_out16p0);


// FloatConstant:13
	float n_out13p0 = 0.826000;


// FloatConstant:12
	float n_out12p0 = 0.400000;


	float n_out14p0;
// Expression:14
	n_out14p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out12p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out14p0 = n_out13p0 - DITHER_THRESHOLDS[index];
	}


// Step:15
	float n_out15p0 = step(n_out11p0.x, n_out14p0);


// FloatConstant:18
	float n_out18p0 = 0.100000;


// Mix:17
	vec3 n_out17p0 = mix(vec3(n_out10p0.xyz), vec3(n_out15p0), vec3(n_out18p0));


// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:7
	float n_out7p0 = 0.500000;


// FloatConstant:8
	float n_out8p0 = 0.000000;


	vec4 n_out5p0;
// Expression:5
	n_out5p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out6p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out7p0,n_out7p0 + n_out8p0,d);
		n_out5p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:9
	float n_out9p0 = 1.0 - n_out5p0.x;


// Output:0
	COLOR.rgb = n_out17p0;
	COLOR.a = n_out9p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_psm58")
nodes/fragment/5/position = Vector2(-760, 560)
nodes/fragment/5/size = Vector2(513.781, 284.487)
nodes/fragment/5/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/5/output_ports = "0,5,color;"
nodes/fragment/5/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_x5mon")
nodes/fragment/6/position = Vector2(-1160, 500)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_5qa2i")
nodes/fragment/7/position = Vector2(-1040, 660)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatConstant_u68rx")
nodes/fragment/8/position = Vector2(-960, 760)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatFunc_xcs0n")
nodes/fragment/9/position = Vector2(-23.3431, 308.463)
nodes/fragment/10/node = SubResource("VisualShaderNodeInput_jgvvv")
nodes/fragment/10/position = Vector2(-600, -80)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture_a0tbq")
nodes/fragment/11/position = Vector2(-1360, -680)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_cdm5u")
nodes/fragment/12/position = Vector2(-2860, -320)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_ypf05")
nodes/fragment/13/position = Vector2(-2860, -460)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_1bmkn")
nodes/fragment/14/position = Vector2(-2540, -240)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_32tbt")
nodes/fragment/15/position = Vector2(-1100, 100)
nodes/fragment/16/node = SubResource("VisualShaderNodeInput_7eewe")
nodes/fragment/16/position = Vector2(-1940, -920)
nodes/fragment/17/node = SubResource("VisualShaderNodeMix_lm1bn")
nodes/fragment/17/position = Vector2(-80, -80)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatConstant_ug46v")
nodes/fragment/18/position = Vector2(-620, 260)
nodes/fragment/19/node = SubResource("VisualShaderNodeTexture2DParameter_21did")
nodes/fragment/19/position = Vector2(-1900, -720)
nodes/fragment/connections = PackedInt32Array(6, 0, 5, 0, 7, 0, 5, 1, 8, 0, 5, 2, 5, 0, 9, 0, 9, 0, 0, 1, 12, 0, 14, 1, 13, 0, 14, 0, 14, 0, 15, 1, 18, 0, 17, 2, 16, 0, 11, 0, 19, 0, 11, 2, 10, 0, 17, 0, 15, 0, 17, 1, 17, 0, 0, 0, 11, 0, 15, 0)

[sub_resource type="Gradient" id="Gradient_c7vvi"]
offsets = PackedFloat32Array(0, 0.570397, 1)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_l8kj1"]
gradient = SubResource("Gradient_c7vvi")
fill_to = Vector2(1, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5tl7k"]
shader = SubResource("VisualShader_85gqb")
shader_parameter/Gradiant = SubResource("GradientTexture2D_l8kj1")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3svhc"]
input_name = "color"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_lk8gi"]
source = 5
texture = SubResource("GradientTexture2D_2xai1")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_10t2q"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_w73ua"]
constant = 0.826

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_kdnq2"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_flf0d"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_r7fo4"]
input_name = "uv"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_lbu2a"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_1f3bt"]
constant = 0.1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_xlayd"]
parameter_name = "Gradiant"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_doon2"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_jkp40"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_c4bjg"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_7lma2"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_lvab6"]
function = 31

[sub_resource type="VisualShader" id="VisualShader_4oagh"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Gradiant;



void fragment() {
// Input:10
	vec4 n_out10p0 = COLOR;


// Input:16
	vec2 n_out16p0 = UV;


	vec4 n_out11p0;
// Texture2D:11
	n_out11p0 = texture(Gradiant, n_out16p0);


// FloatConstant:13
	float n_out13p0 = 0.826000;


// FloatConstant:12
	float n_out12p0 = 0.400000;


	float n_out14p0;
// Expression:14
	n_out14p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out12p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out14p0 = n_out13p0 - DITHER_THRESHOLDS[index];
	}


// Step:15
	float n_out15p0 = step(n_out11p0.x, n_out14p0);


// FloatConstant:18
	float n_out18p0 = 0.100000;


// Mix:17
	vec3 n_out17p0 = mix(vec3(n_out10p0.xyz), vec3(n_out15p0), vec3(n_out18p0));


// Output:0
	COLOR.rgb = n_out17p0;


}
"
graph_offset = Vector2(-227.297, 112.311)
mode = 1
flags/light_only = false
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_doon2")
nodes/fragment/5/position = Vector2(-760, 560)
nodes/fragment/5/size = Vector2(513.781, 284.487)
nodes/fragment/5/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/5/output_ports = "0,5,color;"
nodes/fragment/5/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_jkp40")
nodes/fragment/6/position = Vector2(-1160, 500)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_c4bjg")
nodes/fragment/7/position = Vector2(-1040, 660)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatConstant_7lma2")
nodes/fragment/8/position = Vector2(-960, 760)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatFunc_lvab6")
nodes/fragment/9/position = Vector2(-23.3431, 308.463)
nodes/fragment/10/node = SubResource("VisualShaderNodeInput_3svhc")
nodes/fragment/10/position = Vector2(-600, -80)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture_lk8gi")
nodes/fragment/11/position = Vector2(-1360, -680)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_10t2q")
nodes/fragment/12/position = Vector2(-2860, -320)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_w73ua")
nodes/fragment/13/position = Vector2(-2860, -460)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_kdnq2")
nodes/fragment/14/position = Vector2(-2540, -240)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_flf0d")
nodes/fragment/15/position = Vector2(-1100, 100)
nodes/fragment/16/node = SubResource("VisualShaderNodeInput_r7fo4")
nodes/fragment/16/position = Vector2(-1940, -920)
nodes/fragment/17/node = SubResource("VisualShaderNodeMix_lbu2a")
nodes/fragment/17/position = Vector2(-80, -80)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatConstant_1f3bt")
nodes/fragment/18/position = Vector2(-620, 260)
nodes/fragment/19/node = SubResource("VisualShaderNodeTexture2DParameter_xlayd")
nodes/fragment/19/position = Vector2(-1900, -720)
nodes/fragment/connections = PackedInt32Array(6, 0, 5, 0, 7, 0, 5, 1, 8, 0, 5, 2, 5, 0, 9, 0, 12, 0, 14, 1, 13, 0, 14, 0, 14, 0, 15, 1, 18, 0, 17, 2, 16, 0, 11, 0, 19, 0, 11, 2, 10, 0, 17, 0, 15, 0, 17, 1, 17, 0, 0, 0, 11, 0, 15, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ups44"]
shader = SubResource("VisualShader_4oagh")
shader_parameter/Gradiant = SubResource("GradientTexture2D_l8kj1")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ygy0o"]
size = Vector2(184.286, 241.429)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_smra1"]
shader = SubResource("VisualShader_g3ehj")
shader_parameter/Intensity = 0.8

[sub_resource type="Gradient" id="Gradient_8lwon"]
interpolation_mode = 2
offsets = PackedFloat32Array(0, 0.833333)
colors = PackedColorArray(0.576792, 0.446841, 0.217726, 1, 0, 0, 0, 0)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_ahb4m"]
gradient = SubResource("Gradient_8lwon")
width = 512
height = 512
fill = 1
fill_from = Vector2(0.5, 0.5)

[sub_resource type="GDScript" id="GDScript_7ecmk"]
script/source = "extends Node



@onready var scanner_tools = $\"..\"
@onready var scanner_opacity = $\"../Scanner_opacity\"

func _ready():
	pass
	#_global_datas._end_ini_subscene.connect(_show)	
	#_global_datas._backFrom_subscene.connect(_hide)
	#_global_datas.active_scanner_button.connect(_activate)
	#_hide()
	
func _hide():
	scanner_tools.visible = false
	
	scanner_opacity._set_scanner_opacity_value(0.0)
	
func _show():
	scanner_tools.visible = true
	
func _activate(condition : bool):
	scanner_tools.visible = condition

	
"

[sub_resource type="GDScript" id="GDScript_b3k8r"]
script/source = "extends Node


@onready var scanner_opacity = $\"../Scanner_opacity\"

var mirror_world = false

var t

func _ready():
	_global_datas._go_Subscene.connect(_disable)
	_global_datas._go_Mainscene.connect(_disable)

	

func _disable():
	mirror_world = false
	_mirror_switch(mirror_world)	
	
func _mirror_switch(condition : bool):
	
	if t:
		t.kill()

	if !condition :
		t = create_tween()
		t .tween_method(scanner_opacity._set_scanner_opacity_value,1.0,0.0,0.25).set_trans(Tween.TRANS_SINE)
		_global_datas.clock_timer.paused = false
	else:
	
		t = create_tween()	
		t .tween_method(scanner_opacity._set_scanner_opacity_value,0.0,1.0,0.25).set_trans(Tween.TRANS_SINE)
		
		_global_datas.clock_timer.paused = true
		
func _on_texture_button_pressed():
	if !_global_datas.Player_InSubScene:
		return
	mirror_world = !mirror_world
	_mirror_switch(mirror_world)
	_global_datas.active_mirror_switch.emit(true)
"

[sub_resource type="GDScript" id="GDScript_i6a5a"]
script/source = "extends Node


func _set_scanner_opacity( slider_y : float, new_position : float):
	
	var value = inverse_lerp(1920,slider_y,new_position)
	var valueD = lerp(0.0,1.0,value)
	_global_datas.scanner_mat.set_shader_parameter(\"Circle\",valueD)	
	_global_datas.scanner_mat_xray.set_shader_parameter(\"Circle\",valueD)
	_global_datas.scanner_mat_xray.set_shader_parameter(\"Circle\",valueD)	
func _set_scanner_opacity_value( value : float):
	
	_global_datas.scanner_mat.set_shader_parameter(\"Circle\",value)	
	_global_datas.scanner_mat_xray.set_shader_parameter(\"Circle\",value)	
	RenderingServer.global_shader_parameter_set(\"Subscene_mirror_alpha\",value)
"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_mlp01"]
default_input_values = [0, 0.0, 1, 0.94]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_0w035"]
default_input_values = [0, 0.0, 1, 1.96, 2, 0.775]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_y830w"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_lt03m"]
constant = 1.743

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_r8oqa"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_m2wot"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_dtosn"]
parameter_name = "Circle"
default_value_enabled = true
default_value = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_5hnkg"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_6fs1o"]
constant = 0.027

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_t0ssb"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_u8hlp"]
function = 31

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_0ikhu"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_td3q4"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_y1ld7"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShader" id="VisualShader_8v8ej"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Circle = 0.40000000596046;



void fragment() {
// FloatConstant:13
	float n_out13p0 = 1.743000;


// FloatConstant:12
	float n_out12p0 = 0.400000;


	float n_out14p0;
// Expression:14
	n_out14p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out12p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out14p0 = n_out13p0 - DITHER_THRESHOLDS[index];
	}


// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatParameter:17
	float n_out17p0 = Circle;


// FloatConstant:3
	float n_out3p0 = 0.027000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out17p0,n_out17p0 + n_out3p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:5
	float n_out5p0 = 1.0 - n_out2p0.x;


// FloatOp:10
	float n_in10p1 = 0.94000;
	float n_out10p0 = n_out17p0 * n_in10p1;


	vec4 n_out9p0;
// Expression:9
	n_out9p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out10p0,n_out10p0 + n_out3p0,d);
		n_out9p0 = vec4(vec3(c),1.0);
	}


// Mix:11
	float n_in11p0 = 0.00000;
	float n_out11p0 = mix(n_in11p0, n_out5p0, n_out9p0.x);


// Step:15
	float n_out15p0 = step(n_out14p0, n_out11p0);


// Output:0
	COLOR.a = n_out15p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1240, 520)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_5hnkg")
nodes/fragment/2/position = Vector2(-540, 20)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_6fs1o")
nodes/fragment/3/position = Vector2(-820, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_t0ssb")
nodes/fragment/4/position = Vector2(-2300, -60)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatFunc_u8hlp")
nodes/fragment/5/position = Vector2(60, 40)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_0ikhu")
nodes/fragment/6/position = Vector2(-1960, -120)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_td3q4")
nodes/fragment/7/position = Vector2(-1720, -120)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_y1ld7")
nodes/fragment/9/position = Vector2(-655.858, 530.852)
nodes/fragment/9/size = Vector2(513.781, 284.487)
nodes/fragment/9/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/9/output_ports = "0,5,color;"
nodes/fragment/9/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatOp_mlp01")
nodes/fragment/10/position = Vector2(-1160, 640)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_0w035")
nodes/fragment/11/position = Vector2(460, 580)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_y830w")
nodes/fragment/12/position = Vector2(-260, 1180)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_lt03m")
nodes/fragment/13/position = Vector2(-260, 1040)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_r8oqa")
nodes/fragment/14/position = Vector2(40, 1160)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_m2wot")
nodes/fragment/15/position = Vector2(880, 780)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_dtosn")
nodes/fragment/17/position = Vector2(-1809.95, 419.028)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 2, 0, 5, 0, 4, 0, 6, 0, 6, 0, 7, 0, 7, 0, 2, 0, 7, 0, 9, 0, 3, 0, 9, 2, 10, 0, 9, 1, 9, 0, 11, 2, 5, 0, 11, 1, 12, 0, 14, 1, 13, 0, 14, 0, 11, 0, 15, 1, 14, 0, 15, 0, 15, 0, 0, 1, 17, 0, 2, 1, 17, 0, 10, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5gumq"]
shader = SubResource("VisualShader_8v8ej")
shader_parameter/Circle = 0.33

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_6sm84"]
constant = 0.57

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_khrgv"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_lpt2p"]
input_name = "color"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_5wjh2"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_tryt1"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ohlgw"]
constant = 0.001

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_030tp"]
constant = 0.49

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kpk2k"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_qx6xx"]
function = 31

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_0cebw"]
parameter_name = "Dots_color"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_3n8ph"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_fc0t7"]
constant = 0.5

[sub_resource type="VisualShader" id="VisualShader_7ulau"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 Dots_color : source_color;



void fragment() {
// Input:12
	vec4 n_out12p0 = COLOR;


// ColorParameter:7
	vec4 n_out7p0 = Dots_color;


// FloatConstant:10
	float n_out10p0 = 0.570000;


// FloatConstant:9
	float n_out9p0 = 0.500000;


	float n_out11p0;
// Expression:11
	n_out11p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out9p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out11p0 = n_out10p0 - DITHER_THRESHOLDS[index];
	}


// Step:13
	float n_out13p0 = step(n_out7p0.x, n_out11p0);


// Mix:8
	vec3 n_out8p0 = mix(vec3(n_out12p0.xyz), vec3(n_out7p0.xyz), vec3(n_out13p0));


// Output:0
	COLOR.rgb = n_out8p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_tryt1")
nodes/fragment/2/position = Vector2(-340, 960)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_ohlgw")
nodes/fragment/3/position = Vector2(-780, 1080)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_030tp")
nodes/fragment/4/position = Vector2(-880, 960)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_kpk2k")
nodes/fragment/5/position = Vector2(-700, 840)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatFunc_qx6xx")
nodes/fragment/6/position = Vector2(185.323, 258.128)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorParameter_0cebw")
nodes/fragment/7/position = Vector2(-880, -120)
nodes/fragment/8/node = SubResource("VisualShaderNodeMix_3n8ph")
nodes/fragment/8/position = Vector2(92.2182, 22.0144)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatConstant_fc0t7")
nodes/fragment/9/position = Vector2(-2000, 480)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatConstant_6sm84")
nodes/fragment/10/position = Vector2(-1920, 360)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_khrgv")
nodes/fragment/11/position = Vector2(-1580, 340)
nodes/fragment/11/size = Vector2(724.789, 654.559)
nodes/fragment/11/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/11/output_ports = "0,0,Dither_Node;"
nodes/fragment/11/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/12/node = SubResource("VisualShaderNodeInput_lpt2p")
nodes/fragment/12/position = Vector2(-280, -20)
nodes/fragment/13/node = SubResource("VisualShaderNodeStep_5wjh2")
nodes/fragment/13/position = Vector2(-420, 400)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 4, 0, 2, 1, 5, 0, 2, 0, 2, 0, 6, 0, 9, 0, 11, 1, 10, 0, 11, 0, 8, 0, 0, 0, 12, 0, 8, 0, 7, 0, 13, 0, 11, 0, 13, 1, 7, 0, 8, 1, 13, 0, 8, 2)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_in4e2"]
shader = SubResource("VisualShader_7ulau")
shader_parameter/Dots_color = Color(0.4, 0.364706, 0.223529, 1)

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_uw2oe"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_cb6v2"]
constant = 0.001

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_rm57r"]
constant = 0.49

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_tg0pr"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_jcnbl"]
function = 31

[sub_resource type="VisualShader" id="VisualShader_w36lr"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:5
	vec2 n_out5p0 = UV;


// FloatConstant:4
	float n_out4p0 = 0.490000;


// FloatConstant:3
	float n_out3p0 = 0.001000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out5p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out4p0,n_out4p0 + n_out3p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:6
	float n_out6p0 = 1.0 - n_out2p0.x;


// Output:0
	COLOR.a = n_out6p0;


}
"
graph_offset = Vector2(-561.73, -38.1816)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_uw2oe")
nodes/fragment/2/position = Vector2(-500, 240)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_cb6v2")
nodes/fragment/3/position = Vector2(-940, 360)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_rm57r")
nodes/fragment/4/position = Vector2(-1040, 240)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_tg0pr")
nodes/fragment/5/position = Vector2(-860, 120)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatFunc_jcnbl")
nodes/fragment/6/position = Vector2(185.323, 258.128)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 4, 0, 2, 1, 5, 0, 2, 0, 2, 0, 6, 0, 6, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_hr3yh"]
shader = SubResource("VisualShader_w36lr")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_tmq0r"]
size = Vector2(163, 136)

[sub_resource type="GDScript" id="GDScript_i8nl0"]
script/source = "extends TextureButton

func _ready():
	var number : int = 0
	set_focus_mode(number)
"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_v0atv"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_wu65v"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_uwtqq"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_r2a56"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_h8my2"]
constant = 1.372

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_8kisr"]
constant = 0.406

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_cgsxd"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ovf53"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_5k3j8"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_5t4o4"]
parameter_name = "Opacity"
default_value_enabled = true

[sub_resource type="VisualShader" id="VisualShader_wndyb"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity = 0;



void fragment() {
// FloatParameter:9
	float n_out9p0 = Opacity;


// FloatConstant:2
	float n_out2p0 = 0.400000;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out2p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out9p0 - DITHER_THRESHOLDS[index];
	}


// Step:5
	float n_in5p0 = 0.00000;
	float n_out5p0 = step(n_in5p0, n_out4p0);


// Output:0
	COLOR.a = n_out5p0;


}
"
graph_offset = Vector2(-1245.45, -17.1)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_cgsxd")
nodes/fragment/2/position = Vector2(-1600, 600)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_ovf53")
nodes/fragment/4/position = Vector2(-1300, 500)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeStep_5k3j8")
nodes/fragment/5/position = Vector2(-180, 240)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_5t4o4")
nodes/fragment/9/position = Vector2(-1980, 380)
nodes/fragment/10/node = SubResource("VisualShaderNodeInput_v0atv")
nodes/fragment/10/position = Vector2(-2820, -140)
nodes/fragment/11/node = SubResource("VisualShaderNodeUVFunc_wu65v")
nodes/fragment/11/position = Vector2(-2480, -200)
nodes/fragment/12/node = SubResource("VisualShaderNodeUVFunc_uwtqq")
nodes/fragment/12/position = Vector2(-2240, -200)
nodes/fragment/13/node = SubResource("VisualShaderNodeExpression_r2a56")
nodes/fragment/13/position = Vector2(-1980, 20)
nodes/fragment/13/size = Vector2(513.781, 284.487)
nodes/fragment/13/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/13/output_ports = "0,5,color;"
nodes/fragment/13/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatConstant_h8my2")
nodes/fragment/14/position = Vector2(-2520, 260)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatConstant_8kisr")
nodes/fragment/15/position = Vector2(-2460, 40)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 1, 4, 0, 5, 1, 5, 0, 0, 1, 9, 0, 4, 0, 10, 0, 11, 0, 11, 0, 12, 0, 14, 0, 13, 2, 12, 0, 13, 0, 15, 0, 13, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_2qpgv"]
shader = SubResource("VisualShader_wndyb")
shader_parameter/Opacity = 0.0

[node name="06_INVENTORY" type="Node"]
script = SubResource("GDScript_mh7vf")
metadata/_edit_vertical_guides_ = [960.0]

[node name="INSTANCE_COINS" type="Node" parent="."]
script = SubResource("GDScript_qiikw")

[node name="INSTANCE_PICTURES" type="Node" parent="."]
script = SubResource("GDScript_om7tc")

[node name="INSTANCE_WORDS_NOTE" type="Node" parent="."]
script = SubResource("GDScript_wd62i")

[node name="USING_BOOK" type="Node" parent="."]
script = SubResource("GDScript_3n8kc")

[node name="Timer" type="Timer" parent="USING_BOOK"]
wait_time = 0.25
one_shot = true

[node name="Timer_out" type="Timer" parent="USING_BOOK"]
one_shot = true

[node name="CHANGE_CURSOR" type="Node" parent="."]
script = ExtResource("1_8ci41")

[node name="TELEPORT" type="Node" parent="."]
script = SubResource("GDScript_xw7ed")

[node name="Control" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="Board" type="Control" parent="Control"]
anchors_preset = 0
mouse_filter = 2

[node name="Board_all" type="Node2D" parent="Control/Board"]
position = Vector2(960, 1080)

[node name="Book" parent="Control/Board/Board_all" instance=ExtResource("1_mrfq4")]

[node name="Map_Parent" type="Control" parent="Control"]
anchors_preset = 0
mouse_filter = 2

[node name="Map" type="Node2D" parent="Control/Map_Parent"]
position = Vector2(1921, -95)
rotation = 0.214685

[node name="Take_object" type="Node" parent="Control/Map_Parent/Map"]
script = ExtResource("3_yssyu")

[node name="Apply_pos_anim" type="Node" parent="Control/Map_Parent/Map"]
script = ExtResource("4_ueoox")

[node name="Timer" type="Timer" parent="Control/Map_Parent/Map/Apply_pos_anim"]
wait_time = 0.25
one_shot = true

[node name="shadow" type="ColorRect" parent="Control/Map_Parent/Map"]
visible = false
light_mask = 3
material = SubResource("ShaderMaterial_icff5")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -66.8367
offset_top = 36.8761
offset_right = 11.1633
offset_bottom = 114.876
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(7.5833, 10.1534)
pivot_offset = Vector2(40, 40)
mouse_filter = 2
color = Color(0, 0, 0, 1)

[node name="ColorRect3" type="ColorRect" parent="Control/Map_Parent/Map"]
light_mask = 3
material = SubResource("ShaderMaterial_41fye")
offset_left = -281.0
offset_top = -409.0
offset_right = 514.0
offset_bottom = 727.0
scale = Vector2(0.70678, 0.718924)
mouse_filter = 2
color = Color(0.576471, 0.52549, 0.45098, 1)

[node name="Map" type="TextureRect" parent="Control/Map_Parent/Map"]
light_mask = 3
material = SubResource("ShaderMaterial_lf4bd")
offset_left = -271.0
offset_top = -400.0
offset_right = 529.0
offset_bottom = 400.0
scale = Vector2(0.68, 1)
mouse_filter = 2
texture = ExtResource("3_5pa05")

[node name="Area2D" type="Area2D" parent="Control/Map_Parent/Map"]
position = Vector2(127, 0)

[node name="Apply_pos_behind" type="Node" parent="Control/Map_Parent/Map/Area2D"]
script = SubResource("GDScript_y5o0k")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Control/Map_Parent/Map/Area2D"]
position = Vector2(-128.289, -0.00012207)
shape = SubResource("RectangleShape2D_epdke")

[node name="Bougie_zone" type="Control" parent="Control"]
anchors_preset = 0
mouse_filter = 2

[node name="Bougie" type="Node2D" parent="Control/Bougie_zone"]
position = Vector2(1562, 123)

[node name="Active_bougie" type="Node" parent="Control/Bougie_zone/Bougie"]
script = SubResource("GDScript_xyojo")

[node name="Burn_Paper" type="Node" parent="Control/Bougie_zone/Bougie"]
script = SubResource("GDScript_c27os")

[node name="Take_object" type="Node" parent="Control/Bougie_zone/Bougie"]
script = ExtResource("3_yssyu")

[node name="Apply_pos_anim" type="Node" parent="Control/Bougie_zone/Bougie"]
script = ExtResource("4_ueoox")

[node name="Timer" type="Timer" parent="Control/Bougie_zone/Bougie/Apply_pos_anim"]
wait_time = 0.25
one_shot = true

[node name="Light_b" type="TextureRect" parent="Control/Bougie_zone/Bougie"]
texture_filter = 1
texture_repeat = 2
material = SubResource("ShaderMaterial_iywle")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -254.0
offset_top = -234.0
offset_right = 258.0
offset_bottom = 278.0
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(0.514329, 0.514329)
pivot_offset = Vector2(256, 256)
texture = SubResource("GradientTexture2D_ltt6a")

[node name="light_m7" type="ColorRect" parent="Control/Bougie_zone/Bougie"]
visible = false
light_mask = 3
material = SubResource("ShaderMaterial_5tl7k")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 78.0
offset_top = 109.831
offset_right = 180.0
offset_bottom = 211.831
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(-1.58491, -1.68462)
mouse_filter = 2
color = Color(0.0666667, 0.109804, 0.113725, 1)

[node name="light_m6" type="ColorRect" parent="Control/Bougie_zone/Bougie"]
visible = false
light_mask = 3
material = SubResource("ShaderMaterial_5tl7k")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 78.0
offset_top = 104.831
offset_right = 180.0
offset_bottom = 206.831
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(-1.58491, -1.68462)
mouse_filter = 2
color = Color(0.121569, 0.180392, 0.188235, 1)

[node name="light_m3" type="ColorRect" parent="Control/Bougie_zone/Bougie"]
light_mask = 3
material = SubResource("ShaderMaterial_ups44")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 62.0676
offset_top = 30.0
offset_right = 164.068
offset_bottom = 63.905
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(-1.22615, -1.22615)
mouse_filter = 2
color = Color(0.533333, 0.533333, 0.533333, 1)

[node name="light_m" type="ColorRect" parent="Control/Bougie_zone/Bougie"]
light_mask = 3
material = SubResource("ShaderMaterial_5tl7k")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 62.0677
offset_top = 83.9213
offset_right = 164.068
offset_bottom = 185.921
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(-1.22615, -1.22615)
mouse_filter = 2
color = Color(0.537255, 0.537255, 0.537255, 1)

[node name="light_m2" type="ColorRect" parent="Control/Bougie_zone/Bougie"]
light_mask = 3
material = SubResource("ShaderMaterial_5tl7k")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 62.0676
offset_top = 58.0
offset_right = 164.068
offset_bottom = 160.0
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(-1.22615, -1.22615)
mouse_filter = 2
color = Color(0.686275, 0.686275, 0.686275, 1)

[node name="light_m5" type="ColorRect" parent="Control/Bougie_zone/Bougie"]
light_mask = 3
material = SubResource("ShaderMaterial_ups44")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 5.06763
offset_top = -4.0
offset_right = 11.7606
offset_bottom = 28.355
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(-1.22615, -1.22615)
mouse_filter = 2
color = Color(0.176471, 0.176471, 0.176471, 1)

[node name="light_flare" type="ColorRect" parent="Control/Bougie_zone/Bougie"]
light_mask = 3
material = SubResource("ShaderMaterial_5tl7k")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 10.0
offset_top = -25.0
offset_right = 112.0
offset_bottom = 77.0
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(-0.163306, -0.665895)
mouse_filter = 2
color = Color(0.861409, 0.741763, 0.332567, 1)

[node name="Area2D" type="Area2D" parent="Control/Bougie_zone/Bougie"]
position = Vector2(-40.9322, -27.0787)
scale = Vector2(0.7, 0.7)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Control/Bougie_zone/Bougie/Area2D"]
position = Vector2(57.8572, 39.2858)
scale = Vector2(0.999998, 0.999998)
shape = SubResource("RectangleShape2D_ygy0o")

[node name="Light_F" type="TextureRect" parent="Control/Bougie_zone/Bougie"]
texture_filter = 1
texture_repeat = 2
material = SubResource("ShaderMaterial_smra1")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -255.0
offset_top = -324.0
offset_right = 257.0
offset_bottom = 188.0
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(0.173154, 0.352458)
pivot_offset = Vector2(256, 256)
texture = SubResource("GradientTexture2D_ahb4m")

[node name="Photo_group" type="Control" parent="Control"]
anchors_preset = 0

[node name="PaperSquare_prefabs" parent="Control/Photo_group" instance=ExtResource("2_3xfr3")]
position = Vector2(143, 16)
rotation = 0.104477

[node name="PaperSquare_prefabs3" parent="Control/Photo_group" instance=ExtResource("2_3xfr3")]
position = Vector2(175, 142)
rotation = -0.232413

[node name="PaperSquare_prefabs2" parent="Control/Photo_group" instance=ExtResource("2_3xfr3")]
position = Vector2(247, 52)
rotation = -0.185973

[node name="Mirror_tools" type="Control" parent="Control"]
anchors_preset = 0
mouse_filter = 2

[node name="Mirror_tools" type="Node2D" parent="Control/Mirror_tools"]
position = Vector2(1761, 679)

[node name="Activation" type="Node" parent="Control/Mirror_tools/Mirror_tools"]
script = SubResource("GDScript_7ecmk")

[node name="World_switch" type="Node" parent="Control/Mirror_tools/Mirror_tools"]
script = SubResource("GDScript_b3k8r")

[node name="Scanner_opacity" type="Node" parent="Control/Mirror_tools/Mirror_tools"]
script = SubResource("GDScript_i6a5a")

[node name="Take_object" type="Node" parent="Control/Mirror_tools/Mirror_tools"]
script = ExtResource("3_yssyu")

[node name="Apply_pos_anim" type="Node" parent="Control/Mirror_tools/Mirror_tools"]
script = ExtResource("4_ueoox")

[node name="Timer" type="Timer" parent="Control/Mirror_tools/Mirror_tools/Apply_pos_anim"]
wait_time = 0.25
one_shot = true

[node name="Photo_circle3" type="ColorRect" parent="Control/Mirror_tools/Mirror_tools"]
visible = false
material = SubResource("ShaderMaterial_5gumq")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -412.0
offset_top = -540.0
offset_right = 1508.0
offset_bottom = 540.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.231373, 0.623529, 0.647059, 1)

[node name="ColorRect9" type="ColorRect" parent="Control/Mirror_tools/Mirror_tools"]
offset_left = -79.0
offset_top = -43.0
offset_right = 1.0
offset_bottom = 25.0
scale = Vector2(2, 2)
mouse_filter = 2
color = Color(0.4, 0.364706, 0.223529, 1)

[node name="ColorRect10" type="ColorRect" parent="Control/Mirror_tools/Mirror_tools"]
material = SubResource("ShaderMaterial_in4e2")
offset_left = -53.0
offset_top = -39.0
offset_right = 17.0
offset_bottom = 30.0
scale = Vector2(1.78756, 1.78756)
mouse_filter = 2
color = Color(0.0156863, 0.113725, 0.12549, 1)

[node name="ColorRect11" type="ColorRect" parent="Control/Mirror_tools/Mirror_tools"]
material = SubResource("ShaderMaterial_hr3yh")
offset_left = -25.0
offset_top = -5.0
offset_right = 9.0
offset_bottom = 29.0
scale = Vector2(1.78756, 1.78756)
mouse_filter = 2
color = Color(0.0156863, 0.113725, 0.12549, 1)

[node name="Area2D" type="Area2D" parent="Control/Mirror_tools/Mirror_tools"]
position = Vector2(-195, 6)

[node name="Apply_pos_behind" type="Node" parent="Control/Mirror_tools/Mirror_tools/Area2D"]
script = SubResource("GDScript_y5o0k")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Control/Mirror_tools/Mirror_tools/Area2D"]
position = Vector2(197.5, 19)
shape = SubResource("RectangleShape2D_tmq0r")

[node name="TextureButton" type="TextureButton" parent="Control/Mirror_tools/Mirror_tools"]
offset_left = -39.0
offset_top = -21.0
offset_right = 49.0
offset_bottom = 63.0
script = SubResource("GDScript_i8nl0")

[node name="Coins_group" type="Control" parent="Control"]
anchors_preset = 0
mouse_filter = 2

[node name="instance_pos" type="Control" parent="Control/Coins_group"]
anchors_preset = 0
offset_left = 960.0
offset_top = 1050.0
offset_right = 960.0
offset_bottom = 1050.0
mouse_filter = 2

[node name="Coins6" parent="Control/Coins_group" instance=ExtResource("5_6qspm")]
position = Vector2(565, 63)

[node name="Coins7" parent="Control/Coins_group" instance=ExtResource("5_6qspm")]
position = Vector2(599, 61)

[node name="Coins8" parent="Control/Coins_group" instance=ExtResource("5_6qspm")]
position = Vector2(563, 74)

[node name="Coins9" parent="Control/Coins_group" instance=ExtResource("5_6qspm")]
position = Vector2(592, 87)

[node name="Coins" parent="Control/Coins_group" instance=ExtResource("6_iwb8l")]
position = Vector2(404, 127)

[node name="Coins2" parent="Control/Coins_group" instance=ExtResource("6_iwb8l")]
position = Vector2(467, 166)

[node name="Coins3" parent="Control/Coins_group" instance=ExtResource("6_iwb8l")]
position = Vector2(443, 162)

[node name="Coins4" parent="Control/Coins_group" instance=ExtResource("6_iwb8l")]
position = Vector2(443, 165)

[node name="Coins5" parent="Control/Coins_group" instance=ExtResource("6_iwb8l")]
position = Vector2(454, 162)

[node name="Words_note" type="Control" parent="Control"]
anchors_preset = 0
mouse_filter = 2

[node name="Clock_Parent" type="Control" parent="Control"]
anchors_preset = 0
mouse_filter = 2

[node name="Clock" parent="Control/Clock_Parent" instance=ExtResource("7_ci51x")]
position = Vector2(1737, 290)
rotation = 0.0698132

[node name="Backdrop" type="ColorRect" parent="Control"]
material = SubResource("ShaderMaterial_2qpgv")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -4.0
offset_top = -1.0
offset_right = -4.0
offset_bottom = -1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.0156863, 0.0705882, 0.0823529, 1)

[connection signal="timeout" from="USING_BOOK/Timer" to="USING_BOOK" method="_on_timer_timeout"]
[connection signal="timeout" from="USING_BOOK/Timer_out" to="USING_BOOK" method="_on_timer_out_timeout"]
[connection signal="pos_anim" from="Control/Map_Parent/Map/Take_object" to="Control/Map_Parent/Map/Apply_pos_anim" method="_on_take_object_pos_anim"]
[connection signal="timeout" from="Control/Map_Parent/Map/Apply_pos_anim/Timer" to="Control/Map_Parent/Map/Apply_pos_anim" method="_on_timer_timeout"]
[connection signal="mouse_entered" from="Control/Map_Parent/Map/Area2D" to="Control/Map_Parent/Map/Take_object" method="_on_area_2d_mouse_entered"]
[connection signal="mouse_exited" from="Control/Map_Parent/Map/Area2D" to="Control/Map_Parent/Map/Take_object" method="_on_area_2d_mouse_exited"]
[connection signal="move_behind" from="Control/Map_Parent/Map/Area2D/Apply_pos_behind" to="Control/Map_Parent/Map/Apply_pos_anim" method="_on_apply_pos_behind_move_behind"]
[connection signal="pos_anim" from="Control/Bougie_zone/Bougie/Take_object" to="Control/Bougie_zone/Bougie/Apply_pos_anim" method="_on_take_object_pos_anim"]
[connection signal="timeout" from="Control/Bougie_zone/Bougie/Apply_pos_anim/Timer" to="Control/Bougie_zone/Bougie/Apply_pos_anim" method="_on_timer_timeout"]
[connection signal="area_shape_entered" from="Control/Bougie_zone/Bougie/Area2D" to="Control/Bougie_zone/Bougie/Burn_Paper" method="_on_area_2d_area_shape_entered"]
[connection signal="area_shape_exited" from="Control/Bougie_zone/Bougie/Area2D" to="Control/Bougie_zone/Bougie/Burn_Paper" method="_on_area_2d_area_shape_exited"]
[connection signal="mouse_entered" from="Control/Bougie_zone/Bougie/Area2D" to="Control/Bougie_zone/Bougie/Take_object" method="_on_area_2d_mouse_entered"]
[connection signal="mouse_exited" from="Control/Bougie_zone/Bougie/Area2D" to="Control/Bougie_zone/Bougie/Take_object" method="_on_area_2d_mouse_exited"]
[connection signal="pos_anim" from="Control/Mirror_tools/Mirror_tools/Take_object" to="Control/Mirror_tools/Mirror_tools/Apply_pos_anim" method="_on_take_object_pos_anim"]
[connection signal="timeout" from="Control/Mirror_tools/Mirror_tools/Apply_pos_anim/Timer" to="Control/Mirror_tools/Mirror_tools/Apply_pos_anim" method="_on_timer_timeout"]
[connection signal="mouse_entered" from="Control/Mirror_tools/Mirror_tools/Area2D" to="Control/Mirror_tools/Mirror_tools/Take_object" method="_on_area_2d_mouse_entered"]
[connection signal="mouse_exited" from="Control/Mirror_tools/Mirror_tools/Area2D" to="Control/Mirror_tools/Mirror_tools/Take_object" method="_on_area_2d_mouse_exited"]
[connection signal="move_behind" from="Control/Mirror_tools/Mirror_tools/Area2D/Apply_pos_behind" to="Control/Mirror_tools/Mirror_tools/Apply_pos_anim" method="_on_apply_pos_behind_move_behind"]
[connection signal="pressed" from="Control/Mirror_tools/Mirror_tools/TextureButton" to="Control/Mirror_tools/Mirror_tools/World_switch" method="_on_texture_button_pressed"]
