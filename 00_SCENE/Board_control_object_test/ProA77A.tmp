[gd_scene load_steps=16 format=3 uid="uid://bgl5a6kyd68tc"]

[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/Movable_manager.gd" id="1_k6iyl"]
[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/Clic_raycast.gd" id="1_ofpfv"]
[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/Board_state.gd" id="1_qcx27"]
[ext_resource type="PackedScene" uid="uid://xpunnioeu7vl" path="res://00_SCENE/Board_control_object_test/movable_obj.tscn" id="3_kwpp8"]
[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/Main_Cam.gd" id="4_20uu6"]
[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/Generate_Grid.gd" id="4_ifxw1"]

[sub_resource type="GDScript" id="GDScript_b676x"]
script/source = "extends Node



func _ready():
	_global_datas.using_pad.connect(_switch_inputs)
	_switch_inputs(false)
	
func _input(event):
	
	if event is InputEventJoypadButton or event is InputEventJoypadMotion:
	
		_global_datas.using_pad.emit(true)
	else:
		_global_datas.using_pad.emit(false)

			
			
			
func _switch_inputs(condition : bool):
	if condition:
		
		_global_datas.move_right = \"move_right_joy\"
		_global_datas.move_left = \"move_left_joy\"
		_global_datas.move_forward = \"move_forward_joy\"
		_global_datas.move_backward = \"move_backward_joy\"	
	else:
		_global_datas.move_right = \"move_right\"
		_global_datas.move_left = \"move_left\"
		_global_datas.move_forward = \"move_forward\"
		_global_datas.move_backward = \"move_backward\"
"

[sub_resource type="BoxMesh" id="BoxMesh_c5gkq"]
size = Vector3(2, 0.1, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_d47rl"]
size = Vector3(2, 0, 1)

[sub_resource type="BoxMesh" id="BoxMesh_k08k5"]
size = Vector3(0.5, 0.1, 0.5)

[sub_resource type="BoxShape3D" id="BoxShape3D_7sn4d"]
size = Vector3(0.585876, 0, 0.500488)

[sub_resource type="QuadMesh" id="QuadMesh_lw8vb"]
size = Vector2(8, 5)

[sub_resource type="GDScript" id="GDScript_oy00j"]
script/source = "extends Node3D

@export var speed : float = 0.5
var current_speed : float
@export var min_x : float = -2.0
@export var max_x : float = 2.0
@export var min_z : float = -2.0
@export var max_z : float = 2.0
var border_ratio : float = 22

var target_position : Vector3
var f
var on_auto_move = false

var no_zoom_positon : Vector3

func _ready():

	no_zoom_positon = global_position
	target_position = no_zoom_positon 
	current_speed = speed
	
	_global_datas.camera_current_state = game_state.camera_state.Board
	

func _process(delta):
	

	if _global_datas.camera_current_state == game_state.camera_state.Board:
		move(delta)	
		current_speed = speed 	
		return
	
	if _global_datas.camera_current_state == game_state.camera_state.BoardZoom:
		move(delta)
		current_speed = speed /2		
		return
		
func move(delta):
	
	if Input.is_action_pressed(_global_datas.move_right):
		var _magnitude = Input.get_action_strength(_global_datas.move_right)
		target_position.x += _magnitude * current_speed * delta
	if Input.is_action_pressed(_global_datas.move_left):
		var _magnitude = Input.get_action_strength(_global_datas.move_left)
		target_position.x -= _magnitude * current_speed * delta	
	if Input.is_action_pressed(_global_datas.move_forward):
		var _magnitude = Input.get_action_strength(_global_datas.move_forward)
		target_position.z -= _magnitude * current_speed * delta	
	if Input.is_action_pressed(_global_datas.move_backward):
		var _magnitude = Input.get_action_strength(_global_datas.move_backward)
		target_position.z += _magnitude * current_speed * delta
	
	var lerp_value = (border_ratio - 22.0) / (42.0 - 22.0)	
	var oneminus = lerp(1.0,0.0,lerp_value)
	
	target_position.x = clamp(target_position.x, oneminus * min_x, oneminus * max_x)
	target_position.z = clamp(target_position.z, oneminus * min_z, oneminus * max_z)


	position = target_position
	

func done():
	target_position = position
	on_auto_move = false
	
"

[sub_resource type="SphereMesh" id="SphereMesh_iscb1"]

[sub_resource type="PrismMesh" id="PrismMesh_bmorv"]

[node name="Proto_board_grid" type="Node"]

[