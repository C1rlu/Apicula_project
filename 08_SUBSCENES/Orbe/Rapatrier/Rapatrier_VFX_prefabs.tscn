[gd_scene load_steps=44 format=3 uid="uid://b5fccx7lrnvn6"]

[sub_resource type="GDScript" id="GDScript_qnho3"]
script/source = "extends Node

@onready var _root = $\"..\"
var t

func _ready():
	_scale()	
	
func _scale():

	if t:
		t.kill()
	t = create_tween()
	t.tween_method(scale_value,1.0,7.0,1.0)	
	t.connect(\"finished\",hide)	


									
func hide():
	_root.queue_free()

	
func scale_value(value : float):
	_root.scale = Vector3(value,value,value)	

"

[sub_resource type="SphereMesh" id="SphereMesh_ic6q1"]

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_f2b6f"]
default_input_values = [2, true, 3, 0.8]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_u83qd"]
parameter_name = "Color"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ddbgh"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_4bdnn"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_f0jn0"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_8oejs"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_p63ef"]
parameter_name = "Speed"
hint = 1
min = 0.5
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_x2cmu"]
constant = 0.075

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_6gh74"]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_rlsi2"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_mqpkh"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_36a0o"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7vp6a"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_pfotg"]
constant = 0.5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_b53e6"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_bllxi"]
operator = 2

[sub_resource type="FastNoiseLite" id="FastNoiseLite_uq8jc"]
noise_type = 2
frequency = 0.0093
fractal_weighted_strength = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_p2jtc"]
bump_strength = 27.2
noise = SubResource("FastNoiseLite_uq8jc")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_h1s66"]
texture = SubResource("NoiseTexture2D_p2jtc")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ugu32"]
default_input_values = [0, 0.0, 1, 0.075]
operator = 2

[sub_resource type="VisualShader" id="VisualShader_v7vcm"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_front, diffuse_lambert, specular_schlick_ggx, unshaded, shadows_disabled;

uniform float Speed : hint_range(0.5, 1) = 0.5;
uniform sampler2D tex_vtx_8;
uniform vec4 Color : source_color;
global uniform float Dither_size;



void vertex() {
// Input:4
	float n_out4p0 = TIME;


// FloatConstant:5
	float n_out5p0 = 0.500000;


// FloatParameter:10
	float n_out10p0 = Speed;


// FloatOp:13
	float n_out13p0 = n_out5p0 * n_out10p0;


// FloatOp:7
	float n_out7p0 = n_out4p0 * n_out13p0;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.00000, 1.00000);
	vec2 n_out6p0 = vec2(n_out7p0) * n_in6p1 + UV;


// Texture2D:8
	vec4 n_out8p0 = texture(tex_vtx_8, n_out6p0);


// FloatConstant:11
	float n_out11p0 = 0.075000;


// FloatOp:12
	float n_out12p0 = n_out11p0 * n_out10p0;


// FloatOp:9
	float n_out9p0 = n_out8p0.x * n_out12p0;


// Input:2
	vec3 n_out2p0 = VERTEX;


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out9p0) + n_out2p0;


// Output:0
	VERTEX = n_out3p0;


}

void fragment() {
// ColorParameter:5
	vec4 n_out5p0 = Color;


// Fresnel:4
	float n_in4p3 = 0.80000;
	float n_out4p0 = pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in4p3);


// FloatConstant:6
	float n_out6p0 = 1.000000;


// FloatParameter:7
	float n_out7p0 = Dither_size;


	float n_out8p0;
// Expression:8
	n_out8p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out7p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out8p0 = n_out6p0 - DITHER_THRESHOLDS[index];
	}


// Step:9
	float n_out9p0 = step(n_out4p0, n_out8p0);


// Output:0
	ALBEDO = vec3(n_out5p0.xyz);
	ALPHA = n_out9p0;


}
"
graph_offset = Vector2(-371, -34)
modes/cull = 1
flags/unshaded = true
flags/shadows_disabled = true
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_mqpkh")
nodes/vertex/2/position = Vector2(-500, 720)
nodes/vertex/3/node = SubResource("VisualShaderNodeVectorOp_36a0o")
nodes/vertex/3/position = Vector2(-220, 300)
nodes/vertex/4/node = SubResource("VisualShaderNodeInput_7vp6a")
nodes/vertex/4/position = Vector2(-1580, 320)
nodes/vertex/5/node = SubResource("VisualShaderNodeFloatConstant_pfotg")
nodes/vertex/5/position = Vector2(-1620, 500)
nodes/vertex/6/node = SubResource("VisualShaderNodeUVFunc_b53e6")
nodes/vertex/6/position = Vector2(-1140, 460)
nodes/vertex/7/node = SubResource("VisualShaderNodeFloatOp_bllxi")
nodes/vertex/7/position = Vector2(-1340, 500)
nodes/vertex/8/node = SubResource("VisualShaderNodeTexture_h1s66")
nodes/vertex/8/position = Vector2(-860, 140)
nodes/vertex/9/node = SubResource("VisualShaderNodeFloatOp_ugu32")
nodes/vertex/9/position = Vector2(-420, 200)
nodes/vertex/10/node = SubResource("VisualShaderNodeFloatParameter_p63ef")
nodes/vertex/10/position = Vector2(-940, 720)
nodes/vertex/11/node = SubResource("VisualShaderNodeFloatConstant_x2cmu")
nodes/vertex/11/position = Vector2(-660, 340)
nodes/vertex/12/node = SubResource("VisualShaderNodeFloatOp_6gh74")
nodes/vertex/12/position = Vector2(-468.178, 389.452)
nodes/vertex/13/node = SubResource("VisualShaderNodeFloatOp_rlsi2")
nodes/vertex/13/position = Vector2(-1420, 680)
nodes/vertex/connections = PackedInt32Array(2, 0, 3, 1, 6, 0, 8, 0, 4, 0, 7, 0, 7, 0, 6, 2, 9, 0, 3, 0, 3, 0, 0, 0, 8, 0, 9, 0, 11, 0, 12, 0, 10, 0, 12, 1, 12, 0, 9, 1, 5, 0, 13, 0, 10, 0, 13, 1, 13, 0, 7, 1)
nodes/fragment/4/node = SubResource("VisualShaderNodeFresnel_f2b6f")
nodes/fragment/4/position = Vector2(-380, 280)
nodes/fragment/5/node = SubResource("VisualShaderNodeColorParameter_u83qd")
nodes/fragment/5/position = Vector2(-200, 20)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatConstant_ddbgh")
nodes/fragment/6/position = Vector2(-1060, 320)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatParameter_4bdnn")
nodes/fragment/7/position = Vector2(-1200, 540)
nodes/fragment/8/node = SubResource("VisualShaderNodeExpression_f0jn0")
nodes/fragment/8/position = Vector2(-820, 480)
nodes/fragment/8/size = Vector2(724.789, 654.559)
nodes/fragment/8/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/8/output_ports = "0,0,Dither_Node;"
nodes/fragment/8/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/9/node = SubResource("VisualShaderNodeStep_8oejs")
nodes/fragment/9/position = Vector2(62.3163, 416.397)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 6, 0, 8, 0, 7, 0, 8, 1, 4, 0, 9, 0, 8, 0, 9, 1, 9, 0, 0, 1)
nodes/light/0/position = Vector2(1060, 580)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yq5wv"]
render_priority = 0
shader = SubResource("VisualShader_v7vcm")
shader_parameter/Speed = 1.0
shader_parameter/Color = Color(0.341176, 0.662745, 0.431373, 1)

[sub_resource type="SphereMesh" id="SphereMesh_iskgr"]
lightmap_size_hint = Vector2i(17, 9)

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_qgbyb"]
default_input_values = [2, true, 3, 0.8]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ihias"]
parameter_name = "Color"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_njf26"]
constant = 0.25

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_rwcgv"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_5oorx"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_xnqdt"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ovd8l"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_nssor"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_fixfd"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hc01c"]
constant = 0.1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_73ijq"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ofase"]
operator = 2

[sub_resource type="FastNoiseLite" id="FastNoiseLite_818nq"]
noise_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_t0o2r"]
seamless = true
noise = SubResource("FastNoiseLite_818nq")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_8748o"]
texture = SubResource("NoiseTexture2D_t0o2r")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_k5fdg"]
default_input_values = [0, 0.0, 1, 0.045]
operator = 2

[sub_resource type="VisualShader" id="VisualShader_vn78f"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_front, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform sampler2D tex_vtx_8;
uniform vec4 Color : source_color;
global uniform float Dither_size;



void vertex() {
// Input:4
	float n_out4p0 = TIME;


// FloatConstant:5
	float n_out5p0 = 0.100000;


// FloatOp:7
	float n_out7p0 = n_out4p0 * n_out5p0;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.00000, 1.00000);
	vec2 n_out6p0 = vec2(n_out7p0) * n_in6p1 + UV;


// Texture2D:8
	vec4 n_out8p0 = texture(tex_vtx_8, n_out6p0);


// FloatOp:9
	float n_in9p1 = 0.04500;
	float n_out9p0 = n_out8p0.x * n_in9p1;


// Input:2
	vec3 n_out2p0 = VERTEX;


// VectorOp:3
	vec4 n_out3p0 = vec4(n_out9p0) + vec4(n_out2p0, 0.0);


// Output:0
	VERTEX = vec3(n_out3p0.xyz);


}

void fragment() {
// ColorParameter:3
	vec4 n_out3p0 = Color;


// Fresnel:2
	float n_in2p3 = 0.80000;
	float n_out2p0 = pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in2p3);


// FloatConstant:4
	float n_out4p0 = 0.250000;


// FloatParameter:5
	float n_out5p0 = Dither_size;


	float n_out6p0;
// Expression:6
	n_out6p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out6p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_out7p0 = step(n_out2p0, n_out6p0);


// Output:0
	ALBEDO = vec3(n_out3p0.xyz);
	ALPHA = n_out7p0;


}
"
graph_offset = Vector2(-565.958, -116.881)
modes/cull = 1
flags/unshaded = true
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_ovd8l")
nodes/vertex/2/position = Vector2(-500, 400)
nodes/vertex/3/node = SubResource("VisualShaderNodeVectorOp_nssor")
nodes/vertex/3/position = Vector2(80, 120)
nodes/vertex/4/node = SubResource("VisualShaderNodeInput_fixfd")
nodes/vertex/4/position = Vector2(-1420, 160)
nodes/vertex/5/node = SubResource("VisualShaderNodeFloatConstant_hc01c")
nodes/vertex/5/position = Vector2(-1320, 320)
nodes/vertex/6/node = SubResource("VisualShaderNodeUVFunc_73ijq")
nodes/vertex/6/position = Vector2(-840, 280)
nodes/vertex/7/node = SubResource("VisualShaderNodeFloatOp_ofase")
nodes/vertex/7/position = Vector2(-1040, 320)
nodes/vertex/8/node = SubResource("VisualShaderNodeTexture_8748o")
nodes/vertex/8/position = Vector2(-560, -40)
nodes/vertex/9/node = SubResource("VisualShaderNodeFloatOp_k5fdg")
nodes/vertex/9/position = Vector2(-120, 20)
nodes/vertex/connections = PackedInt32Array(2, 0, 3, 1, 6, 0, 8, 0, 4, 0, 7, 0, 5, 0, 7, 1, 7, 0, 6, 2, 8, 0, 9, 0, 9, 0, 3, 0, 3, 0, 0, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeFresnel_qgbyb")
nodes/fragment/2/position = Vector2(-549.776, 249.026)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorParameter_ihias")
nodes/fragment/3/position = Vector2(-369.776, -10.974)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_njf26")
nodes/fragment/4/position = Vector2(-1140, 380)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_rwcgv")
nodes/fragment/5/position = Vector2(-1280, 600)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_5oorx")
nodes/fragment/6/position = Vector2(-900, 540)
nodes/fragment/6/size = Vector2(724.789, 654.559)
nodes/fragment/6/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/6/output_ports = "0,0,Dither_Node;"
nodes/fragment/6/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_xnqdt")
nodes/fragment/7/position = Vector2(-107.46, 385.423)
nodes/fragment/connections = PackedInt32Array(4, 0, 6, 0, 5, 0, 6, 1, 2, 0, 7, 0, 6, 0, 7, 1, 7, 0, 0, 1, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rw8rk"]
render_priority = 0
shader = SubResource("VisualShader_vn78f")
shader_parameter/Color = Color(0.341176, 0.662745, 0.431373, 1)

[node name="Rapatrier_VFX_root" type="Node3D"]

[node name="Scale_in_switch" type="Node" parent="."]
script = SubResource("GDScript_qnho3")

[node name="Render_vortex" type="MeshInstance3D" parent="."]
layers = 4
mesh = SubResource("SphereMesh_ic6q1")
skeleton = NodePath("")
surface_material_override/0 = SubResource("ShaderMaterial_yq5wv")

[node name="Render_vortex_globe2" type="MeshInstance3D" parent="Render_vortex"]
transform = Transform3D(-4.83793e-08, 1.10679, 0, -1.10679, -4.83793e-08, 0, 0, 0, 1.10679, 0.0134362, 0.095031, 0)
layers = 4
mesh = SubResource("SphereMesh_iskgr")
surface_material_override/0 = SubResource("ShaderMaterial_rw8rk")

[connection signal="tree_exited" from="Scale_in_switch" to="Scale_in_switch" method="_on_tree_exited"]
