[gd_scene load_steps=184 format=3 uid="uid://nigmie4bbn6"]

[ext_resource type="Script" path="res://08_SUBSCENES/Grid_scene/Subscene_loader.gd" id="1_7uoo0"]
[ext_resource type="PackedScene" uid="uid://g7u8o55jrnyy" path="res://08_SUBSCENES/Player_subscene/Player_sub.tscn" id="2_ri8q1"]
[ext_resource type="Material" uid="uid://cf6ce8cjrx4es" path="res://05_SHADER_TEST/Subscene_materials/Subscene_basic_mat.tres" id="3_2i3gt"]
[ext_resource type="Script" path="res://08_SUBSCENES/Player_subscene/Cam_subscene_behaviour.gd" id="3_jsuc6"]
[ext_resource type="Texture2D" uid="uid://p4idp83103im" path="res://05_SHADER_TEST/Full_screen/Dither_pattners/Blue_noise/HDR_L_7.png" id="3_ql8rn"]
[ext_resource type="PackedScene" uid="uid://bdnl7k72gp6so" path="res://08_SUBSCENES/Grid_scene/A1.tscn" id="5_0e8gc"]
[ext_resource type="Texture2D" uid="uid://d31xi5f7tan5w" path="res://05_SHADER_TEST/Full_screen/Dither_pattners/Blue_noise/HDR_LA_7.png" id="8_yirv7"]

[sub_resource type="GDScript" id="GDScript_yjydq"]
script/source = "extends Node

@onready var subscenes_cam_scene = $\"../SUBSCENES_CAM_SCENE\"

@onready var material : Material = subscenes_cam_scene.get_material()
@onready var subscenes_cam_scanner = $\"../SUBSCENES_CAM_SCANNER\"
@onready var subscenes_cam_scanner_x = $\"../SUBSCENES_CAM_SCANNER_X\"


var t

func _ready():
	_global_datas._go_Subscene.connect(_fade_in)
	_global_datas._go_Mainscene.connect(_fade_out)
	
func _fade_in():
	
	subscenes_cam_scene.visible = true
	subscenes_cam_scanner.visible = true
	subscenes_cam_scanner_x.visible = true
	
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(set_shader_value,0.1,0.0,1.0).set_trans(Tween.TRANS_SINE)

func _fade_out():
	subscenes_cam_scanner.visible = false
	subscenes_cam_scanner_x.visible = false
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(set_shader_value,0.0,1.0,1.0).set_trans(Tween.TRANS_SINE)	

	await create_tween().tween_interval(1.0).finished
	subscenes_cam_scene.visible = false

	#subscenes_cam_scanner_xray.visible = false
	

func set_shader_value(value):
	material.set_shader_parameter(\"Opacity\",value)

"

[sub_resource type="GDScript" id="GDScript_71vlv"]
script/source = "extends Node


var active = false


func _ready():
	_global_datas._end_ini_subscene.connect(is_active)
	_global_datas._go_Mainscene.connect(disable)
	
func is_active():
	active = true

func disable():
	active = false

func _on_surface_trigger_area_shape_entered(area_rid, area, area_shape_index, local_shape_index):
	if !active:
		return
	_global_datas._go_Mainscene.emit()
	_global_datas._backFrom_subscene.emit()
"

[sub_resource type="GDScript" id="GDScript_5v5p0"]
script/source = "extends Node

@onready var empty_oxy_prefab = preload(\"res://08_SUBSCENES/02/FLARE.tscn\")
@onready var load_scene = $\"../LoadScene\"
@onready var player_sub = $\"../Player_Sub\"

func _ready():
	pass
	#_global_datas._spawn_empty_oxygene.connect(_instance_oxygene_empty)
	
	

func _instance_oxygene_empty():

	var obj = empty_oxy_prefab.instantiate()
	load_scene.add_child(obj)
	var offset = Vector3(0.0,0.3,-0.1)
	obj.global_position = player_sub.global_position + offset
"

[sub_resource type="GDScript" id="GDScript_opp2i"]
script/source = "extends Node


@onready var scanner_opacity = $Scanner_opacity

var mirror_world = false

var t


func _ready():
	_global_datas._go_Subscene.connect(_disable)
	_global_datas._go_Mainscene.connect(_disable)
	
	_global_datas._click_mirror_switch.connect(_switch_mirror)

	
func _switch_mirror():
	
	if !_global_datas.Player_InSubScene:
		return
		
	mirror_world = !mirror_world
	_mirror_switch(mirror_world)
	_global_datas.active_mirror_switch.emit(mirror_world)

func _disable():
	
	mirror_world = false
	_mirror_switch(mirror_world)	
	
func _mirror_switch(condition : bool):
		
	if t:
		t.kill()

	if !condition :
		t = create_tween()
		t .tween_method(scanner_opacity._set_scanner_opacity_value,1.0,0.0,0.25).set_trans(Tween.TRANS_SINE)
		_global_datas.clock_timer.paused = false
	else:
	
		t = create_tween()	
		t .tween_method(scanner_opacity._set_scanner_opacity_value,0.0,1.0,0.25).set_trans(Tween.TRANS_SINE)
		
		_global_datas.clock_timer.paused = true
		
		
		
		
"

[sub_resource type="GDScript" id="GDScript_sav8t"]
script/source = "extends Node


func _set_scanner_opacity( slider_y : float, new_position : float):
	
	var value = inverse_lerp(1920,slider_y,new_position)
	var valueD = lerp(0.0,1.0,value)
	_global_datas.scanner_mat.set_shader_parameter(\"Circle\",valueD)	

	
func _set_scanner_opacity_value( value : float):
	
	_global_datas.scanner_mat.set_shader_parameter(\"Circle\",value)	

	RenderingServer.global_shader_parameter_set(\"Subscene_mirror_alpha\",value)
"

[sub_resource type="GDScript" id="GDScript_5new5"]
script/source = "extends Camera3D

@onready var target = $\"../SUBSCENES_CAM_SCENE/SubViewport/CAM_STATE_BOAT_root\"


func _ready():
	_global_datas.Subscene_Camera = self
func _process(_delta):
	
	if !_global_datas.Player_InSubScene:
		return
		
	transform.origin = target.position

"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_getfj"]
parameter_name = "Opacity"
hint = 1
step = 0.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_wpx2v"]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5vk85"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_beupl"]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_em7il"]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_kk37y"]
constant = 0.9

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_67xxf"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_usiws"]
default_input_values = [0, 1.5, 1, 0.0]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_hexsk"]
fractal_octaves = 1
cellular_distance_function = 1
cellular_jitter = 0.61

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_07l1v"]
width = 1920
height = 1080
seamless = true
noise = SubResource("FastNoiseLite_hexsk")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_j43dq"]
texture = SubResource("NoiseTexture2D_07l1v")

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_rrkda"]
size = Vector2(634.014, 470.339)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_rjypj"]
constant = 0.3

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ul8ru"]
default_input_values = [0, 1.5, 1, 0.0]

[sub_resource type="VisualShader" id="VisualShader_8isr1"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity : hint_range(0, 1) = 1;



void fragment() {
// FloatParameter:18
	float n_out18p0 = Opacity;


// FloatConstant:23
	float n_out23p0 = 1.000000;


// FloatConstant:5
	float n_out5p0 = 0.300000;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out23p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_out7p0 = step(n_out18p0, n_out4p0);


// Output:0
	COLOR.a = n_out7p0;


}
"
graph_offset = Vector2(-648.224, -203.513)
mode = 1
flags/light_only = false
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_rrkda")
nodes/fragment/4/position = Vector2(-880, 620)
nodes/fragment/4/size = Vector2(634.014, 470.339)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatConstant_rjypj")
nodes/fragment/5/position = Vector2(-1200, 860)
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_ul8ru")
nodes/fragment/7/position = Vector2(-200, 260)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatParameter_getfj")
nodes/fragment/18/position = Vector2(-720, 260)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatConstant_wpx2v")
nodes/fragment/23/position = Vector2(-1260, 780)
nodes/fragment/24/node = SubResource("VisualShaderNodeInput_5vk85")
nodes/fragment/24/position = Vector2(-1220, -280)
nodes/fragment/25/node = SubResource("VisualShaderNodeTexture_beupl")
nodes/fragment/25/position = Vector2(-780, -520)
nodes/fragment/26/node = SubResource("VisualShaderNodeVectorOp_em7il")
nodes/fragment/26/position = Vector2(-380, -300)
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatConstant_kk37y")
nodes/fragment/27/position = Vector2(-680, -180)
nodes/fragment/28/node = SubResource("VisualShaderNodeMix_67xxf")
nodes/fragment/28/position = Vector2(-160, -20)
nodes/fragment/29/node = SubResource("VisualShaderNodeStep_usiws")
nodes/fragment/29/position = Vector2(-370.691, 150.903)
nodes/fragment/31/node = SubResource("VisualShaderNodeTexture_j43dq")
nodes/fragment/31/position = Vector2(-1040, -20)
nodes/fragment/connections = PackedInt32Array(4, 0, 7, 1, 18, 0, 7, 0, 5, 0, 4, 1, 23, 0, 4, 0, 24, 0, 25, 2, 25, 0, 26, 0, 27, 0, 26, 1, 26, 0, 28, 0, 25, 0, 28, 1, 4, 0, 29, 1, 7, 0, 0, 1, 31, 0, 29, 0, 29, 0, 28, 2)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tsr6x"]
shader = SubResource("VisualShader_8isr1")
shader_parameter/Opacity = 0.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_dj8vr"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_mhw1d"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_l177y"]
constant = Color(0.2623, 0.581025, 0.61, 1)

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_26ssp"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_1oo8g"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ilc2n"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_5opgu"]
parameter_name = "Circle"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_tcmyv"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_atyix"]
source = 5

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_i2gji"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_rsloa"]
default_input_values = [0, 0.03, 1, 0.065, 2, 0.26]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_wwoc3"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_sewej"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_umwfw"]
constant = Color(0.0143067, 0.116367, 0.131475, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_dectx"]
constant = Color(0.992188, 0.847656, 0.621094, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_vsslt"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_6bf42"]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_v7bc7"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_65l6o"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_n30pu"]
default_input_values = [0, 0.0, 1, 0.001]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_2iv12"]
default_input_values = [0, 0.0, 1, 0.1]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_jo1kq"]
constant = Color(0.61, 0.61, 0.61, 1)

[sub_resource type="VisualShader" id="VisualShader_pn65u"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Noise : repeat_enable;
uniform float Circle : hint_range(0, 1) = 0.5;



void fragment() {
// ColorConstant:54
	vec4 n_out54p0 = vec4(0.014307, 0.116367, 0.131475, 1.000000);


// UVFunc:59
	vec2 n_in59p1 = vec2(1.00000, 0.50000);
	vec2 n_in59p2 = vec2(0.00000, 0.00000);
	vec2 n_out59p0 = (UV - n_in59p2) * n_in59p1 + n_in59p2;


// FloatConstant:57
	float n_out57p0 = 5.000000;


// Input:60
	float n_out60p0 = TIME;


// FloatOp:61
	float n_in61p1 = 0.00100;
	float n_out61p0 = n_out60p0 * n_in61p1;


// FloatOp:62
	float n_in62p1 = 0.10000;
	float n_out62p0 = n_out61p0 * n_in62p1;


// UVFunc:58
	vec2 n_out58p0 = (n_out59p0 - vec2(n_out62p0)) * vec2(n_out57p0) + vec2(n_out62p0);


	vec4 n_out42p0;
// Texture2D:42
	n_out42p0 = texture(Noise, n_out58p0);


// Mix:48
	float n_in48p1 = 0.06500;
	float n_in48p2 = 0.26000;
	float n_out48p0 = mix(n_out42p0.x, n_in48p1, n_in48p2);


	vec4 n_out25p0;
// Texture2D:25
	n_out25p0 = texture(TEXTURE, UV);


// Step:43
	float n_out43p0 = step(n_out48p0, n_out25p0.x);


// Mix:53
	vec3 n_in53p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out53p0 = mix(vec3(n_out54p0.xyz), n_in53p1, vec3(n_out43p0));


// ColorConstant:56
	vec4 n_out56p0 = vec4(0.992188, 0.847656, 0.621094, 1.000000);


// Mix:52
	vec3 n_out52p0 = mix(n_out53p0, vec3(n_out56p0.xyz), vec3(n_out43p0));


// FloatParameter:39
	float n_out39p0 = Circle;


// FloatConstant:36
	float n_out36p0 = 0.400000;


	float n_out37p0;
// Expression:37
	n_out37p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out36p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out37p0 = n_out39p0 - DITHER_THRESHOLDS[index];
	}


// Step:35
	float n_in35p0 = 0.00000;
	float n_out35p0 = step(n_in35p0, n_out37p0);


// Output:0
	COLOR.rgb = n_out52p0;
	COLOR.a = n_out35p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1060, 200)
nodes/fragment/24/node = SubResource("VisualShaderNodeInput_dj8vr")
nodes/fragment/24/position = Vector2(-1240, -900)
nodes/fragment/25/node = SubResource("VisualShaderNodeTexture_mhw1d")
nodes/fragment/25/position = Vector2(-820, -820)
nodes/fragment/27/node = SubResource("VisualShaderNodeColorConstant_l177y")
nodes/fragment/27/position = Vector2(460, -640)
nodes/fragment/35/node = SubResource("VisualShaderNodeStep_26ssp")
nodes/fragment/35/position = Vector2(-140, 340)
nodes/fragment/36/node = SubResource("VisualShaderNodeFloatConstant_1oo8g")
nodes/fragment/36/position = Vector2(-1460, 1460)
nodes/fragment/37/node = SubResource("VisualShaderNodeExpression_ilc2n")
nodes/fragment/37/position = Vector2(-1160, 1440)
nodes/fragment/37/size = Vector2(724.789, 654.559)
nodes/fragment/37/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/37/output_ports = "0,0,Dither_Node;"
nodes/fragment/37/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/39/node = SubResource("VisualShaderNodeFloatParameter_5opgu")
nodes/fragment/39/position = Vector2(-1520, 1160)
nodes/fragment/41/node = SubResource("VisualShaderNodeTexture2DParameter_tcmyv")
nodes/fragment/41/position = Vector2(-500, -360)
nodes/fragment/42/node = SubResource("VisualShaderNodeTexture_atyix")
nodes/fragment/42/position = Vector2(-240, -580)
nodes/fragment/43/node = SubResource("VisualShaderNodeStep_i2gji")
nodes/fragment/43/position = Vector2(220, -660)
nodes/fragment/48/node = SubResource("VisualShaderNodeMix_rsloa")
nodes/fragment/48/position = Vector2(40, -500)
nodes/fragment/52/node = SubResource("VisualShaderNodeMix_wwoc3")
nodes/fragment/52/position = Vector2(720, -580)
nodes/fragment/53/node = SubResource("VisualShaderNodeMix_sewej")
nodes/fragment/53/position = Vector2(420, -340)
nodes/fragment/54/node = SubResource("VisualShaderNodeColorConstant_umwfw")
nodes/fragment/54/position = Vector2(120, -280)
nodes/fragment/56/node = SubResource("VisualShaderNodeColorConstant_dectx")
nodes/fragment/56/position = Vector2(420, -760)
nodes/fragment/57/node = SubResource("VisualShaderNodeFloatConstant_vsslt")
nodes/fragment/57/position = Vector2(-1340, -380)
nodes/fragment/58/node = SubResource("VisualShaderNodeUVFunc_6bf42")
nodes/fragment/58/position = Vector2(-840, -460)
nodes/fragment/59/node = SubResource("VisualShaderNodeUVFunc_v7bc7")
nodes/fragment/59/position = Vector2(-1160, -580)
nodes/fragment/60/node = SubResource("VisualShaderNodeInput_65l6o")
nodes/fragment/60/position = Vector2(-1440, -200)
nodes/fragment/61/node = SubResource("VisualShaderNodeFloatOp_n30pu")
nodes/fragment/61/position = Vector2(-1120, -220)
nodes/fragment/62/node = SubResource("VisualShaderNodeFloatOp_2iv12")
nodes/fragment/62/position = Vector2(-1060, -20)
nodes/fragment/63/node = SubResource("VisualShaderNodeColorConstant_jo1kq")
nodes/fragment/63/position = Vector2(620, -720)
nodes/fragment/connections = PackedInt32Array(36, 0, 37, 1, 39, 0, 37, 0, 42, 0, 48, 0, 41, 0, 42, 2, 43, 0, 52, 2, 43, 0, 53, 2, 24, 0, 25, 2, 48, 0, 43, 0, 53, 0, 52, 0, 60, 0, 61, 0, 61, 0, 62, 0, 59, 0, 58, 0, 57, 0, 58, 1, 62, 0, 58, 2, 58, 0, 42, 0, 54, 0, 53, 0, 56, 0, 52, 1, 25, 0, 43, 1, 35, 0, 0, 1, 52, 0, 0, 0, 37, 0, 35, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_byemk"]
shader = SubResource("VisualShader_pn65u")
shader_parameter/Circle = 1.0
shader_parameter/Noise = ExtResource("3_ql8rn")

[sub_resource type="GDScript" id="GDScript_6jk87"]
script/source = "extends SubViewportContainer



func _ready():
	_global_datas.scanner_mat = get_material()
	
"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_bng1n"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_58is7"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_tmml3"]
constant = Color(0.2623, 0.581025, 0.61, 1)

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_qbdad"]
default_input_values = [0, 0.395, 1, 0.06]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_kxv82"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_b27gi"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_sae0v"]
parameter_name = "Circle"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_eyfje"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_e2ti7"]
source = 5

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_6n8hd"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_6io43"]
default_input_values = [0, 0.03, 1, -1.745, 2, 0.305]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_3xqdj"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_yxqng"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_wjhvv"]
constant = Color(0.0143067, 0.116367, 0.131475, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_mlegr"]
constant = Color(0.992188, 0.847656, 0.621094, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_3sva2"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_3lbvf"]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_hccbu"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_68oar"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_o41rx"]
default_input_values = [0, 0.0, 1, 0.001]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ydafs"]
default_input_values = [0, 0.0, 1, 0.1]
operator = 2

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_tupn6"]
function = 31

[sub_resource type="VisualShader" id="VisualShader_872im"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Noise : repeat_enable;



void fragment() {
// ColorConstant:56
	vec4 n_out56p0 = vec4(0.992188, 0.847656, 0.621094, 1.000000);


	vec4 n_out25p0;
// Texture2D:25
	n_out25p0 = texture(TEXTURE, UV);
	float n_out25p4 = n_out25p0.a;


// FloatFunc:64
	float n_out64p0 = 1.0 - n_out25p4;


// UVFunc:59
	vec2 n_in59p1 = vec2(1.00000, 0.50000);
	vec2 n_in59p2 = vec2(0.00000, 0.00000);
	vec2 n_out59p0 = (UV - n_in59p2) * n_in59p1 + n_in59p2;


// FloatConstant:57
	float n_out57p0 = 5.000000;


// Input:60
	float n_out60p0 = TIME;


// FloatOp:61
	float n_in61p1 = 0.00100;
	float n_out61p0 = n_out60p0 * n_in61p1;


// FloatOp:62
	float n_in62p1 = 0.10000;
	float n_out62p0 = n_out61p0 * n_in62p1;


// UVFunc:58
	vec2 n_out58p0 = (n_out59p0 - vec2(n_out62p0)) * vec2(n_out57p0) + vec2(n_out62p0);


	vec4 n_out42p0;
// Texture2D:42
	n_out42p0 = texture(Noise, n_out58p0);


// Mix:48
	float n_in48p1 = -1.74500;
	float n_in48p2 = 0.30500;
	float n_out48p0 = mix(n_out42p0.x, n_in48p1, n_in48p2);


// Step:35
	float n_out35p0 = step(n_out64p0, n_out48p0);


// Output:0
	COLOR.rgb = vec3(n_out56p0.xyz);
	COLOR.a = n_out35p0;


}
"
graph_offset = Vector2(-370.849, -873.014)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1080, -340)
nodes/fragment/24/node = SubResource("VisualShaderNodeInput_bng1n")
nodes/fragment/24/position = Vector2(-1240, -900)
nodes/fragment/25/node = SubResource("VisualShaderNodeTexture_58is7")
nodes/fragment/25/position = Vector2(-820, -820)
nodes/fragment/27/node = SubResource("VisualShaderNodeColorConstant_tmml3")
nodes/fragment/27/position = Vector2(460, -640)
nodes/fragment/35/node = SubResource("VisualShaderNodeStep_qbdad")
nodes/fragment/35/position = Vector2(660, 100)
nodes/fragment/36/node = SubResource("VisualShaderNodeFloatConstant_kxv82")
nodes/fragment/36/position = Vector2(-1460, 1460)
nodes/fragment/37/node = SubResource("VisualShaderNodeExpression_b27gi")
nodes/fragment/37/position = Vector2(-1160, 1440)
nodes/fragment/37/size = Vector2(724.789, 654.559)
nodes/fragment/37/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/37/output_ports = "0,0,Dither_Node;"
nodes/fragment/37/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/39/node = SubResource("VisualShaderNodeFloatParameter_sae0v")
nodes/fragment/39/position = Vector2(-1520, 1160)
nodes/fragment/41/node = SubResource("VisualShaderNodeTexture2DParameter_eyfje")
nodes/fragment/41/position = Vector2(-500, -360)
nodes/fragment/42/node = SubResource("VisualShaderNodeTexture_e2ti7")
nodes/fragment/42/position = Vector2(-240, -580)
nodes/fragment/43/node = SubResource("VisualShaderNodeStep_6n8hd")
nodes/fragment/43/position = Vector2(220, -660)
nodes/fragment/48/node = SubResource("VisualShaderNodeMix_6io43")
nodes/fragment/48/position = Vector2(40, -500)
nodes/fragment/52/node = SubResource("VisualShaderNodeMix_3xqdj")
nodes/fragment/52/position = Vector2(720, -580)
nodes/fragment/53/node = SubResource("VisualShaderNodeMix_yxqng")
nodes/fragment/53/position = Vector2(420, -340)
nodes/fragment/54/node = SubResource("VisualShaderNodeColorConstant_wjhvv")
nodes/fragment/54/position = Vector2(120, -280)
nodes/fragment/56/node = SubResource("VisualShaderNodeColorConstant_mlegr")
nodes/fragment/56/position = Vector2(420, -760)
nodes/fragment/57/node = SubResource("VisualShaderNodeFloatConstant_3sva2")
nodes/fragment/57/position = Vector2(-1340, -380)
nodes/fragment/58/node = SubResource("VisualShaderNodeUVFunc_3lbvf")
nodes/fragment/58/position = Vector2(-840, -460)
nodes/fragment/59/node = SubResource("VisualShaderNodeUVFunc_hccbu")
nodes/fragment/59/position = Vector2(-1160, -580)
nodes/fragment/60/node = SubResource("VisualShaderNodeInput_68oar")
nodes/fragment/60/position = Vector2(-1440, -200)
nodes/fragment/61/node = SubResource("VisualShaderNodeFloatOp_o41rx")
nodes/fragment/61/position = Vector2(-1120, -220)
nodes/fragment/62/node = SubResource("VisualShaderNodeFloatOp_ydafs")
nodes/fragment/62/position = Vector2(-1060, -20)
nodes/fragment/64/node = SubResource("VisualShaderNodeFloatFunc_tupn6")
nodes/fragment/64/position = Vector2(-457.052, 110.345)
nodes/fragment/connections = PackedInt32Array(36, 0, 37, 1, 39, 0, 37, 0, 42, 0, 48, 0, 41, 0, 42, 2, 43, 0, 52, 2, 43, 0, 53, 2, 24, 0, 25, 2, 48, 0, 43, 0, 53, 0, 52, 0, 60, 0, 61, 0, 61, 0, 62, 0, 59, 0, 58, 0, 57, 0, 58, 1, 62, 0, 58, 2, 58, 0, 42, 0, 54, 0, 53, 0, 56, 0, 52, 1, 25, 0, 43, 1, 25, 4, 64, 0, 35, 0, 0, 1, 64, 0, 35, 0, 48, 0, 35, 1, 56, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_hj6up"]
shader = SubResource("VisualShader_872im")
shader_parameter/Noise = ExtResource("8_yirv7")

[sub_resource type="PlaneMesh" id="PlaneMesh_8q6wo"]
material = ExtResource("3_2i3gt")
size = Vector2(10, 10)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_1hy0w"]

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_mml2j"]
default_input_values = [1, Vector2(1, 0.12), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yr21g"]
input_name = "time"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_2ub57"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_cypux"]
default_input_values = [0, 0.0, 1, 0.001]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_ien4t"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="FastNoiseLite" id="FastNoiseLite_osu76"]
noise_type = 0
frequency = 0.0484
offset = Vector3(0, 1, 0)
fractal_type = 0
cellular_jitter = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_jg3gq"]
height = 256
seamless = true
noise = SubResource("FastNoiseLite_osu76")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_teg5d"]
output_port_for_preview = 0
texture = SubResource("NoiseTexture2D_jg3gq")

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_xwsh0"]
default_input_values = [1, Vector2(1, 0.12), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_sj8hh"]
default_input_values = [0, 0.0, 1, -0.001]
operator = 2

[sub_resource type="Gradient" id="Gradient_wtm6t"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_twljs"]
gradient = SubResource("Gradient_wtm6t")
width = 1024
height = 1024
fill_from = Vector2(1, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_e4eng"]
texture = SubResource("GradientTexture2D_twljs")

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_vn0s6"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ugu5g"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_3mghx"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_tn75u"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ui4ge"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_huof0"]
function = 31

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_yfa0f"]
constant = Color(0.00866908, 0.0951614, 0.110476, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_8r1yh"]
noise_type = 0
frequency = 0.126
offset = Vector3(0, 1, 0)
fractal_type = 0
cellular_jitter = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_k2ci1"]
height = 256
seamless = true
noise = SubResource("FastNoiseLite_8r1yh")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_mg2xj"]
output_port_for_preview = 0
texture = SubResource("NoiseTexture2D_k2ci1")

[sub_resource type="VisualShader" id="VisualShader_lo65v"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform sampler2D tex_frg_2;



void fragment() {
// ColorConstant:8
	vec4 n_out8p0 = vec4(0.008669, 0.095161, 0.110476, 1.000000);


// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, UV);


// FloatFunc:7
	float n_out7p0 = 1.0 - n_out2p0.x;


// FloatConstant:4
	float n_out4p0 = 1.000000;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out5p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_out6p0 = step(n_out7p0, n_out5p0);


// Output:0
	ALBEDO = vec3(n_out8p0.xyz);
	ALPHA = n_out6p0;


}
"
flags/unshaded = true
nodes/fragment/0/position = Vector2(660, 320)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_e4eng")
nodes/fragment/2/position = Vector2(-520, 320)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_ugu5g")
nodes/fragment/3/position = Vector2(-1200, 480)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_3mghx")
nodes/fragment/4/position = Vector2(-1200, 340)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_tn75u")
nodes/fragment/5/position = Vector2(-880, 560)
nodes/fragment/5/size = Vector2(724.789, 654.559)
nodes/fragment/5/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/5/output_ports = "0,0,Dither_Node;"
nodes/fragment/5/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_ui4ge")
nodes/fragment/6/position = Vector2(400, 380)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatFunc_huof0")
nodes/fragment/7/position = Vector2(-120, 360)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_yfa0f")
nodes/fragment/8/position = Vector2(380, 60)
nodes/fragment/9/node = SubResource("VisualShaderNodeTexture_mg2xj")
nodes/fragment/9/position = Vector2(-600, -340)
nodes/fragment/10/node = SubResource("VisualShaderNodeMix_1hy0w")
nodes/fragment/10/position = Vector2(209.416, 212.64)
nodes/fragment/11/node = SubResource("VisualShaderNodeUVFunc_mml2j")
nodes/fragment/11/position = Vector2(-980, -260)
nodes/fragment/12/node = SubResource("VisualShaderNodeInput_yr21g")
nodes/fragment/12/position = Vector2(-1940, -260)
nodes/fragment/13/node = SubResource("VisualShaderNodeUVFunc_2ub57")
nodes/fragment/13/position = Vector2(-1320, -240)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatOp_cypux")
nodes/fragment/14/position = Vector2(-1560, -80)
nodes/fragment/15/node = SubResource("VisualShaderNodeVectorOp_ien4t")
nodes/fragment/15/position = Vector2(-360, 80)
nodes/fragment/16/node = SubResource("VisualShaderNodeTexture_teg5d")
nodes/fragment/16/position = Vector2(-826.407, 45.608)
nodes/fragment/17/node = SubResource("VisualShaderNodeUVFunc_xwsh0")
nodes/fragment/17/position = Vector2(-1074.67, 2.29337)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatOp_sj8hh")
nodes/fragment/18/position = Vector2(-1680, 100)
nodes/fragment/20/node = SubResource("VisualShaderNodeUVFunc_vn0s6")
nodes/fragment/20/position = Vector2(-1380, 60)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 1, 4, 0, 5, 0, 2, 0, 7, 0, 8, 0, 0, 0, 11, 0, 9, 0, 6, 0, 0, 1, 13, 0, 11, 0, 12, 0, 14, 0, 14, 0, 13, 2, 17, 0, 16, 0, 16, 0, 15, 1, 9, 0, 15, 0, 15, 0, 10, 0, 18, 0, 20, 2, 20, 0, 17, 0, 12, 0, 18, 0, 5, 0, 6, 1, 7, 0, 10, 2, 7, 0, 6, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_bnpdw"]
render_priority = 0
shader = SubResource("VisualShader_lo65v")

[sub_resource type="PlaneMesh" id="PlaneMesh_llvpy"]
material = SubResource("ShaderMaterial_bnpdw")
size = Vector2(10, 10)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_t8bjj"]
texture = SubResource("NoiseTexture2D_07l1v")

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_1a6dr"]

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_ip5hp"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_78gpm"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_y6yx0"]
default_input_values = [0, 0.0, 1, 0.003]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_ydaey"]
operator = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ywmto"]
width = 1920
height = 1080
seamless = true
noise = SubResource("FastNoiseLite_hexsk")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_161ho"]
texture = SubResource("NoiseTexture2D_ywmto")

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_vg3fx"]
size = Vector2(634.014, 470.339)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_3se3q"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_a3gum"]
default_input_values = [0, 0.0, 1, -0.003]
operator = 2

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_1ba40"]
parameter_name = "Color"
default_value_enabled = true
default_value = Color(0.0535309, 0.241555, 0.259173, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_lws61"]
constant = 0.3

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ev8mi"]
default_input_values = [0, 1.5, 1, 0.0]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_3rqeg"]
parameter_name = "Opacity"
hint = 1
step = 0.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_2fkim"]
constant = 0.275

[sub_resource type="VisualShader" id="VisualShader_kfxnb"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_never, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 Color : source_color = vec4(0.053531, 0.241555, 0.259173, 1.000000);
uniform sampler2D tex_frg_13;
uniform sampler2D tex_frg_19;
uniform float Opacity : hint_range(0, 1) = 1;



void fragment() {
// ColorParameter:22
	vec4 n_out22p0 = Color;


// Input:16
	float n_out16p0 = TIME;


// FloatOp:17
	float n_in17p1 = 0.00300;
	float n_out17p0 = n_out16p0 * n_in17p1;


// UVFunc:15
	vec2 n_in15p1 = vec2(1.00000, 1.00000);
	vec2 n_out15p0 = vec2(n_out17p0) * n_in15p1 + UV;


// Texture2D:13
	vec4 n_out13p0 = texture(tex_frg_13, n_out15p0);


// FloatOp:21
	float n_in21p1 = -0.00300;
	float n_out21p0 = n_out16p0 * n_in21p1;


// UVFunc:20
	vec2 n_in20p1 = vec2(1.00000, 1.00000);
	vec2 n_out20p0 = vec2(n_out21p0) * n_in20p1 + UV;


// Texture2D:19
	vec4 n_out19p0 = texture(tex_frg_19, n_out20p0);


// VectorOp:18
	vec3 n_out18p0 = vec3(n_out13p0.xyz) * vec3(n_out19p0.xyz);


// FloatConstant:6
	float n_out6p0 = 0.275000;


// FloatConstant:3
	float n_out3p0 = 0.300000;


	float n_out2p0;
// Expression:2
	n_out2p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out2p0 = n_out6p0 - DITHER_THRESHOLDS[index];
	}


// Step:4
	float n_out4p0 = step(n_out18p0.x, n_out2p0);


// FloatParameter:5
	float n_out5p0 = Opacity;


// Mix:14
	float n_in14p0 = 0.00000;
	float n_out14p0 = mix(n_in14p0, n_out4p0, n_out5p0);


// Output:0
	ALBEDO = vec3(n_out22p0.xyz);
	ALPHA = n_out14p0;


}
"
modes/depth_draw = 2
flags/unshaded = true
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_vg3fx")
nodes/fragment/2/position = Vector2(-1034.89, 1013.84)
nodes/fragment/2/size = Vector2(634.014, 470.339)
nodes/fragment/2/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/2/output_ports = "0,0,Dither_Node;"
nodes/fragment/2/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_lws61")
nodes/fragment/3/position = Vector2(-1354.89, 1253.84)
nodes/fragment/4/node = SubResource("VisualShaderNodeStep_ev8mi")
nodes/fragment/4/position = Vector2(-354.891, 653.84)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_3rqeg")
nodes/fragment/5/position = Vector2(-600, 240)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatConstant_2fkim")
nodes/fragment/6/position = Vector2(-1414.89, 1173.84)
nodes/fragment/13/node = SubResource("VisualShaderNodeTexture_t8bjj")
nodes/fragment/13/position = Vector2(-1660, 360)
nodes/fragment/14/node = SubResource("VisualShaderNodeMix_1a6dr")
nodes/fragment/14/position = Vector2(-159.671, 433.273)
nodes/fragment/15/node = SubResource("VisualShaderNodeUVFunc_ip5hp")
nodes/fragment/15/position = Vector2(-2060, 460)
nodes/fragment/16/node = SubResource("VisualShaderNodeInput_78gpm")
nodes/fragment/16/position = Vector2(-2680, 460)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatOp_y6yx0")
nodes/fragment/17/position = Vector2(-2300, 580)
nodes/fragment/18/node = SubResource("VisualShaderNodeVectorOp_ydaey")
nodes/fragment/18/position = Vector2(-1320, 600)
nodes/fragment/19/node = SubResource("VisualShaderNodeTexture_161ho")
nodes/fragment/19/position = Vector2(-1620, 660)
nodes/fragment/20/node = SubResource("VisualShaderNodeUVFunc_3se3q")
nodes/fragment/20/position = Vector2(-2000, 700)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatOp_a3gum")
nodes/fragment/21/position = Vector2(-2320, 760)
nodes/fragment/22/node = SubResource("VisualShaderNodeColorParameter_1ba40")
nodes/fragment/22/position = Vector2(0, 120)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 1, 3, 0, 2, 1, 6, 0, 2, 0, 5, 0, 14, 2, 15, 0, 13, 0, 16, 0, 17, 0, 17, 0, 15, 2, 19, 0, 18, 1, 20, 0, 19, 0, 21, 0, 20, 2, 16, 0, 21, 0, 22, 0, 0, 0, 4, 0, 14, 1, 14, 0, 0, 1, 13, 0, 18, 0, 18, 0, 4, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3o0cb"]
render_priority = 0
shader = SubResource("VisualShader_kfxnb")
shader_parameter/Color = Color(0.054902, 0.243137, 0.258824, 1)
shader_parameter/Opacity = 0.155

[sub_resource type="QuadMesh" id="QuadMesh_1p0di"]
material = SubResource("ShaderMaterial_3o0cb")

[sub_resource type="BoxShape3D" id="BoxShape3D_qfjre"]
size = Vector3(2.03379, 0.029557, 10.4284)

[sub_resource type="GDScript" id="GDScript_2wlt5"]
script/source = "extends Area3D

@onready var Camera = $\"../CAM_RAYCAST\"

func _ready():
	_global_datas.get_raycastPosition.connect(MouseRaycast)

func MouseRaycast():
	
	if _global_datas.Player_lock_click:
		return
		
	var mousePos = get_viewport().get_mouse_position()
	var rayLengh = 1000.0
	var from = Camera.project_ray_origin(mousePos)
	var to = from + Camera.project_ray_normal(mousePos) * rayLengh
	var space = get_world_3d().direct_space_state
	var rayQuery = PhysicsRayQueryParameters3D.new()
	rayQuery.from = from
	rayQuery.to = to
	rayQuery.collide_with_areas = true
	rayQuery.collide_with_bodies = false

	var result = space.intersect_ray(rayQuery)

	_global_datas.mouseRaycastPosition = Vector3(result.position.x,result.position.y,0.0)
	
	
"

[sub_resource type="BoxShape3D" id="BoxShape3D_yhyn7"]
size = Vector3(262.786, 91.2802, 0.0376734)

[sub_resource type="GDScript" id="GDScript_qqsny"]
script/source = "extends Node
@onready var photo_circle = $\"../Photo_circle\"

@onready var material : Material = photo_circle.get_material()
@onready var switch_mirror_fx = $\"..\"

var t
var is_round = true
func _ready():
	_global_datas.active_mirror_switch.connect(_start_effect)
	
func _start_effect(condition):
	
	photo_circle.visible = true
	is_round = !is_round
	material.set_shader_parameter(\"Round_noise\",is_round)
	
	var n_position = get_viewport().get_mouse_position()
	
	switch_mirror_fx.position = n_position
	
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(set_shader_value,0.0,1.0,0.5).set_trans(Tween.TRANS_SINE)


func set_shader_value(value):
	material.set_shader_parameter(\"Circle\",value)


"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ehfhp"]
default_input_values = [0, 0.0, 1, 1.215]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_fo5m4"]
default_input_values = [0, 0.0, 1, 1.96, 2, 0.775]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_8gnpb"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_a7gyj"]
constant = 0.942

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_hvb24"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_mw3y1"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2047n"]
parameter_name = "Circle"
default_value_enabled = true
default_value = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_30m51"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_6bxo5"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_j5uf6"]
source = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_iygfe"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_vahx7"]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_hpn74"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_dpkp8"]
parameter_name = "Round_noise"
default_value_enabled = true

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_xb43v"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_51n80"]
constant = 0.233

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_4iw3i"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_5m4po"]
function = 31

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_ns4hw"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_35qsd"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_7eox5"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShader" id="VisualShader_ic5q5"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform bool Round_noise = false;
uniform sampler2D Noise : repeat_enable;
uniform float Circle = 0.40000000596046;



void fragment() {
// BooleanParameter:26
	bool n_out26p0 = Round_noise;


// UVFunc:25
	vec2 n_in25p1 = vec2(1.00000, 0.50000);
	vec2 n_in25p2 = vec2(0.00000, 0.00000);
	vec2 n_out25p0 = (UV - n_in25p2) * n_in25p1 + n_in25p2;


// FloatConstant:23
	float n_out23p0 = 5.000000;


// UVFunc:24
	vec2 n_in24p2 = vec2(0.00000, 0.00000);
	vec2 n_out24p0 = (n_out25p0 - n_in24p2) * vec2(n_out23p0) + n_in24p2;


	vec4 n_out22p0;
// Texture2D:22
	n_out22p0 = texture(Noise, n_out24p0);


// FloatConstant:13
	float n_out13p0 = 0.942000;


// FloatConstant:12
	float n_out12p0 = 0.400000;


	float n_out14p0;
// Expression:14
	n_out14p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out12p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out14p0 = n_out13p0 - DITHER_THRESHOLDS[index];
	}


	float n_out27p0;
// Switch:27
	n_out27p0 = mix(n_out14p0, n_out22p0.x, float(n_out26p0));


// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatParameter:17
	float n_out17p0 = Circle;


// FloatConstant:3
	float n_out3p0 = 0.233000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out17p0,n_out17p0 + n_out3p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:5
	float n_out5p0 = 1.0 - n_out2p0.x;


// FloatOp:10
	float n_in10p1 = 1.21500;
	float n_out10p0 = n_out17p0 * n_in10p1;


	vec4 n_out9p0;
// Expression:9
	n_out9p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out10p0,n_out10p0 + n_out3p0,d);
		n_out9p0 = vec4(vec3(c),1.0);
	}


// Mix:11
	float n_in11p0 = 0.00000;
	float n_out11p0 = mix(n_in11p0, n_out5p0, n_out9p0.x);


// Step:15
	float n_out15p0 = step(n_out27p0, n_out11p0);


// Output:0
	COLOR.a = n_out15p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1240, 520)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_30m51")
nodes/fragment/2/position = Vector2(-540, 20)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_51n80")
nodes/fragment/3/position = Vector2(-820, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_4iw3i")
nodes/fragment/4/position = Vector2(-2300, -60)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatFunc_5m4po")
nodes/fragment/5/position = Vector2(60, 40)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_ns4hw")
nodes/fragment/6/position = Vector2(-1960, -120)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_35qsd")
nodes/fragment/7/position = Vector2(-1720, -120)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_7eox5")
nodes/fragment/9/position = Vector2(-655.858, 530.852)
nodes/fragment/9/size = Vector2(513.781, 284.487)
nodes/fragment/9/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/9/output_ports = "0,5,color;"
nodes/fragment/9/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatOp_ehfhp")
nodes/fragment/10/position = Vector2(-1160, 640)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_fo5m4")
nodes/fragment/11/position = Vector2(460, 580)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_8gnpb")
nodes/fragment/12/position = Vector2(-140, 1600)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_a7gyj")
nodes/fragment/13/position = Vector2(-140, 1460)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_hvb24")
nodes/fragment/14/position = Vector2(360, 1220)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_mw3y1")
nodes/fragment/15/position = Vector2(880, 780)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_2047n")
nodes/fragment/17/position = Vector2(-1809.95, 419.028)
nodes/fragment/21/node = SubResource("VisualShaderNodeTexture2DParameter_6bxo5")
nodes/fragment/21/position = Vector2(-940, 1500)
nodes/fragment/22/node = SubResource("VisualShaderNodeTexture_j5uf6")
nodes/fragment/22/position = Vector2(-680, 1280)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatConstant_iygfe")
nodes/fragment/23/position = Vector2(-1780, 1480)
nodes/fragment/24/node = SubResource("VisualShaderNodeUVFunc_vahx7")
nodes/fragment/24/position = Vector2(-1280, 1400)
nodes/fragment/25/node = SubResource("VisualShaderNodeUVFunc_hpn74")
nodes/fragment/25/position = Vector2(-1600, 1280)
nodes/fragment/26/node = SubResource("VisualShaderNodeBooleanParameter_dpkp8")
nodes/fragment/26/position = Vector2(-40, 960)
nodes/fragment/27/node = SubResource("VisualShaderNodeSwitch_xb43v")
nodes/fragment/27/position = Vector2(520, 980)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 2, 0, 5, 0, 4, 0, 6, 0, 6, 0, 7, 0, 7, 0, 2, 0, 7, 0, 9, 0, 3, 0, 9, 2, 10, 0, 9, 1, 9, 0, 11, 2, 5, 0, 11, 1, 12, 0, 14, 1, 13, 0, 14, 0, 11, 0, 15, 1, 15, 0, 0, 1, 17, 0, 2, 1, 17, 0, 10, 0, 21, 0, 22, 2, 25, 0, 24, 0, 23, 0, 24, 1, 24, 0, 22, 0, 26, 0, 27, 0, 22, 0, 27, 1, 14, 0, 27, 2, 27, 0, 15, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_77tah"]
shader = SubResource("VisualShader_ic5q5")
shader_parameter/Round_noise = false
shader_parameter/Circle = 0.0
shader_parameter/Noise = ExtResource("8_yirv7")

[sub_resource type="GDScript" id="GDScript_kuj3q"]
script/source = "extends Node

@onready var can_click_here_root = $Can_click_here_root
var _is_active : bool = false

func _ready():

	can_click_here_root.visible = false
	
	_global_datas._go_Subscene.connect(func active():
		_is_active = true	
		can_click_here_root.visible = true	
	)	
	
	_global_datas._backFrom_subscene.connect(func disable():
		_is_active = false		
		can_click_here_root.visible = false		
	)
	
func _process(delta):
	
	if !_is_active:
		return	
	
	var mouse_position = get_viewport().get_mouse_position()
	can_click_here_root.position = mouse_position
	
"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_fpjc8"]
default_input_values = [0, 0.0, 1, 0.89]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_v8027"]
default_input_values = [0, 0.0, 1, 1.96, 2, 0.775]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_w15e3"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_tke2q"]
constant = 1.858

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_eipcn"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_nr06o"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_e1i3h"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_cxh08"]
parameter_name = "Circle"
default_value_enabled = true
default_value = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_33is6"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_jxr4d"]
constant = 0.001

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_4v1ok"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_f2g1v"]
function = 31

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_g38ss"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_m3rqe"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_lhffk"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShader" id="VisualShader_miruf"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Circle = 0.40000000596046;



void fragment() {
// FloatConstant:13
	float n_out13p0 = 1.858000;


// FloatConstant:12
	float n_out12p0 = 0.400000;


	float n_out14p0;
// Expression:14
	n_out14p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out12p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out14p0 = n_out13p0 - DITHER_THRESHOLDS[index];
	}


// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatParameter:17
	float n_out17p0 = Circle;


// FloatConstant:3
	float n_out3p0 = 0.001000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out17p0,n_out17p0 + n_out3p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:5
	float n_out5p0 = 1.0 - n_out2p0.x;


// FloatOp:10
	float n_in10p1 = 0.89000;
	float n_out10p0 = n_out17p0 * n_in10p1;


	vec4 n_out9p0;
// Expression:9
	n_out9p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out10p0,n_out10p0 + n_out3p0,d);
		n_out9p0 = vec4(vec3(c),1.0);
	}


// Mix:11
	float n_in11p0 = 0.00000;
	float n_out11p0 = mix(n_in11p0, n_out5p0, n_out9p0.x);


// Step:15
	float n_out15p0 = step(n_out14p0, n_out11p0);


// Output:0
	COLOR.a = n_out15p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1240, 520)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_33is6")
nodes/fragment/2/position = Vector2(-540, 20)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_jxr4d")
nodes/fragment/3/position = Vector2(-820, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_4v1ok")
nodes/fragment/4/position = Vector2(-2300, -60)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatFunc_f2g1v")
nodes/fragment/5/position = Vector2(60, 40)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_g38ss")
nodes/fragment/6/position = Vector2(-1960, -120)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_m3rqe")
nodes/fragment/7/position = Vector2(-1720, -120)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_lhffk")
nodes/fragment/9/position = Vector2(-655.858, 530.852)
nodes/fragment/9/size = Vector2(513.781, 284.487)
nodes/fragment/9/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/9/output_ports = "0,5,color;"
nodes/fragment/9/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatOp_fpjc8")
nodes/fragment/10/position = Vector2(-1160, 640)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_v8027")
nodes/fragment/11/position = Vector2(460, 580)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_w15e3")
nodes/fragment/12/position = Vector2(-260, 1180)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_tke2q")
nodes/fragment/13/position = Vector2(-260, 1040)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_eipcn")
nodes/fragment/14/position = Vector2(40, 1160)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_nr06o")
nodes/fragment/15/position = Vector2(880, 780)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatConstant_e1i3h")
nodes/fragment/16/position = Vector2(-1660, 280)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_cxh08")
nodes/fragment/17/position = Vector2(-1809.95, 419.028)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 2, 0, 5, 0, 4, 0, 6, 0, 6, 0, 7, 0, 7, 0, 2, 0, 7, 0, 9, 0, 3, 0, 9, 2, 10, 0, 9, 1, 9, 0, 11, 2, 5, 0, 11, 1, 12, 0, 14, 1, 13, 0, 14, 0, 11, 0, 15, 1, 14, 0, 15, 0, 15, 0, 0, 1, 17, 0, 2, 1, 17, 0, 10, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8m0bu"]
shader = SubResource("VisualShader_miruf")
shader_parameter/Circle = 0.05

[sub_resource type="GDScript" id="GDScript_03ue1"]
script/source = "extends Node

@onready var backdrop = $Backdrop
@onready var material : Material = backdrop .get_material()


var t

func _ready():
	_global_datas.book_is_open.connect(check_condition)



func check_condition(condition : bool):
	
	if !_global_datas.Player_InSubScene:
		return
		
	if !condition:
		_fade_in()
	else:
		_fade_out()
	
func _fade_in():

	
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(set_shader_value,0.75,0.0,1.0).set_trans(Tween.TRANS_SINE)

func _fade_out():
	
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(set_shader_value,0.0,0.75,1.0).set_trans(Tween.TRANS_SINE)	


func set_shader_value(value):
	material.set_shader_parameter(\"Opacity\",value)
"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7nslp"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_0ooyc"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_xikr4"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_2yh42"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_qpvgs"]
constant = 1.372

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_25rqf"]
constant = 0.406

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_gafsx"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_3q4xu"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_hokwf"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_3ht57"]
parameter_name = "Opacity"
default_value_enabled = true

[sub_resource type="VisualShader" id="VisualShader_x0sux"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity = 0;



void fragment() {
// FloatParameter:9
	float n_out9p0 = Opacity;


// FloatConstant:2
	float n_out2p0 = 0.400000;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out2p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out9p0 - DITHER_THRESHOLDS[index];
	}


// Step:5
	float n_in5p0 = 0.00000;
	float n_out5p0 = step(n_in5p0, n_out4p0);


// Output:0
	COLOR.a = n_out5p0;


}
"
graph_offset = Vector2(-1245.45, -17.1)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_gafsx")
nodes/fragment/2/position = Vector2(-1600, 600)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_3q4xu")
nodes/fragment/4/position = Vector2(-1300, 500)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeStep_hokwf")
nodes/fragment/5/position = Vector2(-180, 240)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_3ht57")
nodes/fragment/9/position = Vector2(-1980, 380)
nodes/fragment/10/node = SubResource("VisualShaderNodeInput_7nslp")
nodes/fragment/10/position = Vector2(-2820, -140)
nodes/fragment/11/node = SubResource("VisualShaderNodeUVFunc_0ooyc")
nodes/fragment/11/position = Vector2(-2480, -200)
nodes/fragment/12/node = SubResource("VisualShaderNodeUVFunc_xikr4")
nodes/fragment/12/position = Vector2(-2240, -200)
nodes/fragment/13/node = SubResource("VisualShaderNodeExpression_2yh42")
nodes/fragment/13/position = Vector2(-1980, 20)
nodes/fragment/13/size = Vector2(513.781, 284.487)
nodes/fragment/13/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/13/output_ports = "0,5,color;"
nodes/fragment/13/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatConstant_qpvgs")
nodes/fragment/14/position = Vector2(-2520, 260)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatConstant_25rqf")
nodes/fragment/15/position = Vector2(-2460, 40)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 1, 4, 0, 5, 1, 5, 0, 0, 1, 9, 0, 4, 0, 10, 0, 11, 0, 11, 0, 12, 0, 14, 0, 13, 2, 12, 0, 13, 0, 15, 0, 13, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8wovr"]
shader = SubResource("VisualShader_x0sux")
shader_parameter/Opacity = 0.0

[node name="03_SUBSCENES" type="Node"]
script = ExtResource("1_7uoo0")
metadata/_edit_vertical_guides_ = [960.0]
metadata/_edit_horizontal_guides_ = [540.0]

[node name="FADE" type="Node" parent="."]
script = SubResource("GDScript_yjydq")

[node name="GO_SURFACE" type="Node" parent="."]
script = SubResource("GDScript_71vlv")

[node name="OXYGENE_MANAGER" type="Node" parent="."]
script = SubResource("GDScript_5v5p0")

[node name="MIRROR_switch" type="Node" parent="."]
script = SubResource("GDScript_opp2i")

[node name="Scanner_opacity" type="Node" parent="MIRROR_switch"]
script = SubResource("GDScript_sav8t")

[node name="CAM_RAYCAST" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 2)
visible = false
cull_mask = 0
script = SubResource("GDScript_5new5")

[node name="SUBSCENES_CAM_SCENE" type="SubViewportContainer" parent="."]
visible = false
material = SubResource("ShaderMaterial_tsr6x")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="SUBSCENES_CAM_SCENE"]
handle_input_locally = false
size = Vector2i(1280, 720)
render_target_update_mode = 0

[node name="CAM_STATE_BOAT_root" type="Node3D" parent="SUBSCENES_CAM_SCENE/SubViewport" node_paths=PackedStringArray("Player_position")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 1.8)
script = ExtResource("3_jsuc6")
Player_position = NodePath("../../../Player_Sub")
basePos = Vector3(0, 0.6, 2.7)

[node name="CAM_STATE_BOAT" type="Camera3D" parent="SUBSCENES_CAM_SCENE/SubViewport/CAM_STATE_BOAT_root"]
cull_mask = 4

[node name="SUBSCENES_CAM_SCANNER" type="SubViewportContainer" parent="."]
visible = false
material = SubResource("ShaderMaterial_byemk")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
stretch = true
script = SubResource("GDScript_6jk87")

[node name="SubViewport" type="SubViewport" parent="SUBSCENES_CAM_SCANNER"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(1280, 720)
render_target_update_mode = 0

[node name="CAM_STATE_BOAT_root" type="Node3D" parent="SUBSCENES_CAM_SCANNER/SubViewport" node_paths=PackedStringArray("Player_position")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 1.8)
script = ExtResource("3_jsuc6")
Player_position = NodePath("../../../Player_Sub")
basePos = Vector3(0, 0.6, 2.7)

[node name="CAM_STATE_BOAT" type="Camera3D" parent="SUBSCENES_CAM_SCANNER/SubViewport/CAM_STATE_BOAT_root"]
cull_mask = 4

[node name="SUBSCENES_CAM_SCANNER_X" type="SubViewportContainer" parent="."]
visible = false
material = SubResource("ShaderMaterial_hj6up")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="SUBSCENES_CAM_SCANNER_X"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(1280, 720)
render_target_update_mode = 0

[node name="CAM_STATE_BOAT_root" type="Node3D" parent="SUBSCENES_CAM_SCANNER_X/SubViewport" node_paths=PackedStringArray("Player_position")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 1.8)
script = ExtResource("3_jsuc6")
Player_position = NodePath("../../../Player_Sub")
basePos = Vector3(0, 0.6, 2.7)

[node name="CAM_STATE_BOAT" type="Camera3D" parent="SUBSCENES_CAM_SCANNER_X/SubViewport/CAM_STATE_BOAT_root"]
cull_mask = 4096

[node name="Player_Sub" parent="." instance=ExtResource("2_ri8q1")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.334, 0)
mass = 5.0
linear_damp = 1.0
angular_damp = 2.5
move_speed = 4.0
maxSpeed = 2.0

[node name="Node3D" type="Node3D" parent="Player_Sub"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.305621, -0.116106)

[node name="SubScene_back" type="MeshInstance3D" parent="."]
transform = Transform3D(28.5013, 0, 0, 0, 2.38419e-07, -9.55943, 0, 7.74673, 2.94208e-07, 0, -0.6344, -7.22179)
layers = 4
mesh = SubResource("PlaneMesh_8q6wo")

[node name="WATER_SURFACE" type="MeshInstance3D" parent="."]
transform = Transform3D(11.2155, 0, 0, 0, -7.74673, 4.39024e-08, 0, -6.77241e-07, -0.502185, 0, 0.964028, -0.773959)
layers = 4
mesh = SubResource("PlaneMesh_llvpy")

[node name="WATER_SURFACE2" type="MeshInstance3D" parent="."]
transform = Transform3D(11.2155, 0, 0, 0, -7.74673, 4.39024e-08, 0, -6.77241e-07, -0.502185, 0, 1.191, -0.773959)
layers = 4
mesh = SubResource("PlaneMesh_llvpy")

[node name="WATER_SURFACE3" type="MeshInstance3D" parent="."]
transform = Transform3D(11.2155, 0, 0, 0, -7.74673, 4.39024e-08, 0, -6.77241e-07, -0.502185, 0, 1.38863, -0.773959)
layers = 4
mesh = SubResource("PlaneMesh_llvpy")

[node name="Water_noise" type="MeshInstance3D" parent="."]
transform = Transform3D(24.656, 0, 0, 0, 16.12, 0, 0, 0, 0.986, 0, -6.818, 1)
layers = 4
mesh = SubResource("QuadMesh_1p0di")
skeleton = NodePath("../SUBSCENES_CAM_SCENE/SubViewport/CAM_STATE_BOAT_root/CAM_STATE_BOAT")

[node name="Surface_trigger" type="Area3D" parent="."]
transform = Transform3D(11.2155, 0, 0, 0, -7.74673, 4.39024e-08, 0, -6.77241e-07, -0.502185, 0, 1.0465, -0.242)
collision_priority = 0.0
input_ray_pickable = false

[node name="CollisionShape3D" type="CollisionShape3D" parent="Surface_trigger"]
shape = SubResource("BoxShape3D_qfjre")

[node name="LoadScene" type="Node" parent="."]

[node name="A1" parent="LoadScene" instance=ExtResource("5_0e8gc")]

[node name="MOUSE_RAYCAST" type="Area3D" parent="."]
collision_layer = 0
collision_mask = 8
script = SubResource("GDScript_2wlt5")

[node name="CollisionShape3D" type="CollisionShape3D" parent="MOUSE_RAYCAST"]
shape = SubResource("BoxShape3D_yhyn7")

[node name="SWITCH_MIRROR_FX" type="Node2D" parent="."]

[node name="Switch_effect" type="Node" parent="SWITCH_MIRROR_FX"]
script = SubResource("GDScript_qqsny")

[node name="Photo_circle" type="ColorRect" parent="SWITCH_MIRROR_FX"]
material = SubResource("ShaderMaterial_77tah")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -943.0
offset_top = -556.0
offset_right = 977.0
offset_bottom = 524.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.988235, 0.901961, 0.694118, 1)

[node name="Can_clic_here_behaviour" type="Node" parent="."]
script = SubResource("GDScript_kuj3q")

[node name="Can_click_here_root" type="Node2D" parent="Can_clic_here_behaviour"]
position = Vector2(960, 540)

[node name="Can_click_here" type="ColorRect" parent="Can_clic_here_behaviour/Can_click_here_root"]
material = SubResource("ShaderMaterial_8m0bu")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -540.0
offset_right = 960.0
offset_bottom = 540.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.988235, 0.901961, 0.694118, 1)

[node name="Book_Open_backdrop" type="Node" parent="."]
script = SubResource("GDScript_03ue1")

[node name="Backdrop" type="ColorRect" parent="Book_Open_backdrop"]
material = SubResource("ShaderMaterial_8wovr")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -4.0
offset_top = -1.0
offset_right = -4.0
offset_bottom = -1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.0156863, 0.0705882, 0.0823529, 1)
metadata/_edit_use_anchors_ = true

[connection signal="area_shape_entered" from="Surface_trigger" to="GO_SURFACE" method="_on_surface_trigger_area_shape_entered"]
