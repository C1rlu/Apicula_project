[gd_scene load_steps=86 format=3 uid="uid://nigmie4bbn6"]

[ext_resource type="Script" path="res://08_SUBSCENES/Grid_scene/Subscene_loader.gd" id="1_7uoo0"]
[ext_resource type="Script" path="res://13_TOOLS_UI/set_Resolution_viewports.gd" id="2_3srhu"]
[ext_resource type="PackedScene" uid="uid://g7u8o55jrnyy" path="res://08_SUBSCENES/Player_subscene/Player_sub.tscn" id="2_ri8q1"]
[ext_resource type="Script" path="res://03_CAMERA/CameraFollow_subscene.gd" id="2_tc6o2"]
[ext_resource type="Material" uid="uid://cf6ce8cjrx4es" path="res://05_SHADER_TEST/Subscene_materials/Subscene_basic_mat.tres" id="3_2i3gt"]
[ext_resource type="Material" uid="uid://b1iqs8p4it3ni" path="res://05_SHADER_TEST/Full_screen/Subscene_screen/Scanner_subscene_dither.tres" id="3_rto3a"]
[ext_resource type="Material" uid="uid://dbu2q4lhlk8w5" path="res://05_SHADER_TEST/Full_screen/Subscene_screen/Main_subscene_dither.tres" id="3_w42nb"]
[ext_resource type="Material" uid="uid://b7ffjkgpmtkc6" path="res://05_SHADER_TEST/Full_screen/Subscene_screen/Scanner_x_subscene_dither.tres" id="4_bkck3"]
[ext_resource type="Texture2D" uid="uid://dafg2qvpi6wmk" path="res://06_UI/Loader_circle/Loader_circle.png" id="7_h5t4r"]
[ext_resource type="Texture2D" uid="uid://d31xi5f7tan5w" path="res://05_SHADER_TEST/Full_screen/Dither_pattners/Blue_noise/HDR_LA_7.png" id="8_yirv7"]

[sub_resource type="GDScript" id="GDScript_btuws"]
script/source = "extends Node

@onready var subscenes_cam_scene = $\"../Viewport/Main\"
@onready var timer = $Timer

@onready var material : Material = subscenes_cam_scene.get_material()
@onready var subscenes_cam_scanner = $\"../Viewport/Scanner\"
@onready var subscenes_cam_scanner_x = $\"../Viewport/Scanner_x\"

func _ready():
	_global_datas._go_Subscene.connect(_fade_in)
	
func _fade_in():
	subscenes_cam_scene.visible = true
	subscenes_cam_scanner.visible = true
	subscenes_cam_scanner_x.visible = true
	timer.start()
	

func _process(delta):
	

	if timer.is_stopped():
		return
		
	var lerp_time = lerp(0.0,1.0, timer.time_left / timer.wait_time)	
	material.set_shader_parameter(\"Opacity\",lerp_time)	


func _on_timer_timeout():
	timer.stop()
	
"

[sub_resource type="GDScript" id="GDScript_4qsuv"]
script/source = "extends Node

@onready var subscenes_cam_scene = $\"../Viewport/Main\"
@onready var timer = $Timer

@onready var material : Material = subscenes_cam_scene.get_material()
@onready var subscenes_cam_scanner = $\"../Viewport/Scanner\"
@onready var subscenes_cam_scanner_x = $\"../Viewport/Scanner_x\"
func _ready():
	_global_datas._go_Mainscene.connect(_fade_out)
	
func _fade_out():
	timer.start()
	subscenes_cam_scanner.visible = false
	subscenes_cam_scanner_x.visible = false

func _process(delta):
	
	if timer.is_stopped():
		return
		
	var lerp_time = lerp(1.0,0.0, timer.time_left / timer.wait_time)	
	material.set_shader_parameter(\"Opacity\",lerp_time)	


func _on_timer_timeout():
	timer.stop()
	subscenes_cam_scene.visible = false
	
"

[sub_resource type="GDScript" id="GDScript_71vlv"]
script/source = "extends Node


var active = false


func _ready():
	_global_datas._end_ini_subscene.connect(is_active)
	_global_datas._go_Mainscene.connect(disable)
	_global_datas.active_mirror_switch.connect(in_mirror)
	
	
	
func in_mirror(condition : bool):
	active = !condition
func is_active():
	active = true

func disable():
	active = false

func _on_surface_trigger_area_shape_entered(area_rid, area, area_shape_index, local_shape_index):
	if !active:
		return
	_global_datas._go_Mainscene.emit()
	_global_datas._backFrom_subscene.emit()
"

[sub_resource type="GDScript" id="GDScript_opp2i"]
script/source = "extends Node
@onready var circle_progress = $\"../SWITCH_MIRROR_FX/Photo_circle_progress\"

@onready var mat_photo_circle_progress : Material = circle_progress.get_material()
@onready var switch_effect = $\"../SWITCH_MIRROR_FX/Switch_effect\"


var t

func _input(event):
	
	if event.is_action_pressed(\"Open_portail\"):
		_mirror_switch(true)	
		
	if event.is_action_released(\"Open_portail\"):
		_mirror_switch(false)		
		
func _mirror_switch(condition : bool):
		
	if t:
		t.kill()

	if condition :
		t = create_tween()
		t .tween_method(_set_progress,0.5,0.0,0.5)
		t.connect(\"finished\",_progress_done)
		
	circle_progress.visible = condition
func _set_progress(value : float):
	
	mat_photo_circle_progress.set_shader_parameter(\"Circle\",value)	
	switch_effect._center_to_player()
	
func _progress_done():
	
	_global_datas.Player_InMirrorScene =!_global_datas.Player_InMirrorScene
	
	_global_datas._click_mirror_switch.emit(_global_datas.Player_InMirrorScene)
	
"

[sub_resource type="GDScript" id="GDScript_m1p72"]
script/source = "extends Node


var t
@onready var scanner_only = $\"../../Viewport/SCANNER_ONLY\"

func _ready():
	_global_datas._go_Subscene.connect(_disable)
	_global_datas._go_Mainscene.connect(_disable)
	_global_datas._backFrom_subscene.connect(_disable)
	_global_datas._click_mirror_switch.connect(_switch_mirror)


			
func _switch_mirror(condition : bool):
	
	
	if _global_datas.in_scanner_mode:
		return
	if !_global_datas.Player_InSubScene:
		return
	
	_mirror_switch(condition)
	_global_datas.active_mirror_switch.emit(condition )

func _disable():
	_mirror_switch(false)
	
func _mirror_switch(condition : bool):
		
	if t:
		t.kill()

	if !condition :
		t = create_tween()
		t .tween_method(_set_scanner_opacity_value,1.0,0.0,0.25).set_trans(Tween.TRANS_SINE)
	
	else:
	
		t = create_tween()	
		t .tween_method(_set_scanner_opacity_value,0.0,1.0,0.25).set_trans(Tween.TRANS_SINE)
		
		
	#scanner_only.visible = condition
	
func _set_scanner_opacity_value( value : float):
	
	_global_datas.scanner_mat.set_shader_parameter(\"Circle\",value)	
	RenderingServer.global_shader_parameter_set(\"Subscene_mirror_alpha\",value)	
"

[sub_resource type="GDScript" id="GDScript_nvaxv"]
script/source = "extends Node
@onready var subscenes_cam_scanner_x = $\"../Viewport/Scanner_x\"
@onready var material : Material = subscenes_cam_scanner_x.get_material()

var t

func _ready():
	
	_global_datas._take_photo.connect(_flash_mirror)

func _flash_mirror():


	if t:
		t.kill()
	t = create_tween()
	t .tween_method(_set_opacity_value,0.01,0.35,4.0)
	
	
func _set_opacity_value( value : float):

	material.set_shader_parameter(\"Opacity\",value)	


"

[sub_resource type="GDScript" id="GDScript_wjnt5"]
script/source = "extends Node

@export var Timer_second : float = 20.0
@onready var go_subscene_progress = $\"../Viewport/Go_subscene_progress\"

var _active = false

func _ready():
	pass
	#_global_datas._end_ini_subscene.connect(_start_clock)
	#_global_datas._backFrom_subscene.connect(_stop_clock)
	
func _process(delta):
	
	if !_active:
		return
	_update_clock(delta)

func _update_clock(delta):

	_global_datas.clock_time_consume -= 1 * delta
	
	var timeConvert = (_global_datas.clock_time_consume  / Timer_second ) 
	go_subscene_progress.value = lerp(0.0,100.0,timeConvert)
	
	if _global_datas.clock_time_consume <= 0.0:
		_global_datas._go_Mainscene.emit()
		_global_datas._subscene_fail.emit()
		_global_datas._backFrom_subscene.emit()	
			

	
func _start_clock():
	_global_datas.clock_time_consume = Timer_second
	_active = true
	go_subscene_progress.visible = true
func _stop_clock():
	_active = false
	go_subscene_progress.value = 0.0
	go_subscene_progress.visible = false
"

[sub_resource type="ViewportTexture" id="ViewportTexture_gasoh"]
viewport_path = NodePath("Viewport/Main_SubViewport")

[sub_resource type="ViewportTexture" id="ViewportTexture_6enrc"]
viewport_path = NodePath("Viewport/Scanner_SubViewport")

[sub_resource type="GDScript" id="GDScript_k733y"]
script/source = "extends TextureRect


func _ready():
	_global_datas.scanner_mat = get_material()
	
"

[sub_resource type="ViewportTexture" id="ViewportTexture_dqppn"]
viewport_path = NodePath("Viewport/Scanner_x_SubViewport")

[sub_resource type="GDScript" id="GDScript_pi1q7"]
script/source = "extends TextureProgressBar


var active : bool = false
@export var pos_offset : Vector2
func _ready():
	_global_datas._go_Subscene.connect(is_active)
	_global_datas._backFrom_subscene.connect(is_disable)
	
func is_active():
	active = true	
func is_disable():
	active = false	

func _process(delta):
	
	if !active:
		return	

	var player_sub_pos = _global_datas.subbscene_playerPosition
	var cam = _global_datas.Subscene_Camera
		
	var p_position = cam.unproject_position(player_sub_pos)
	position = p_position + pos_offset
"

[sub_resource type="GDScript" id="GDScript_5new5"]
script/source = "extends Camera3D

func _ready():
	_global_datas.Subscene_Camera = self
"

[sub_resource type="PlaneMesh" id="PlaneMesh_8q6wo"]
material = ExtResource("3_2i3gt")
size = Vector2(10, 10)

[sub_resource type="Gradient" id="Gradient_wtm6t"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_twljs"]
gradient = SubResource("Gradient_wtm6t")
width = 1024
height = 1024
fill_from = Vector2(1, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_3d0nm"]
texture = SubResource("GradientTexture2D_twljs")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_3xk21"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_tryc5"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_dv13s"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_cil7a"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_ydhyw"]
function = 31

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_lfhds"]
constant = Color(0.00866908, 0.0951614, 0.110476, 1)

[sub_resource type="VisualShader" id="VisualShader_iok4r"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform sampler2D tex_frg_2;



void fragment() {
// ColorConstant:8
	vec4 n_out8p0 = vec4(0.008669, 0.095161, 0.110476, 1.000000);


// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, UV);


// FloatFunc:7
	float n_out7p0 = 1.0 - n_out2p0.x;


// FloatConstant:4
	float n_out4p0 = 1.000000;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out5p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_out6p0 = step(n_out7p0, n_out5p0);


// Output:0
	ALBEDO = vec3(n_out8p0.xyz);
	ALPHA = n_out6p0;


}
"
graph_offset = Vector2(-627.258, -1.29793)
flags/unshaded = true
nodes/fragment/0/position = Vector2(660, 320)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_3d0nm")
nodes/fragment/2/position = Vector2(-340, 220)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_3xk21")
nodes/fragment/3/position = Vector2(-1200, 480)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_tryc5")
nodes/fragment/4/position = Vector2(-1200, 340)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_dv13s")
nodes/fragment/5/position = Vector2(-880, 560)
nodes/fragment/5/size = Vector2(724.789, 654.559)
nodes/fragment/5/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/5/output_ports = "0,0,Dither_Node;"
nodes/fragment/5/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_cil7a")
nodes/fragment/6/position = Vector2(400, 380)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatFunc_ydhyw")
nodes/fragment/7/position = Vector2(60, 260)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_lfhds")
nodes/fragment/8/position = Vector2(380, 60)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 1, 4, 0, 5, 0, 2, 0, 7, 0, 8, 0, 0, 0, 5, 0, 6, 1, 7, 0, 6, 0, 6, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5os4v"]
render_priority = 0
shader = SubResource("VisualShader_iok4r")

[sub_resource type="PlaneMesh" id="PlaneMesh_llvpy"]
material = SubResource("ShaderMaterial_5os4v")
size = Vector2(10, 10)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_3dfcc"]
gradient = SubResource("Gradient_wtm6t")
width = 1024
height = 1024
fill_from = Vector2(1, 1)
fill_to = Vector2(1, 0.957265)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tavbt"]
texture = SubResource("GradientTexture2D_3dfcc")

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_v42kf"]
constant = Color(0.01, 0.01, 0.01, 1)

[sub_resource type="VisualShader" id="VisualShader_whore"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform sampler2D tex_frg_10;



void fragment() {
// ColorConstant:8
	vec4 n_out8p0 = vec4(0.010000, 0.010000, 0.010000, 1.000000);


// Texture2D:10
	vec4 n_out10p0 = texture(tex_frg_10, UV);


// Output:0
	ALBEDO = vec3(n_out8p0.xyz);
	ALPHA = n_out10p0.x;


}
"
graph_offset = Vector2(-392.363, 472.662)
flags/unshaded = true
nodes/fragment/0/position = Vector2(660, 320)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_v42kf")
nodes/fragment/8/position = Vector2(340, 380)
nodes/fragment/10/node = SubResource("VisualShaderNodeTexture_tavbt")
nodes/fragment/10/position = Vector2(-140, 460)
nodes/fragment/connections = PackedInt32Array(8, 0, 0, 0, 10, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_2010a"]
render_priority = 0
shader = SubResource("VisualShader_whore")

[sub_resource type="PlaneMesh" id="PlaneMesh_136g2"]
material = SubResource("ShaderMaterial_2010a")
size = Vector2(10, 10)

[sub_resource type="BoxShape3D" id="BoxShape3D_qfjre"]
size = Vector3(2.03379, 0.029557, 10.4284)

[sub_resource type="GDScript" id="GDScript_2wlt5"]
script/source = "extends Area3D

@onready var Camera = $\"../Viewport/CAM_RAYCAST\"

func _ready():
	_global_datas.get_raycastPosition.connect(MouseRaycast)

func MouseRaycast():
	
	if _global_datas.Player_lock_click:
		return
		
	var mousePos = get_viewport().get_mouse_position()
	var rayLengh = 1000.0
	var from = Camera.project_ray_origin(mousePos)
	var to = from + Camera.project_ray_normal(mousePos) * rayLengh
	var space = get_world_3d().direct_space_state
	var rayQuery = PhysicsRayQueryParameters3D.new()
	rayQuery.from = from
	rayQuery.to = to
	rayQuery.collide_with_areas = true
	rayQuery.collide_with_bodies = false

	var result = space.intersect_ray(rayQuery)

	_global_datas.mouseRaycastPosition = Vector3(result.position.x,result.position.y,0.0)
	
	
"

[sub_resource type="BoxShape3D" id="BoxShape3D_yhyn7"]
size = Vector3(262.786, 91.2802, 0.0376734)

[sub_resource type="GDScript" id="GDScript_qqsny"]
script/source = "extends Node
@onready var photo_circle = $\"../Photo_circle\"

@onready var material : Material = photo_circle.get_material()
@onready var switch_mirror_fx = $\"..\"

var t
var is_round = true
func _ready():
	_global_datas.active_mirror_switch.connect(_start_effect)
	#_global_datas._load_mirror_subscene.connect(start_effect_loadSubscene)
	
	
func start_effect_loadSubscene(value):
	_start_effect(true)		
	
	
func _start_effect(condition):
	
	photo_circle.visible = true
	is_round = !is_round
	material.set_shader_parameter(\"Round_noise\",is_round)
	
	#var n_position = get_viewport().get_mouse_position()

	var camera = _global_datas.Subscene_Camera
	var player = _global_datas.subbscene_playerPosition
	var screen_position = camera.unproject_position(player)	
	switch_mirror_fx.position = screen_position
	
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(set_shader_value,0.0,1.0,0.5).set_trans(Tween.TRANS_SINE)


func _center_to_player():
	
	var camera = _global_datas.Subscene_Camera
	var player = _global_datas.subbscene_playerPosition
	var screen_position = camera.unproject_position(player)	
	var offset = Vector2(0.0,-50)
	switch_mirror_fx.position = screen_position + offset


func set_shader_value(value):
	material.set_shader_parameter(\"Circle\",value)


"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ehfhp"]
default_input_values = [0, 0.0, 1, 1.215]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_fo5m4"]
default_input_values = [0, 0.0, 1, 1.96, 2, 0.775]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_8gnpb"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_a7gyj"]
constant = 0.942

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_hvb24"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_mw3y1"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2047n"]
parameter_name = "Circle"
default_value_enabled = true
default_value = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_30m51"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_6bxo5"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_j5uf6"]
source = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_iygfe"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_vahx7"]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_hpn74"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_dpkp8"]
parameter_name = "Round_noise"
default_value_enabled = true

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_xb43v"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_51n80"]
constant = 0.233

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_4iw3i"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_5m4po"]
function = 31

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_ns4hw"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_35qsd"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_7eox5"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShader" id="VisualShader_ic5q5"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Noise : repeat_enable;
uniform float Circle = 0.40000000596046;



void fragment() {
// UVFunc:25
	vec2 n_in25p1 = vec2(1.00000, 0.50000);
	vec2 n_in25p2 = vec2(0.00000, 0.00000);
	vec2 n_out25p0 = (UV - n_in25p2) * n_in25p1 + n_in25p2;


// FloatConstant:23
	float n_out23p0 = 5.000000;


// UVFunc:24
	vec2 n_in24p2 = vec2(0.00000, 0.00000);
	vec2 n_out24p0 = (n_out25p0 - n_in24p2) * vec2(n_out23p0) + n_in24p2;


	vec4 n_out22p0;
// Texture2D:22
	n_out22p0 = texture(Noise, n_out24p0);


// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatParameter:17
	float n_out17p0 = Circle;


// FloatConstant:3
	float n_out3p0 = 0.233000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out17p0,n_out17p0 + n_out3p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:5
	float n_out5p0 = 1.0 - n_out2p0.x;


// FloatOp:10
	float n_in10p1 = 1.21500;
	float n_out10p0 = n_out17p0 * n_in10p1;


	vec4 n_out9p0;
// Expression:9
	n_out9p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out10p0,n_out10p0 + n_out3p0,d);
		n_out9p0 = vec4(vec3(c),1.0);
	}


// Mix:11
	float n_in11p0 = 0.00000;
	float n_out11p0 = mix(n_in11p0, n_out5p0, n_out9p0.x);


// Step:15
	float n_out15p0 = step(n_out22p0.x, n_out11p0);


// Output:0
	COLOR.a = n_out15p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1240, 520)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_30m51")
nodes/fragment/2/position = Vector2(-540, 20)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_51n80")
nodes/fragment/3/position = Vector2(-820, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_4iw3i")
nodes/fragment/4/position = Vector2(-2300, -60)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatFunc_5m4po")
nodes/fragment/5/position = Vector2(60, 40)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_ns4hw")
nodes/fragment/6/position = Vector2(-1960, -120)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_35qsd")
nodes/fragment/7/position = Vector2(-1720, -120)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_7eox5")
nodes/fragment/9/position = Vector2(-655.858, 530.852)
nodes/fragment/9/size = Vector2(513.781, 284.487)
nodes/fragment/9/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/9/output_ports = "0,5,color;"
nodes/fragment/9/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatOp_ehfhp")
nodes/fragment/10/position = Vector2(-1160, 640)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_fo5m4")
nodes/fragment/11/position = Vector2(460, 580)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_8gnpb")
nodes/fragment/12/position = Vector2(-140, 1600)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_a7gyj")
nodes/fragment/13/position = Vector2(-140, 1460)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_hvb24")
nodes/fragment/14/position = Vector2(360, 1220)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_mw3y1")
nodes/fragment/15/position = Vector2(880, 780)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_2047n")
nodes/fragment/17/position = Vector2(-1809.95, 419.028)
nodes/fragment/21/node = SubResource("VisualShaderNodeTexture2DParameter_6bxo5")
nodes/fragment/21/position = Vector2(-940, 1500)
nodes/fragment/22/node = SubResource("VisualShaderNodeTexture_j5uf6")
nodes/fragment/22/position = Vector2(-680, 1280)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatConstant_iygfe")
nodes/fragment/23/position = Vector2(-1780, 1480)
nodes/fragment/24/node = SubResource("VisualShaderNodeUVFunc_vahx7")
nodes/fragment/24/position = Vector2(-1280, 1400)
nodes/fragment/25/node = SubResource("VisualShaderNodeUVFunc_hpn74")
nodes/fragment/25/position = Vector2(-1600, 1280)
nodes/fragment/26/node = SubResource("VisualShaderNodeBooleanParameter_dpkp8")
nodes/fragment/26/position = Vector2(-40, 960)
nodes/fragment/27/node = SubResource("VisualShaderNodeSwitch_xb43v")
nodes/fragment/27/position = Vector2(520, 980)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 2, 0, 5, 0, 4, 0, 6, 0, 6, 0, 7, 0, 7, 0, 2, 0, 7, 0, 9, 0, 3, 0, 9, 2, 10, 0, 9, 1, 9, 0, 11, 2, 5, 0, 11, 1, 12, 0, 14, 1, 13, 0, 14, 0, 11, 0, 15, 1, 15, 0, 0, 1, 17, 0, 2, 1, 17, 0, 10, 0, 21, 0, 22, 2, 25, 0, 24, 0, 23, 0, 24, 1, 24, 0, 22, 0, 26, 0, 27, 0, 14, 0, 27, 2, 22, 0, 15, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_77tah"]
shader = SubResource("VisualShader_ic5q5")
shader_parameter/Circle = 0.0
shader_parameter/Noise = ExtResource("8_yirv7")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_dbwwe"]
default_input_values = [0, 0.0, 1, 0.85]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_eq0a6"]
default_input_values = [0, 0.0, 1, 1.96, 2, 0.775]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hry31"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_g63t8"]
constant = 1.8

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_hppin"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_1ebrh"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_4ueqd"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_nyurp"]
parameter_name = "Circle"
default_value_enabled = true
default_value = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ncsej"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_pq733"]
constant = 0.008

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_k53ko"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_m2p25"]
function = 31

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_6ba4x"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_7lbdv"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShader" id="VisualShader_er5n3"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Circle = 0.40000000596046;



void fragment() {
// FloatConstant:13
	float n_out13p0 = 1.800000;


// FloatConstant:12
	float n_out12p0 = 0.400000;


	float n_out14p0;
// Expression:14
	n_out14p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out12p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out14p0 = n_out13p0 - DITHER_THRESHOLDS[index];
	}


// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out4p0;


// FloatParameter:17
	float n_out17p0 = Circle;


// FloatConstant:3
	float n_out3p0 = 0.008000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out17p0,n_out17p0 + n_out3p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:5
	float n_out5p0 = 1.0 - n_out2p0.x;


// FloatOp:10
	float n_in10p1 = 0.85000;
	float n_out10p0 = n_out17p0 * n_in10p1;


	vec4 n_out9p0;
// Expression:9
	n_out9p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out10p0,n_out10p0 + n_out3p0,d);
		n_out9p0 = vec4(vec3(c),1.0);
	}


// Mix:11
	float n_in11p0 = 0.00000;
	float n_out11p0 = mix(n_in11p0, n_out5p0, n_out9p0.x);


// Step:15
	float n_out15p0 = step(n_out14p0, n_out11p0);


// Output:0
	COLOR.a = n_out15p0;


}
"
graph_offset = Vector2(-1040.83, 49.6196)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1240, 520)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_ncsej")
nodes/fragment/2/position = Vector2(-540, 20)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_pq733")
nodes/fragment/3/position = Vector2(-820, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_k53ko")
nodes/fragment/4/position = Vector2(-2660, 220)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatFunc_m2p25")
nodes/fragment/5/position = Vector2(60, 40)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_6ba4x")
nodes/fragment/7/position = Vector2(-1720, -120)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_7lbdv")
nodes/fragment/9/position = Vector2(-655.858, 530.852)
nodes/fragment/9/size = Vector2(513.781, 284.487)
nodes/fragment/9/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/9/output_ports = "0,5,color;"
nodes/fragment/9/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatOp_dbwwe")
nodes/fragment/10/position = Vector2(-1160, 640)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_eq0a6")
nodes/fragment/11/position = Vector2(460, 580)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_hry31")
nodes/fragment/12/position = Vector2(-940, 1440)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_g63t8")
nodes/fragment/13/position = Vector2(-940, 1300)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_hppin")
nodes/fragment/14/position = Vector2(-260, 1480)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_1ebrh")
nodes/fragment/15/position = Vector2(880, 780)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatConstant_4ueqd")
nodes/fragment/16/position = Vector2(-1660, 280)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_nyurp")
nodes/fragment/17/position = Vector2(-1809.95, 419.028)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 2, 0, 5, 0, 7, 0, 2, 0, 7, 0, 9, 0, 3, 0, 9, 2, 10, 0, 9, 1, 9, 0, 11, 2, 5, 0, 11, 1, 12, 0, 14, 1, 13, 0, 14, 0, 17, 0, 2, 1, 17, 0, 10, 0, 15, 0, 0, 1, 14, 0, 15, 0, 11, 0, 15, 1, 4, 0, 7, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ts1gr"]
shader = SubResource("VisualShader_er5n3")
shader_parameter/Circle = 0.5

[node name="03_SUBSCENES" type="Node"]
script = ExtResource("1_7uoo0")
metadata/_edit_vertical_guides_ = [960.0]
metadata/_edit_horizontal_guides_ = [540.0]

[node name="FADE_IN" type="Node" parent="."]
script = SubResource("GDScript_btuws")

[node name="Timer" type="Timer" parent="FADE_IN"]

[node name="FADE_OUT" type="Node" parent="."]
script = SubResource("GDScript_4qsuv")

[node name="Timer" type="Timer" parent="FADE_OUT"]

[node name="set_Resolution" type="Node" parent="." node_paths=PackedStringArray("viewports")]
script = ExtResource("2_3srhu")
viewports = [NodePath("../Viewport/Main_SubViewport"), NodePath("../Viewport/Scanner_SubViewport"), NodePath("../Viewport/Scanner_x_SubViewport")]

[node name="GO_SURFACE" type="Node" parent="."]
script = SubResource("GDScript_71vlv")

[node name="MIRROR_switch" type="Node" parent="."]
script = SubResource("GDScript_opp2i")

[node name="Fade_in_mirror" type="Node" parent="MIRROR_switch"]
script = SubResource("GDScript_m1p72")

[node name="SEE_MIRROR_FLASH" type="Node" parent="."]
script = SubResource("GDScript_nvaxv")

[node name="OXIGENE_TIMER" type="Node" parent="."]
script = SubResource("GDScript_wjnt5")
Timer_second = 60.0

[node name="Viewport" type="Node" parent="."]

[node name="All_cam_follow" type="Node" parent="Viewport" node_paths=PackedStringArray("_all_cam_array")]
script = ExtResource("2_tc6o2")
_all_cam_array = [NodePath("../CAM_RAYCAST"), NodePath("../Main_SubViewport/CAM_STATE_BOAT"), NodePath("../Scanner_SubViewport/CAM_STATE_BOAT"), NodePath("../Scanner_x_SubViewport/CAM_STATE_BOAT")]
basePos = Vector3(0, -0.35, 0)

[node name="Main_SubViewport" type="SubViewport" parent="Viewport"]
handle_input_locally = false
size = Vector2i(1920, 1080)

[node name="CAM_STATE_BOAT" type="Camera3D" parent="Viewport/Main_SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 1.8)
cull_mask = 4

[node name="Scanner_SubViewport" type="SubViewport" parent="Viewport"]
handle_input_locally = false
size = Vector2i(1920, 1080)

[node name="CAM_STATE_BOAT" type="Camera3D" parent="Viewport/Scanner_SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 1.8)
cull_mask = 4

[node name="Scanner_x_SubViewport" type="SubViewport" parent="Viewport"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(1920, 1080)

[node name="CAM_STATE_BOAT" type="Camera3D" parent="Viewport/Scanner_x_SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 1.8)
cull_mask = 4100

[node name="Main" type="TextureRect" parent="Viewport"]
visible = false
material = ExtResource("3_w42nb")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = SubResource("ViewportTexture_gasoh")

[node name="Scanner" type="TextureRect" parent="Viewport"]
visible = false
material = ExtResource("3_rto3a")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = SubResource("ViewportTexture_6enrc")
script = SubResource("GDScript_k733y")

[node name="SCANNER_ONLY" type="ColorRect" parent="Viewport"]
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0.0117647, 0.121569, 0.137255, 1)

[node name="Scanner_x" type="TextureRect" parent="Viewport"]
visible = false
material = ExtResource("4_bkck3")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = SubResource("ViewportTexture_dqppn")

[node name="Go_subscene_progress" type="TextureProgressBar" parent="Viewport"]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 52.0
offset_top = -98.0
offset_right = 84.0
offset_bottom = -66.0
grow_horizontal = 2
grow_vertical = 2
value = 100.0
fill_mode = 5
nine_patch_stretch = true
texture_under = ExtResource("7_h5t4r")
texture_progress = ExtResource("7_h5t4r")
tint_under = Color(0.203922, 0.415686, 0.364706, 0)
tint_progress = Color(0.105882, 0.345098, 0.360784, 1)
script = SubResource("GDScript_pi1q7")
pos_offset = Vector2(65, -140)

[node name="CAM_RAYCAST" type="Camera3D" parent="Viewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 1.80008)
cull_mask = 0
script = SubResource("GDScript_5new5")

[node name="Player_Sub" parent="." instance=ExtResource("2_ri8q1")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.334, 0)
mass = 5.0
linear_damp = 1.0
angular_damp = 2.5
move_speed = 6.0
maxSpeed = 5.0

[node name="SubScene_back" type="MeshInstance3D" parent="."]
transform = Transform3D(28.5013, 0, 0, 0, 2.38419e-07, -9.55943, 0, 7.74673, 2.94208e-07, 0, -0.6344, -7.22179)
layers = 4
mesh = SubResource("PlaneMesh_8q6wo")

[node name="WATER_SURFACE" type="MeshInstance3D" parent="."]
transform = Transform3D(11.2155, 0, 0, 0, -7.74673, 4.39024e-08, 0, -6.77241e-07, -0.502185, 0, 0.964028, -0.773959)
layers = 4
mesh = SubResource("PlaneMesh_llvpy")

[node name="WATER_SURFACE2" type="MeshInstance3D" parent="."]
transform = Transform3D(11.2155, 0, 0, 0, -7.74673, 4.39024e-08, 0, -6.77241e-07, -0.502185, 0, 1.191, -0.773959)
layers = 4
mesh = SubResource("PlaneMesh_llvpy")

[node name="WATER_SURFACE3" type="MeshInstance3D" parent="."]
transform = Transform3D(11.2155, 0, 0, 0, -7.74673, 4.39024e-08, 0, -6.77241e-07, -0.502185, 0, 1.38863, -0.773959)
layers = 4
mesh = SubResource("PlaneMesh_llvpy")

[node name="WATER_SURFACE4" type="MeshInstance3D" parent="."]
transform = Transform3D(-11.2155, 0, 0, 0, 3.63738e-07, -2.03785, 0, 8.32135, 8.90773e-08, -0.0234785, 10.9379, -0.763296)
layers = 4
mesh = SubResource("PlaneMesh_136g2")

[node name="Surface_trigger" type="Area3D" parent="."]
transform = Transform3D(11.2155, 0, 0, 0, -7.74673, 4.39024e-08, 0, -6.77241e-07, -0.502185, 0, 1.0465, -0.242)
collision_layer = 4
collision_mask = 4
collision_priority = 0.0
input_ray_pickable = false

[node name="CollisionShape3D" type="CollisionShape3D" parent="Surface_trigger"]
shape = SubResource("BoxShape3D_qfjre")

[node name="LoadScene" type="Node" parent="."]

[node name="MOUSE_RAYCAST" type="Area3D" parent="."]
collision_layer = 0
collision_mask = 0
script = SubResource("GDScript_2wlt5")

[node name="CollisionShape3D" type="CollisionShape3D" parent="MOUSE_RAYCAST"]
shape = SubResource("BoxShape3D_yhyn7")
disabled = true

[node name="SWITCH_MIRROR_FX" type="Node2D" parent="."]

[node name="Switch_effect" type="Node" parent="SWITCH_MIRROR_FX"]
script = SubResource("GDScript_qqsny")

[node name="Photo_circle" type="ColorRect" parent="SWITCH_MIRROR_FX"]
visible = false
material = SubResource("ShaderMaterial_77tah")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -540.0
offset_right = 960.0
offset_bottom = 540.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.988235, 0.901961, 0.694118, 1)

[node name="Photo_circle_progress" type="ColorRect" parent="SWITCH_MIRROR_FX"]
material = SubResource("ShaderMaterial_ts1gr")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -512.0
offset_top = -512.0
offset_right = 512.0
offset_bottom = 512.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.988235, 0.901961, 0.694118, 1)

[node name="load_sublevel" type="ProgressBar" parent="."]
visible = false
offset_left = 1852.0
offset_top = 15.0
offset_right = 1856.0
offset_bottom = 68.0
theme_override_font_sizes/font_size = 35

[connection signal="timeout" from="FADE_IN/Timer" to="FADE_IN" method="_on_timer_timeout"]
[connection signal="timeout" from="FADE_OUT/Timer" to="FADE_OUT" method="_on_timer_timeout"]
[connection signal="area_shape_entered" from="Surface_trigger" to="GO_SURFACE" method="_on_surface_trigger_area_shape_entered"]
