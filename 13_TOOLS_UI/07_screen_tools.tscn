[gd_scene load_steps=92 format=3 uid="uid://bwmu5iwushsl5"]

[ext_resource type="Texture2D" uid="uid://d31xi5f7tan5w" path="res://05_SHADER_TEST/Full_screen/Dither_pattners/Blue_noise/HDR_LA_7.png" id="1_2l1ih"]
[ext_resource type="FastNoiseLite" uid="uid://bcwy28tydkj4w" path="res://05_SHADER_TEST/Subscene_materials/Flash_noise.tres" id="2_rp5e3"]

[sub_resource type="GDScript" id="GDScript_064xp"]
script/source = "extends Node

@onready var photo_effect_vignette = $\"../Photo_effect_vignette\"
@onready var photo_effect_vignette_mat : Material = photo_effect_vignette.get_material()


func _set_vignette_opacity( slider_y : float, new_position : float):
	
	var value = inverse_lerp(0,slider_y, new_position)
	var valueD = lerp(0.0,0.75,value)
	photo_effect_vignette_mat.set_shader_parameter(\"Circle\",valueD)

func _set_vignette_opacity_value( value : float):
	
	if photo_effect_vignette_mat == null:
		return
	photo_effect_vignette_mat.set_shader_parameter(\"Circle\",value)	


"

[sub_resource type="GDScript" id="GDScript_wren3"]
script/source = "extends Node
var _process_timer = false

@onready var timer = $Timer
@onready var photo_circle = $\"../Photo_tools/photo_UI_elements/Photo_FX/Photo_circle\"
@onready var circle_material : Material = photo_circle.get_material()

@onready var photo_tools = $\"../Photo_tools\"

func _ready():
	_global_datas._forreuse_on.connect(_active)
	_global_datas._forreuse_off.connect(_disable)
	
	_global_datas._take_Npc_photo.connect(func(condition: bool):
		
		if condition:
			_active()
			_global_datas._hide_dialogue_box.emit()	
		else:
			_disable()
			_global_datas._show_dialogue_box.emit()		
	)
	

func _active():
	
	if _global_datas.Player_lock_click:
		return

	_global_datas.Player_lock_click = false
	photo_circle.visible = false
		
	if _global_datas.Player_lock_click == true:
		return
			
		
	photo_circle.visible = true
	timer.start()
	_global_datas.Player_lock_click = true		
	
	_change_effect_position()
	
	
func _disable():
	
	timer.stop()
	_process_timer = false
	photo_circle.visible = false
	_global_datas.Player_lock_click = false

		
func _process(_delta):
		
	if !timer.is_stopped():
		
		var lerp_time = lerp(0.0,0.4, timer.time_left / timer.wait_time)	
		circle_material.set_shader_parameter(\"Circle\",lerp_time)		
		_change_effect_position()
func _on_timer_timeout():

	_global_datas._take_photo.emit()
	
	
	timer.stop()

	photo_circle.visible = false
	_global_datas.Player_lock_click = false
	
	
func _change_effect_position():
	var p_pos = get_viewport().get_mouse_position()
	photo_tools.position = p_pos
	_global_datas._photo_position = p_pos
"

[sub_resource type="GDScript" id="GDScript_xsufx"]
script/source = "extends Node

@onready var photo_effect : ColorRect = $\"../../Photo_tools/photo_UI_elements/Photo_FX/Photo_effect\"
@onready var material : Material = photo_effect.get_material()

@onready var photo_effect_dots = $\"../../Photo_effect_dots\"
@onready var material_dots : Material = photo_effect_dots.get_material()

@export var falsh_noise : Noise

var t
var d
func _ready():
	
	_global_datas._instance_photo.connect(_flash)
	_global_datas._take_photo.connect(_dots)
	
func _flash():
		
	if t:
		t.kill()
	t = create_tween()
	
	photo_effect.visible = true
	

	t .tween_method(set_shader_value,0.0,1.0,0.35).set_trans(Tween.TRANS_SINE)
	
func _dots():
	
	var randomSeed = randf_range(0.0,2.0)
	falsh_noise.seed = randomSeed

	if d:
		d.kill()
	d = create_tween()
	
	d.tween_method(set_shader_value_dots,0.0,1.0,3.0).set_trans(Tween.TRANS_SINE)

func set_shader_value(value):
	
	var lerp_time = lerpf(0.35,0.0, value)	
	material.set_shader_parameter(\"flash_opacity\",lerp_time)
	

func set_shader_value_dots(value):
	
	var lerp_time_2 = lerpf(0.0,0.3, value)	
	material_dots.set_shader_parameter(\"Opacity\",lerp_time_2)
"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_lu80i"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ulhat"]
constant = 0.437

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_e00jj"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_b0vtf"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_cdriq"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hj37k"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_0fk3q"]
parameter_name = "Circle"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_2call"]
function = 31

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_e7lxs"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_tlev3"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_0ri8j"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShader" id="VisualShader_4r47a"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Circle : hint_range(0, 1) = 0.5;



void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatConstant:26
	float n_out26p0 = 0.000000;


// FloatConstant:17
	float n_out17p0 = 0.437000;


	vec4 n_out16p0;
// Expression:16
	n_out16p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out26p0,n_out26p0 + n_out17p0,d);
		n_out16p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:28
	float n_out28p0 = 1.0 - n_out16p0.x;


// FloatParameter:27
	float n_out27p0 = Circle;


// FloatConstant:23
	float n_out23p0 = 0.400000;


	float n_out25p0;
// Expression:25
	n_out25p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out23p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out25p0 = n_out27p0 - DITHER_THRESHOLDS[index];
	}


// Step:22
	float n_out22p0 = step(n_out28p0, n_out25p0);


// Output:0
	COLOR.a = n_out22p0;


}
"
graph_offset = Vector2(-759.348, 55.4352)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1320, 520)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_e7lxs")
nodes/fragment/4/position = Vector2(-2380, 860)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_tlev3")
nodes/fragment/6/position = Vector2(-2040, 800)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_0ri8j")
nodes/fragment/7/position = Vector2(-1800, 800)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_lu80i")
nodes/fragment/16/position = Vector2(-1540, 1020)
nodes/fragment/16/size = Vector2(513.781, 284.487)
nodes/fragment/16/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/16/output_ports = "0,5,color;"
nodes/fragment/16/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatConstant_ulhat")
nodes/fragment/17/position = Vector2(-2080, 1260)
nodes/fragment/22/node = SubResource("VisualShaderNodeStep_e00jj")
nodes/fragment/22/position = Vector2(700, 500)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatConstant_b0vtf")
nodes/fragment/23/position = Vector2(20, 1180)
nodes/fragment/25/node = SubResource("VisualShaderNodeExpression_cdriq")
nodes/fragment/25/position = Vector2(320, 1160)
nodes/fragment/25/size = Vector2(724.789, 654.559)
nodes/fragment/25/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/25/output_ports = "0,0,Dither_Node;"
nodes/fragment/25/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/26/node = SubResource("VisualShaderNodeFloatConstant_hj37k")
nodes/fragment/26/position = Vector2(-2021.14, 1036.45)
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatParameter_0fk3q")
nodes/fragment/27/position = Vector2(-40, 880)
nodes/fragment/28/node = SubResource("VisualShaderNodeFloatFunc_2call")
nodes/fragment/28/position = Vector2(-420.848, 770.625)
nodes/fragment/connections = PackedInt32Array(4, 0, 6, 0, 6, 0, 7, 0, 17, 0, 16, 2, 23, 0, 25, 1, 25, 0, 22, 1, 7, 0, 16, 0, 22, 0, 0, 1, 26, 0, 16, 1, 16, 0, 28, 0, 28, 0, 22, 0, 27, 0, 25, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_y3o8d"]
shader = SubResource("VisualShader_4r47a")
shader_parameter/Circle = 0.0

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_d08fx"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_uy744"]
parameter_name = "Opacity"
hint = 1
max = 0.3
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_rxrqi"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tysav"]
source = 5

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_1rnw3"]
default_input_values = [0, 0.03, 1, 1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_1llfs"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_koe1o"]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_ql4qe"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_i57nw"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_atirq"]
default_input_values = [0, 0.0, 1, 0.001]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_05767"]
default_input_values = [0, 0.0, 1, 0.1]
operator = 2

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_lrevg"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_aowm5"]
parameter_name = "Texture2DParameter"
texture_repeat = 1

[sub_resource type="VisualShader" id="VisualShader_vokeb"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Noise : repeat_enable;
uniform float Opacity : hint_range(0, 0.30000001192093) = 0.5;
uniform sampler2D Texture2DParameter : repeat_enable;



void fragment() {
// UVFunc:44
	vec2 n_in44p1 = vec2(1.00000, 0.50000);
	vec2 n_in44p2 = vec2(0.00000, 0.00000);
	vec2 n_out44p0 = (UV - n_in44p2) * n_in44p1 + n_in44p2;


// FloatConstant:42
	float n_out42p0 = 5.000000;


// Input:45
	float n_out45p0 = TIME;


// FloatOp:46
	float n_in46p1 = 0.00100;
	float n_out46p0 = n_out45p0 * n_in46p1;


// FloatOp:47
	float n_in47p1 = 0.10000;
	float n_out47p0 = n_out46p0 * n_in47p1;


// UVFunc:43
	vec2 n_out43p0 = (n_out44p0 - vec2(n_out47p0)) * vec2(n_out42p0) + vec2(n_out47p0);


	vec4 n_out36p0;
// Texture2D:36
	n_out36p0 = texture(Noise, n_out43p0);


// FloatParameter:34
	float n_out34p0 = Opacity;


// Mix:37
	float n_in37p1 = 1.00000;
	float n_out37p0 = mix(n_out36p0.x, n_in37p1, n_out34p0);


	vec4 n_out29p0;
// Texture2D:29
	n_out29p0 = texture(Texture2DParameter, UV);


// Step:49
	float n_out49p0 = step(n_out37p0, n_out29p0.x);


// Output:0
	COLOR.a = n_out49p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(-240, 2000)
nodes/fragment/29/node = SubResource("VisualShaderNodeTexture_d08fx")
nodes/fragment/29/position = Vector2(-2157.62, 1713.6)
nodes/fragment/34/node = SubResource("VisualShaderNodeFloatParameter_uy744")
nodes/fragment/34/position = Vector2(-1460, 2240)
nodes/fragment/35/node = SubResource("VisualShaderNodeTexture2DParameter_rxrqi")
nodes/fragment/35/position = Vector2(-1837.62, 2173.6)
nodes/fragment/36/node = SubResource("VisualShaderNodeTexture_tysav")
nodes/fragment/36/position = Vector2(-1577.62, 1953.6)
nodes/fragment/37/node = SubResource("VisualShaderNodeMix_1rnw3")
nodes/fragment/37/position = Vector2(-1140, 2000)
nodes/fragment/42/node = SubResource("VisualShaderNodeFloatConstant_1llfs")
nodes/fragment/42/position = Vector2(-2677.62, 2153.6)
nodes/fragment/43/node = SubResource("VisualShaderNodeUVFunc_koe1o")
nodes/fragment/43/position = Vector2(-2177.62, 2073.6)
nodes/fragment/44/node = SubResource("VisualShaderNodeUVFunc_ql4qe")
nodes/fragment/44/position = Vector2(-2497.62, 1953.6)
nodes/fragment/45/node = SubResource("VisualShaderNodeInput_i57nw")
nodes/fragment/45/position = Vector2(-2777.62, 2333.6)
nodes/fragment/46/node = SubResource("VisualShaderNodeFloatOp_atirq")
nodes/fragment/46/position = Vector2(-2457.62, 2313.6)
nodes/fragment/47/node = SubResource("VisualShaderNodeFloatOp_05767")
nodes/fragment/47/position = Vector2(-2397.62, 2513.6)
nodes/fragment/49/node = SubResource("VisualShaderNodeStep_lrevg")
nodes/fragment/49/position = Vector2(-1000, 1860)
nodes/fragment/50/node = SubResource("VisualShaderNodeTexture2DParameter_aowm5")
nodes/fragment/50/position = Vector2(-2700, 1580)
nodes/fragment/connections = PackedInt32Array(35, 0, 36, 2, 37, 0, 49, 0, 45, 0, 46, 0, 46, 0, 47, 0, 42, 0, 43, 1, 47, 0, 43, 2, 29, 0, 49, 1, 49, 0, 0, 1, 43, 0, 36, 0, 44, 0, 43, 0, 34, 0, 37, 2, 36, 0, 37, 0, 50, 0, 29, 2)

[sub_resource type="Gradient" id="Gradient_st0ga"]
offsets = PackedFloat32Array(0.18123, 1)

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_jro2l"]
width = 1280
height = 720
generate_mipmaps = false
normalize = false
color_ramp = SubResource("Gradient_st0ga")
noise = ExtResource("2_rp5e3")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7tgd0"]
shader = SubResource("VisualShader_vokeb")
shader_parameter/Opacity = 0.3
shader_parameter/Noise = ExtResource("1_2l1ih")
shader_parameter/Texture2DParameter = SubResource("NoiseTexture2D_jro2l")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_3fsgw"]
default_input_values = [0, 0.0, 1, 0.89]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_4nev5"]
default_input_values = [0, 0.0, 1, 1.96, 2, 0.775]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_1hdci"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_5uwdi"]
constant = 1.858

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_r11jv"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_w2srk"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hqcf5"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_dry0a"]
parameter_name = "Circle"
default_value_enabled = true
default_value = 0.4

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_hsdhm"]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_c7yid"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_xxmqf"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_jgdwo"]
function = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_8sr71"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_pcgsd"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_k7ero"]
default_input_values = [0, 0.18, 1, 0.0]

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_6ryec"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_b7rst"]
constant = 0.001

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_oh3yf"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_kwfdw"]
function = 31

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_y28cs"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_a47ty"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_cyftf"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShader" id="VisualShader_t1ch2"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Circle = 0.40000000596046;



void fragment() {
// FloatConstant:13
	float n_out13p0 = 1.858000;


// FloatConstant:12
	float n_out12p0 = 0.400000;


	float n_out14p0;
// Expression:14
	n_out14p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out12p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out14p0 = n_out13p0 - DITHER_THRESHOLDS[index];
	}


// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatParameter:17
	float n_out17p0 = Circle;


// FloatConstant:3
	float n_out3p0 = 0.001000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out17p0,n_out17p0 + n_out3p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:5
	float n_out5p0 = 1.0 - n_out2p0.x;


// FloatOp:10
	float n_in10p1 = 0.89000;
	float n_out10p0 = n_out17p0 * n_in10p1;


	vec4 n_out9p0;
// Expression:9
	n_out9p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out10p0,n_out10p0 + n_out3p0,d);
		n_out9p0 = vec4(vec3(c),1.0);
	}


// Mix:11
	float n_in11p0 = 0.00000;
	float n_out11p0 = mix(n_in11p0, n_out5p0, n_out9p0.x);


// Step:15
	float n_out15p0 = step(n_out14p0, n_out11p0);


// Output:0
	COLOR.a = n_out15p0;


}
"
graph_offset = Vector2(-857.175, 1605.96)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1240, 520)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_xxmqf")
nodes/fragment/2/position = Vector2(-540, 20)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_b7rst")
nodes/fragment/3/position = Vector2(-820, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_oh3yf")
nodes/fragment/4/position = Vector2(-2300, -60)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatFunc_kwfdw")
nodes/fragment/5/position = Vector2(60, 40)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_y28cs")
nodes/fragment/6/position = Vector2(-1960, -120)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_a47ty")
nodes/fragment/7/position = Vector2(-1720, -120)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_cyftf")
nodes/fragment/9/position = Vector2(-655.858, 530.852)
nodes/fragment/9/size = Vector2(513.781, 284.487)
nodes/fragment/9/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/9/output_ports = "0,5,color;"
nodes/fragment/9/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatOp_3fsgw")
nodes/fragment/10/position = Vector2(-1160, 640)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_4nev5")
nodes/fragment/11/position = Vector2(460, 580)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_1hdci")
nodes/fragment/12/position = Vector2(-600, 1760)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_5uwdi")
nodes/fragment/13/position = Vector2(-600, 1620)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_r11jv")
nodes/fragment/14/position = Vector2(-300, 1740)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_w2srk")
nodes/fragment/15/position = Vector2(880, 780)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatConstant_hqcf5")
nodes/fragment/16/position = Vector2(-1660, 280)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_dry0a")
nodes/fragment/17/position = Vector2(-1809.95, 419.028)
nodes/fragment/18/node = SubResource("VisualShaderNodeTexture_hsdhm")
nodes/fragment/18/position = Vector2(-400, 1160)
nodes/fragment/19/node = SubResource("VisualShaderNodeTexture2DParameter_c7yid")
nodes/fragment/19/position = Vector2(-880, 1320)
nodes/fragment/20/node = SubResource("VisualShaderNodeUVFunc_jgdwo")
nodes/fragment/20/position = Vector2(-885.36, 1045.25)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatConstant_8sr71")
nodes/fragment/21/position = Vector2(-1180, 1140)
nodes/fragment/22/node = SubResource("VisualShaderNodeUVFunc_pcgsd")
nodes/fragment/22/position = Vector2(-1160, 960)
nodes/fragment/24/node = SubResource("VisualShaderNodeStep_k7ero")
nodes/fragment/24/position = Vector2(200, 1200)
nodes/fragment/26/node = SubResource("VisualShaderNodeStep_6ryec")
nodes/fragment/26/position = Vector2(580, 880)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 2, 0, 5, 0, 4, 0, 6, 0, 6, 0, 7, 0, 7, 0, 2, 0, 7, 0, 9, 0, 3, 0, 9, 2, 10, 0, 9, 1, 9, 0, 11, 2, 5, 0, 11, 1, 12, 0, 14, 1, 13, 0, 14, 0, 17, 0, 2, 1, 17, 0, 10, 0, 19, 0, 18, 2, 20, 0, 18, 0, 22, 0, 20, 0, 21, 0, 20, 1, 18, 0, 24, 1, 15, 0, 0, 1, 11, 0, 26, 0, 24, 0, 26, 1, 14, 0, 15, 0, 11, 0, 15, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pppui"]
shader = SubResource("VisualShader_t1ch2")
shader_parameter/Circle = 0.195

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_7uaq6"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_5nadr"]
constant = 1.024

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_rsdgc"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_pjvl3"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_0cij3"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_6tgu7"]
constant = 0.01

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_tmn26"]
parameter_name = "flash_opacity"
hint = 1
max = 0.5
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_v2g8w"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_n25sg"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_rk1qc"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShader" id="VisualShader_0jkik"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float flash_opacity : hint_range(0, 0.5) = 0.5;



void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatConstant:26
	float n_out26p0 = 0.010000;


// FloatConstant:17
	float n_out17p0 = 1.024000;


	vec4 n_out16p0;
// Expression:16
	n_out16p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out26p0,n_out26p0 + n_out17p0,d);
		n_out16p0 = vec4(vec3(c),1.0);
	}


// FloatParameter:27
	float n_out27p0 = flash_opacity;


// FloatConstant:23
	float n_out23p0 = 0.400000;


	float n_out25p0;
// Expression:25
	n_out25p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out23p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out25p0 = n_out27p0 - DITHER_THRESHOLDS[index];
	}


// Step:22
	float n_out22p0 = step(n_out16p0.x, n_out25p0);


// Output:0
	COLOR.a = n_out22p0;


}
"
graph_offset = Vector2(-2432.75, 1071.17)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1320, 520)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_v2g8w")
nodes/fragment/4/position = Vector2(-2380, 860)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_n25sg")
nodes/fragment/6/position = Vector2(-2040, 800)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_rk1qc")
nodes/fragment/7/position = Vector2(-1800, 800)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_7uaq6")
nodes/fragment/16/position = Vector2(-1540, 1020)
nodes/fragment/16/size = Vector2(513.781, 284.487)
nodes/fragment/16/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/16/output_ports = "0,5,color;"
nodes/fragment/16/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatConstant_5nadr")
nodes/fragment/17/position = Vector2(-2080, 1260)
nodes/fragment/22/node = SubResource("VisualShaderNodeStep_rsdgc")
nodes/fragment/22/position = Vector2(700, 500)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatConstant_pjvl3")
nodes/fragment/23/position = Vector2(20, 1180)
nodes/fragment/25/node = SubResource("VisualShaderNodeExpression_0cij3")
nodes/fragment/25/position = Vector2(320, 1160)
nodes/fragment/25/size = Vector2(724.789, 654.559)
nodes/fragment/25/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/25/output_ports = "0,0,Dither_Node;"
nodes/fragment/25/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/26/node = SubResource("VisualShaderNodeFloatConstant_6tgu7")
nodes/fragment/26/position = Vector2(-2021.14, 1036.45)
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatParameter_tmn26")
nodes/fragment/27/position = Vector2(-40, 880)
nodes/fragment/connections = PackedInt32Array(4, 0, 6, 0, 6, 0, 7, 0, 17, 0, 16, 2, 23, 0, 25, 1, 25, 0, 22, 1, 7, 0, 16, 0, 22, 0, 0, 1, 16, 0, 22, 0, 26, 0, 16, 1, 27, 0, 25, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ta2vq"]
shader = SubResource("VisualShader_0jkik")
shader_parameter/flash_opacity = 0.5

[sub_resource type="GDScript" id="GDScript_b8tm5"]
script/source = "extends Node

@onready var backdrop = $\"../Backdrop\"
@onready var material : Material = backdrop.get_material()
@onready var backdrop_n = $\"../Backdrop_n\"
@onready var material_n : Material = backdrop_n.get_material()
var t 
var actual_value : float
func _ready():
	
	_global_datas._show_object_legend.connect(_update_text)


func _update_text(condition : bool, _text : String):
	
	if condition:
		_enable_board_backdrop()
		_global_datas._hide_dialogue_box.emit()
	else:
		_disable_board_backdrop()	
		_global_datas._show_dialogue_box.emit()
		
func _enable_board_backdrop():
	
	if t:
		t.kill()
	t = create_tween()

	t .tween_method(_value_change,actual_value,0.6,0.35)
	

func _disable_board_backdrop():
	if t:
		t.kill()
	t = create_tween()

	t .tween_method(_value_change,actual_value,0.0,0.35)

func _value_change(value : float):
	material.set_shader_parameter(\"Opacity\",value)	
	material_n.set_shader_parameter(\"Opacity\",value)		
	actual_value = value

"

[sub_resource type="GDScript" id="GDScript_cnn2b"]
script/source = "extends Node


@onready var description_text = $\"../../Description_Text\"



func _ready():
	
	_global_datas._show_object_legend.connect(_update_text)


func _update_text(condition : bool, _text : String):
	
	description_text.visible = condition
	description_text.text = _text

"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_vv65e"]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_5i4xu"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_v8dld"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_21753"]
default_input_values = [0, 0.0, 1, 1.0, 2, -30.0]

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_gs4vm"]
function = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_varwm"]
constant = 4.0

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_rjo05"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_gn1dx"]
function = 31

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_cgsxd"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ovf53"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_5k3j8"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_5t4o4"]
parameter_name = "Opacity"
default_value_enabled = true

[sub_resource type="VisualShader" id="VisualShader_wndyb"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity = 0;



void fragment() {
// FloatParameter:9
	float n_out9p0 = Opacity;


// FloatConstant:2
	float n_out2p0 = 0.400000;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out2p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out9p0 - DITHER_THRESHOLDS[index];
	}


// Step:5
	float n_in5p0 = 0.00000;
	float n_out5p0 = step(n_in5p0, n_out4p0);


// Output:0
	COLOR.a = n_out5p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_cgsxd")
nodes/fragment/2/position = Vector2(-1600, 600)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_ovf53")
nodes/fragment/4/position = Vector2(-1300, 500)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeStep_5k3j8")
nodes/fragment/5/position = Vector2(-180, 240)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_5t4o4")
nodes/fragment/9/position = Vector2(-1320, 220)
nodes/fragment/10/node = SubResource("VisualShaderNodeTexture_vv65e")
nodes/fragment/10/position = Vector2(-1160, 0)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture2DParameter_5i4xu")
nodes/fragment/11/position = Vector2(-2020, 60)
nodes/fragment/13/node = SubResource("VisualShaderNodeUVFunc_v8dld")
nodes/fragment/13/position = Vector2(-2080, -220)
nodes/fragment/14/node = SubResource("VisualShaderNodeMix_21753")
nodes/fragment/14/position = Vector2(-629.534, 111.51)
nodes/fragment/15/node = SubResource("VisualShaderNodeUVFunc_gs4vm")
nodes/fragment/15/position = Vector2(-1640, -180)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatConstant_varwm")
nodes/fragment/16/position = Vector2(-1960, -40)
nodes/fragment/17/node = SubResource("VisualShaderNodeStep_rjo05")
nodes/fragment/17/position = Vector2(-109.248, 85.4395)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatFunc_gn1dx")
nodes/fragment/18/position = Vector2(-860, 220)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 1, 4, 0, 5, 1, 9, 0, 4, 0, 11, 0, 10, 2, 13, 0, 15, 0, 15, 0, 10, 0, 16, 0, 15, 1, 14, 0, 17, 1, 10, 0, 14, 0, 9, 0, 18, 0, 18, 0, 14, 1, 5, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_infws"]
shader = SubResource("VisualShader_wndyb")
shader_parameter/Opacity = 0.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_q5rlk"]
parameter_name = "Opacity"
default_value_enabled = true

[sub_resource type="VisualShader" id="VisualShader_ir4iu"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity = 0;



void fragment() {
// FloatParameter:9
	float n_out9p0 = Opacity;


// Output:0
	COLOR.a = n_out9p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_q5rlk")
nodes/fragment/9/position = Vector2(-40, 480)
nodes/fragment/connections = PackedInt32Array(9, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dfp26"]
shader = SubResource("VisualShader_ir4iu")
shader_parameter/Opacity = 0.0

[sub_resource type="GDScript" id="GDScript_4ec3v"]
script/source = "extends Node2D

func _ready():
	_global_datas.In_Front_Node = self

"

[node name="07_SCREEN_TOOLS" type="Node"]

[node name="Photo_tools" type="Node" parent="."]

[node name="Vignette_opacity" type="Node" parent="Photo_tools"]
script = SubResource("GDScript_064xp")

[node name="PHOTO_BEHAVIOUR" type="Node" parent="Photo_tools"]
script = SubResource("GDScript_wren3")

[node name="Flash" type="Node" parent="Photo_tools/PHOTO_BEHAVIOUR"]
script = SubResource("GDScript_xsufx")
falsh_noise = ExtResource("2_rp5e3")

[node name="Timer" type="Timer" parent="Photo_tools/PHOTO_BEHAVIOUR"]
wait_time = 0.5

[node name="Photo_effect_vignette" type="ColorRect" parent="Photo_tools"]
material = SubResource("ShaderMaterial_y3o8d")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -540.0
offset_right = 960.0
offset_bottom = 540.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.0313726, 0.0941176, 0.0941176, 1)

[node name="Photo_effect_dots" type="ColorRect" parent="Photo_tools"]
visible = false
material = SubResource("ShaderMaterial_7tgd0")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -544.0
offset_right = 960.0
offset_bottom = 536.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.784314, 0.709804, 0.513726, 1)

[node name="Photo_tools" type="Node2D" parent="Photo_tools"]
position = Vector2(960, 540)

[node name="photo_UI_elements" type="Control" parent="Photo_tools/Photo_tools"]
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="Photo_FX" type="Node2D" parent="Photo_tools/Photo_tools/photo_UI_elements"]

[node name="Photo_circle" type="ColorRect" parent="Photo_tools/Photo_tools/photo_UI_elements/Photo_FX"]
visible = false
material = SubResource("ShaderMaterial_pppui")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -533.0
offset_right = 960.0
offset_bottom = 547.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.988235, 0.901961, 0.694118, 1)

[node name="Photo_effect" type="ColorRect" parent="Photo_tools/Photo_tools/photo_UI_elements/Photo_FX"]
visible = false
material = SubResource("ShaderMaterial_ta2vq")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -544.0
offset_right = 960.0
offset_bottom = 536.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.784314, 0.709804, 0.513726, 1)

[node name="Description" type="Node2D" parent="."]
position = Vector2(989, 752)

[node name="Zoom_backdrop" type="Node" parent="Description"]
script = SubResource("GDScript_b8tm5")

[node name="Update_description" type="Node" parent="Description"]
script = SubResource("GDScript_cnn2b")

[node name="Backdrop" type="ColorRect" parent="Description"]
material = SubResource("ShaderMaterial_infws")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -989.0
offset_top = -752.0
offset_right = 931.0
offset_bottom = 328.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.0156863, 0.0705882, 0.0823529, 1)

[node name="Backdrop_n" type="ColorRect" parent="Description"]
material = SubResource("ShaderMaterial_dfp26")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -989.0
offset_top = -752.0
offset_right = 931.0
offset_bottom = 328.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.0156863, 0.0705882, 0.0823529, 1)

[node name="Front_element" type="Node2D" parent="."]
script = SubResource("GDScript_4ec3v")

[node name="Description_Text" type="Label" parent="."]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -271.0
offset_top = 441.0
offset_right = 329.0
offset_bottom = 541.0
grow_horizontal = 2
grow_vertical = 2
theme_override_colors/font_color = Color(0.721569, 0.580392, 0.407843, 1)
theme_override_font_sizes/font_size = 30
text = "Lorem ipsum "
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 1

[connection signal="timeout" from="Photo_tools/PHOTO_BEHAVIOUR/Timer" to="Photo_tools/PHOTO_BEHAVIOUR" method="_on_timer_timeout"]
