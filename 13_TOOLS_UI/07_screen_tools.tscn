[gd_scene load_steps=115 format=3 uid="uid://bwmu5iwushsl5"]

[ext_resource type="Texture2D" uid="uid://d31xi5f7tan5w" path="res://05_SHADER_TEST/Full_screen/Dither_pattners/Blue_noise/HDR_LA_7.png" id="1_2l1ih"]
[ext_resource type="Script" path="res://13_TOOLS_UI/INSTANCE_NOTE.gd" id="1_fcb2u"]
[ext_resource type="Script" path="res://13_TOOLS_UI/Scanner_UI_dots_effect.gd" id="2_2br5g"]
[ext_resource type="FastNoiseLite" uid="uid://bcwy28tydkj4w" path="res://05_SHADER_TEST/Subscene_materials/Flash_noise.tres" id="2_rp5e3"]
[ext_resource type="Texture2D" uid="uid://dto78na6ad5o2" path="res://00_SYSTEMS/KeyOrPad/Key_inputs.png" id="4_c4v0f"]
[ext_resource type="Material" uid="uid://bxikm4g1nkywk" path="res://06_UI/Disolved_simple_texture.tres" id="4_opffw"]
[ext_resource type="Texture2D" uid="uid://4bq2l5jjm4r2" path="res://00_SYSTEMS/KeyOrPad/Pad_inputs.png" id="5_jufic"]

[sub_resource type="GDScript" id="GDScript_ebu32"]
script/source = "extends Node

func _ready():

	_global_datas._take_photo.connect(_check_npc_photo)

func _check_npc_photo():
	
	if _global_datas.Npc_Dialogue != null:
		var photodata = _global_datas.Npc_Dialogue.photo_data
		
		if check_photo_exist(photodata):
			return
		
		_global_datas.selected_photoData = photodata
		_global_datas.show_on_scanner.emit(true)
		_global_datas.photo_archives.append(photodata)
		_global_datas._show_object_legend.emit(true,photodata.legend)
		
		
		_global_datas._photo_flash.emit()
	
		
func check_photo_exist(photo_Data):
	
	for photo in _global_datas.photo_archives:
		if photo == photo_Data:
			return true 	

"

[sub_resource type="GDScript" id="GDScript_b8tm5"]
script/source = "extends Node

@onready var backdrop = $\"../Backdrop\"
@onready var material : Material = backdrop.get_material()
@onready var backdrop_n = $\"../Backdrop_n\"
@onready var material_n : Material = backdrop_n.get_material()
var t 
var actual_value : float
func _ready():
	
	_global_datas._show_object_legend.connect(_update_text)


func _update_text(condition : bool, _text : String):
	
	if condition:
		_enable_board_backdrop()
		_global_datas._hide_dialogue_box.emit()
	else:
		_disable_board_backdrop()
		
		if _global_datas.Npc_Dialogue != null:
			var photo_Data = _global_datas.Npc_Dialogue.photo_data
			if check_photo_exist(photo_Data):	
				_global_datas._show_dialogue_box.emit()
		
func _enable_board_backdrop():
	
	if t:
		t.kill()
	t = create_tween()

	t .tween_method(_value_change,actual_value,0.6,0.35)
	

func _disable_board_backdrop():
	if t:
		t.kill()
	t = create_tween()

	t .tween_method(_value_change,actual_value,0.0,0.35)

func _value_change(value : float):
	pass
	#material.set_shader_parameter(\"Opacity\",value)	
	#material_n.set_shader_parameter(\"Opacity\",value)		
	#actual_value = value

func check_photo_exist(photo_Data):
	
	for photo in _global_datas.photo_archives:
		if photo == photo_Data:
			return true
"

[sub_resource type="GDScript" id="GDScript_cnn2b"]
script/source = "extends Node


@onready var description_text = $\"../../Description_Text\"

var t 
var _is_typing : bool = false
func _ready():
	
	_global_datas._show_object_legend.connect(_update_text)


func _update_text(condition : bool, _text : String):
	
	description_text.visible = condition
	description_text.text = _text
	var text_count = _text.length()
	type_text(text_count)
	print(_text)
	
func type_text(count : int):
	
	description_text.visible_ratio = 0.0
	var speed = 0.025 * count
	#var clamp_speed = clamp(1.0,2.0,speed)
	#print( speed,\" for \", count ,\" letter\")
	_is_typing = true
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(change_ration,0.0,1.0,speed)
	await create_tween().tween_interval(speed).finished

	_is_typing = false
	
func change_ration(value : float):
	description_text.visible_ratio = value
	


	
"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_vj5f6"]
input_name = "color"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_cgsxd"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_08k6a"]
parameter_name = "Opacity2"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_2jobo"]
source = 5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_f656x"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_rfqvv"]
default_input_values = [0, 0.0, 1, 0.001]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_0hrsf"]
default_input_values = [0, 0.0, 1, 0.1]
operator = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_ou55t"]
parameter_name = "BlueNoise"
qualifier = 1
texture_repeat = 1

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_qtux1"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_023x6"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_mn6ba"]
function = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ovf53"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_5k3j8"]

[sub_resource type="VisualShader" id="VisualShader_wndyb"]
code = "shader_type canvas_item;
render_mode blend_mix;

global uniform sampler2D BlueNoise : repeat_enable;
uniform float Opacity2 : hint_range(0, 1) = 0.5;



void fragment() {
// Input:19
	vec4 n_out19p0 = COLOR;


// UVFunc:22
	vec2 n_in22p1 = vec2(1.00000, 0.50000);
	vec2 n_in22p2 = vec2(0.00000, 0.00000);
	vec2 n_out22p0 = (UV - n_in22p2) * n_in22p1 + n_in22p2;


// FloatConstant:27
	float n_out27p0 = 5.000000;


// FloatOp:23
	float n_in23p0 = 0.00000;
	float n_in23p1 = 0.00100;
	float n_out23p0 = n_in23p0 * n_in23p1;


// FloatOp:24
	float n_in24p1 = 0.10000;
	float n_out24p0 = n_out23p0 * n_in24p1;


// UVFunc:28
	vec2 n_out28p0 = (n_out22p0 - vec2(n_out24p0)) * vec2(n_out27p0) + vec2(n_out24p0);


	vec4 n_out21p0;
// Texture2D:21
	n_out21p0 = texture(BlueNoise, n_out28p0);


// FloatParameter:20
	float n_out20p0 = Opacity2;


// Step:26
	float n_out26p0 = step(n_out21p0.x, n_out20p0);


// Output:0
	COLOR.rgb = vec3(n_out19p0.xyz);
	COLOR.a = n_out26p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_cgsxd")
nodes/fragment/2/position = Vector2(-1460, 740)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_ovf53")
nodes/fragment/4/position = Vector2(-1160, 640)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeStep_5k3j8")
nodes/fragment/5/position = Vector2(40, 520)
nodes/fragment/19/node = SubResource("VisualShaderNodeInput_vj5f6")
nodes/fragment/19/position = Vector2(76.5386, -147.077)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatParameter_08k6a")
nodes/fragment/20/position = Vector2(-1480, 60)
nodes/fragment/21/node = SubResource("VisualShaderNodeTexture_2jobo")
nodes/fragment/21/position = Vector2(-880, -600)
nodes/fragment/22/node = SubResource("VisualShaderNodeUVFunc_f656x")
nodes/fragment/22/position = Vector2(-1800, -600)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatOp_rfqvv")
nodes/fragment/23/position = Vector2(-1760, -240)
nodes/fragment/24/node = SubResource("VisualShaderNodeFloatOp_0hrsf")
nodes/fragment/24/position = Vector2(-1700, -40)
nodes/fragment/25/node = SubResource("VisualShaderNodeTexture2DParameter_ou55t")
nodes/fragment/25/position = Vector2(-1240, -320)
nodes/fragment/26/node = SubResource("VisualShaderNodeStep_qtux1")
nodes/fragment/26/position = Vector2(0, 200)
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatConstant_023x6")
nodes/fragment/27/position = Vector2(-1800, -380)
nodes/fragment/28/node = SubResource("VisualShaderNodeUVFunc_mn6ba")
nodes/fragment/28/position = Vector2(-1480, -480)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 1, 4, 0, 5, 1, 19, 0, 0, 0, 23, 0, 24, 0, 22, 0, 28, 0, 24, 0, 28, 2, 28, 0, 21, 0, 25, 0, 21, 2, 20, 0, 26, 1, 21, 0, 26, 0, 27, 0, 28, 1, 26, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_infws"]
shader = SubResource("VisualShader_wndyb")
shader_parameter/Opacity2 = 0.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_q5rlk"]
parameter_name = "Opacity"
default_value_enabled = true

[sub_resource type="VisualShader" id="VisualShader_ir4iu"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity = 0;



void fragment() {
// FloatParameter:9
	float n_out9p0 = Opacity;


// Output:0
	COLOR.a = n_out9p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_q5rlk")
nodes/fragment/9/position = Vector2(-40, 480)
nodes/fragment/connections = PackedInt32Array(9, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dfp26"]
shader = SubResource("VisualShader_ir4iu")
shader_parameter/Opacity = 0.0

[sub_resource type="GDScript" id="GDScript_4ec3v"]
script/source = "extends Node2D

func _ready():
	_global_datas.In_Front_Node = self

"

[sub_resource type="GDScript" id="GDScript_064xp"]
script/source = "extends Node

@onready var photo_effect_vignette = $\"../Photo_effect_vignette\"
@onready var photo_effect_vignette_mat : Material = photo_effect_vignette.get_material()


func _set_vignette_opacity( slider_y : float, new_position : float):
	
	var value = inverse_lerp(0,slider_y, new_position)
	var valueD = lerp(0.0,0.75,value)
	photo_effect_vignette_mat.set_shader_parameter(\"Circle\",valueD)

func _set_vignette_opacity_value( value : float):
	
	if photo_effect_vignette_mat == null:
		return
	photo_effect_vignette_mat.set_shader_parameter(\"Circle\",value)	


"

[sub_resource type="GDScript" id="GDScript_xsufx"]
script/source = "extends Node

@onready var photo_effect : ColorRect = $\"../Photo_tools/photo_UI_elements/Photo_FX/Photo_effect\"
@onready var material : Material = photo_effect.get_material()

@onready var photo_tools = $\"../Photo_tools\"



var t
var center_position : Vector2

func _ready():
	
	_global_datas._photo_flash.connect(_flash)
	center_position =  photo_tools.position

func _flash():
	
	
	photo_tools.position = center_position	
	

		
	if t:
		t.kill()
	t = create_tween()
	
	photo_effect.visible = true
	

	t .tween_method(set_shader_value,0.0,1.0,0.5)
	

	
func set_shader_value(value):
	
	var lerp_time = lerpf(0.5,0.0, value)	
	material.set_shader_parameter(\"flash_opacity\",lerp_time)


	
"

[sub_resource type="GDScript" id="GDScript_d3vsr"]
script/source = "extends Node
@onready var photo_tools = $\"../Photo_tools\"

@onready var photo_effect : ColorRect = $\"../Photo_tools/photo_UI_elements/Photo_FX/Photo_effect_flashSubscene\"
@onready var material : Material = photo_effect.get_material()

var t 

func _ready():
	_global_datas._photo_flash_noPhoto.connect(_flash)


func _flash():
	
		
	if t:
		t.kill()
	t = create_tween()
	
	photo_effect.visible = true
	t.tween_method(set_shader_value,0.0,1.0,1.5)

func set_shader_value(value):
	
	var lerp_time = lerpf(0.5,0.0, value)	
	material.set_shader_parameter(\"flash_opacity\",lerp_time)
	
	var camera = _global_datas.Subscene_Camera
	var player = _global_datas.flash_subscene_position
	var screen_position = camera.unproject_position(player)	
	photo_tools.position = screen_position		


"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_lu80i"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ulhat"]
constant = 0.437

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_e00jj"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_b0vtf"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_cdriq"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hj37k"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_0fk3q"]
parameter_name = "Circle"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_2call"]
function = 31

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_e7lxs"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_tlev3"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_0ri8j"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShader" id="VisualShader_4r47a"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Circle : hint_range(0, 1) = 0.5;



void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatConstant:26
	float n_out26p0 = 0.000000;


// FloatConstant:17
	float n_out17p0 = 0.437000;


	vec4 n_out16p0;
// Expression:16
	n_out16p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out26p0,n_out26p0 + n_out17p0,d);
		n_out16p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:28
	float n_out28p0 = 1.0 - n_out16p0.x;


// FloatParameter:27
	float n_out27p0 = Circle;


// FloatConstant:23
	float n_out23p0 = 0.400000;


	float n_out25p0;
// Expression:25
	n_out25p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out23p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out25p0 = n_out27p0 - DITHER_THRESHOLDS[index];
	}


// Step:22
	float n_out22p0 = step(n_out28p0, n_out25p0);


// Output:0
	COLOR.a = n_out22p0;


}
"
graph_offset = Vector2(-829.526, -51.269)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1320, 520)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_e7lxs")
nodes/fragment/4/position = Vector2(-2460, 580)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_tlev3")
nodes/fragment/6/position = Vector2(-2040, 720)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_0ri8j")
nodes/fragment/7/position = Vector2(-1680, 640)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_lu80i")
nodes/fragment/16/position = Vector2(-1540, 1020)
nodes/fragment/16/size = Vector2(513.781, 284.487)
nodes/fragment/16/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/16/output_ports = "0,5,color;"
nodes/fragment/16/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatConstant_ulhat")
nodes/fragment/17/position = Vector2(-2080, 1260)
nodes/fragment/22/node = SubResource("VisualShaderNodeStep_e00jj")
nodes/fragment/22/position = Vector2(700, 500)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatConstant_b0vtf")
nodes/fragment/23/position = Vector2(20, 1180)
nodes/fragment/25/node = SubResource("VisualShaderNodeExpression_cdriq")
nodes/fragment/25/position = Vector2(320, 1160)
nodes/fragment/25/size = Vector2(724.789, 654.559)
nodes/fragment/25/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/25/output_ports = "0,0,Dither_Node;"
nodes/fragment/25/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/26/node = SubResource("VisualShaderNodeFloatConstant_hj37k")
nodes/fragment/26/position = Vector2(-2021.14, 1036.45)
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatParameter_0fk3q")
nodes/fragment/27/position = Vector2(-40, 880)
nodes/fragment/28/node = SubResource("VisualShaderNodeFloatFunc_2call")
nodes/fragment/28/position = Vector2(-420.848, 770.625)
nodes/fragment/connections = PackedInt32Array(4, 0, 6, 0, 6, 0, 7, 0, 17, 0, 16, 2, 23, 0, 25, 1, 25, 0, 22, 1, 7, 0, 16, 0, 22, 0, 0, 1, 26, 0, 16, 1, 16, 0, 28, 0, 28, 0, 22, 0, 27, 0, 25, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_y3o8d"]
shader = SubResource("VisualShader_4r47a")
shader_parameter/Circle = 0.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_uy744"]
parameter_name = "Opacity"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_rxrqi"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tysav"]
source = 5

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_1rnw3"]
default_input_values = [0, 0.4, 1, 0.0, 2, 1.0]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_1llfs"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_koe1o"]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_ql4qe"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_i57nw"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_atirq"]
default_input_values = [0, 0.0, 1, 0.001]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_05767"]
default_input_values = [0, 0.0, 1, 0.1]
operator = 2

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_lrevg"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_wfxek"]
default_input_values = [0, 0.0, 1, 0.5]
operator = 2

[sub_resource type="FastNoiseLite" id="FastNoiseLite_amyys"]
noise_type = 3
seed = 195
frequency = 0.2089
offset = Vector3(0, 1, 0)
fractal_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_u2c5s"]
height = 256
seamless = true
noise = SubResource("FastNoiseLite_amyys")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_lpfiw"]
output_port_for_preview = 0
expanded_output_ports = [0]
source = 5
texture = SubResource("NoiseTexture2D_u2c5s")

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_524tj"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_s3tmm"]
parameter_name = "Noise_01"
texture_repeat = 1

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_t0eun"]
parameter_name = "Translation"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_0tnew"]
size = Vector2(760, 540)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_6bqx5"]
constant = 2.216

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_e4o2p"]
constant = -0.198

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_0mmdj"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yw3km"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_7nvmw"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_5kpbk"]

[sub_resource type="VisualShader" id="VisualShader_vokeb"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Noise : repeat_enable;
uniform float Opacity : hint_range(0, 1) = 0.5;
uniform float Translation;
uniform sampler2D Noise_01 : repeat_enable;



void fragment() {
// UVFunc:44
	vec2 n_in44p1 = vec2(1.00000, 0.50000);
	vec2 n_in44p2 = vec2(0.00000, 0.00000);
	vec2 n_out44p0 = (UV - n_in44p2) * n_in44p1 + n_in44p2;


// FloatConstant:42
	float n_out42p0 = 5.000000;


// Input:45
	float n_out45p0 = TIME;


// FloatOp:46
	float n_in46p1 = 0.00100;
	float n_out46p0 = n_out45p0 * n_in46p1;


// FloatOp:47
	float n_in47p1 = 0.10000;
	float n_out47p0 = n_out46p0 * n_in47p1;


// UVFunc:43
	vec2 n_out43p0 = (n_out44p0 - vec2(n_out47p0)) * vec2(n_out42p0) + vec2(n_out47p0);


	vec4 n_out36p0;
// Texture2D:36
	n_out36p0 = texture(Noise, n_out43p0);


// FloatParameter:34
	float n_out34p0 = Opacity;


// Mix:37
	float n_in37p0 = 0.40000;
	float n_out37p0 = mix(n_in37p0, n_out36p0.x, n_out34p0);


// FloatParameter:72
	float n_out72p0 = Translation;


// FloatOp:60
	float n_in60p1 = 0.50000;
	float n_out60p0 = n_out72p0 * n_in60p1;


// UVFunc:69
	vec2 n_in69p1 = vec2(1.00000, 1.00000);
	vec2 n_out69p0 = vec2(n_out60p0) * n_in69p1 + UV;


	vec4 n_out68p0;
// Texture2D:68
	n_out68p0 = texture(Noise_01, n_out69p0);


// Input:78
	vec2 n_out78p0 = UV;


// UVFunc:79
	vec2 n_in79p1 = vec2(1.80000, 1.00000);
	vec2 n_in79p2 = vec2(0.50000, 0.00000);
	vec2 n_out79p0 = (n_out78p0 - n_in79p2) * n_in79p1 + n_in79p2;


// UVFunc:77
	vec2 n_in77p1 = vec2(0.00000, 1.00000);
	vec2 n_in77p2 = vec2(0.00000, 0.00000);
	vec2 n_out77p0 = n_in77p2 * n_in77p1 + n_out79p0;


// FloatConstant:75
	float n_out75p0 = -0.198000;


// FloatConstant:74
	float n_out74p0 = 2.216000;


	vec4 n_out73p0;
// Expression:73
	n_out73p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out77p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out75p0,n_out75p0 + n_out74p0,d);
		n_out73p0 = vec4(vec3(c),1.0);
	}


// Mix:80
	float n_in80p0 = 0.00000;
	float n_out80p0 = mix(n_in80p0, n_out68p0.x, n_out73p0.x);


// Step:49
	float n_out49p0 = step(n_out37p0, n_out80p0);


// Output:0
	COLOR.a = n_out49p0;


}
"
graph_offset = Vector2(-2503.96, 650.799)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(-240, 2000)
nodes/fragment/34/node = SubResource("VisualShaderNodeFloatParameter_uy744")
nodes/fragment/34/position = Vector2(-1540, 2540)
nodes/fragment/35/node = SubResource("VisualShaderNodeTexture2DParameter_rxrqi")
nodes/fragment/35/position = Vector2(-2140, 2600)
nodes/fragment/36/node = SubResource("VisualShaderNodeTexture_tysav")
nodes/fragment/36/position = Vector2(-1577.62, 1953.6)
nodes/fragment/37/node = SubResource("VisualShaderNodeMix_1rnw3")
nodes/fragment/37/position = Vector2(-1140, 2000)
nodes/fragment/42/node = SubResource("VisualShaderNodeFloatConstant_1llfs")
nodes/fragment/42/position = Vector2(-3140, 2620)
nodes/fragment/43/node = SubResource("VisualShaderNodeUVFunc_koe1o")
nodes/fragment/43/position = Vector2(-2640, 2540)
nodes/fragment/44/node = SubResource("VisualShaderNodeUVFunc_ql4qe")
nodes/fragment/44/position = Vector2(-3140, 2340)
nodes/fragment/45/node = SubResource("VisualShaderNodeInput_i57nw")
nodes/fragment/45/position = Vector2(-3440, 2840)
nodes/fragment/46/node = SubResource("VisualShaderNodeFloatOp_atirq")
nodes/fragment/46/position = Vector2(-2920, 2780)
nodes/fragment/47/node = SubResource("VisualShaderNodeFloatOp_05767")
nodes/fragment/47/position = Vector2(-2860, 2980)
nodes/fragment/49/node = SubResource("VisualShaderNodeStep_lrevg")
nodes/fragment/49/position = Vector2(-900, 1800)
nodes/fragment/60/node = SubResource("VisualShaderNodeFloatOp_wfxek")
nodes/fragment/60/position = Vector2(-3680, 1180)
nodes/fragment/68/node = SubResource("VisualShaderNodeTexture_lpfiw")
nodes/fragment/68/position = Vector2(-2980, 640)
nodes/fragment/69/node = SubResource("VisualShaderNodeUVFunc_524tj")
nodes/fragment/69/position = Vector2(-3460, 860)
nodes/fragment/70/node = SubResource("VisualShaderNodeTexture2DParameter_s3tmm")
nodes/fragment/70/position = Vector2(-3740, 360)
nodes/fragment/72/node = SubResource("VisualShaderNodeFloatParameter_t0eun")
nodes/fragment/72/position = Vector2(-4120, 1060)
nodes/fragment/73/node = SubResource("VisualShaderNodeExpression_0tnew")
nodes/fragment/73/position = Vector2(-4320, 2080)
nodes/fragment/73/size = Vector2(760, 540)
nodes/fragment/73/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/73/output_ports = "0,5,color;"
nodes/fragment/73/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/74/node = SubResource("VisualShaderNodeFloatConstant_6bqx5")
nodes/fragment/74/position = Vector2(-4860, 2320)
nodes/fragment/75/node = SubResource("VisualShaderNodeFloatConstant_e4o2p")
nodes/fragment/75/position = Vector2(-4800, 2100)
nodes/fragment/77/node = SubResource("VisualShaderNodeUVFunc_0mmdj")
nodes/fragment/77/position = Vector2(-4460, 1700)
nodes/fragment/78/node = SubResource("VisualShaderNodeInput_yw3km")
nodes/fragment/78/position = Vector2(-5240, 1640)
nodes/fragment/79/node = SubResource("VisualShaderNodeUVFunc_7nvmw")
nodes/fragment/79/position = Vector2(-4820, 1780)
nodes/fragment/80/node = SubResource("VisualShaderNodeMix_5kpbk")
nodes/fragment/80/position = Vector2(-2158.05, 1281.93)
nodes/fragment/connections = PackedInt32Array(35, 0, 36, 2, 37, 0, 49, 0, 45, 0, 46, 0, 46, 0, 47, 0, 42, 0, 43, 1, 47, 0, 43, 2, 43, 0, 36, 0, 44, 0, 43, 0, 34, 0, 37, 2, 36, 0, 37, 1, 60, 0, 69, 2, 70, 0, 68, 2, 49, 0, 0, 1, 69, 0, 68, 0, 72, 0, 60, 0, 78, 0, 79, 0, 79, 0, 77, 0, 74, 0, 73, 2, 77, 0, 73, 0, 75, 0, 73, 1, 80, 0, 49, 1, 68, 0, 80, 1, 73, 0, 80, 2)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7tgd0"]
shader = SubResource("VisualShader_vokeb")
shader_parameter/Opacity = 0.0
shader_parameter/Translation = null
shader_parameter/Noise = ExtResource("1_2l1ih")

[sub_resource type="Gradient" id="Gradient_u4mlc"]
offsets = PackedFloat32Array(0.0660592, 1)

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5bq5r"]
width = 1280
height = 720
generate_mipmaps = false
seamless = true
color_ramp = SubResource("Gradient_u4mlc")
noise = ExtResource("2_rp5e3")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_augab"]
shader = SubResource("VisualShader_vokeb")
shader_parameter/Opacity = 0.0
shader_parameter/Translation = 0.0
shader_parameter/Noise = ExtResource("1_2l1ih")
shader_parameter/Noise_01 = SubResource("NoiseTexture2D_5bq5r")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_uisdl"]
default_input_values = [0, 0.0, 1, 0.735]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_8mvh5"]
default_input_values = [0, 0.0, 1, 1.96, 2, 0.775]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_0pyfu"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_psnbf"]
constant = 1.858

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_6yiqn"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_fk8ip"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ldxw4"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_b2iil"]
parameter_name = "Circle"
default_value_enabled = true
default_value = 0.4

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_7y6dh"]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_nsmnv"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pyrub"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_plyhd"]
function = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_d4xmn"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_yvsnp"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_1gpox"]
default_input_values = [0, 0.18, 1, 0.0]

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_2k632"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_oysa4"]
constant = 0.001

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_prbcs"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_qh4l1"]
function = 31

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_ajnyt"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_bcadu"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_qbx11"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShader" id="VisualShader_fjmof"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Circle = 0.40000000596046;



void fragment() {
// FloatConstant:13
	float n_out13p0 = 1.858000;


// FloatConstant:12
	float n_out12p0 = 0.400000;


	float n_out14p0;
// Expression:14
	n_out14p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out12p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out14p0 = n_out13p0 - DITHER_THRESHOLDS[index];
	}


// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatParameter:17
	float n_out17p0 = Circle;


// FloatConstant:3
	float n_out3p0 = 0.001000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out17p0,n_out17p0 + n_out3p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:5
	float n_out5p0 = 1.0 - n_out2p0.x;


// FloatOp:10
	float n_in10p1 = 0.73500;
	float n_out10p0 = n_out17p0 * n_in10p1;


	vec4 n_out9p0;
// Expression:9
	n_out9p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out10p0,n_out10p0 + n_out3p0,d);
		n_out9p0 = vec4(vec3(c),1.0);
	}


// Mix:11
	float n_in11p0 = 0.00000;
	float n_out11p0 = mix(n_in11p0, n_out5p0, n_out9p0.x);


// Step:15
	float n_out15p0 = step(n_out14p0, n_out11p0);


// Output:0
	COLOR.a = n_out15p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1240, 520)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_pyrub")
nodes/fragment/2/position = Vector2(-540, 20)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_oysa4")
nodes/fragment/3/position = Vector2(-820, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_prbcs")
nodes/fragment/4/position = Vector2(-2300, -60)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatFunc_qh4l1")
nodes/fragment/5/position = Vector2(60, 40)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_ajnyt")
nodes/fragment/6/position = Vector2(-1960, -120)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_bcadu")
nodes/fragment/7/position = Vector2(-1720, -120)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_qbx11")
nodes/fragment/9/position = Vector2(-655.858, 530.852)
nodes/fragment/9/size = Vector2(513.781, 284.487)
nodes/fragment/9/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/9/output_ports = "0,5,color;"
nodes/fragment/9/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatOp_uisdl")
nodes/fragment/10/position = Vector2(-1160, 640)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_8mvh5")
nodes/fragment/11/position = Vector2(460, 580)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatConstant_0pyfu")
nodes/fragment/12/position = Vector2(-600, 1760)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_psnbf")
nodes/fragment/13/position = Vector2(-600, 1620)
nodes/fragment/14/node = SubResource("VisualShaderNodeExpression_6yiqn")
nodes/fragment/14/position = Vector2(-300, 1740)
nodes/fragment/14/size = Vector2(724.789, 654.559)
nodes/fragment/14/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/14/output_ports = "0,0,Dither_Node;"
nodes/fragment/14/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/15/node = SubResource("VisualShaderNodeStep_fk8ip")
nodes/fragment/15/position = Vector2(880, 780)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatConstant_ldxw4")
nodes/fragment/16/position = Vector2(-1660, 280)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_b2iil")
nodes/fragment/17/position = Vector2(-1809.95, 419.028)
nodes/fragment/18/node = SubResource("VisualShaderNodeTexture_7y6dh")
nodes/fragment/18/position = Vector2(-400, 1160)
nodes/fragment/19/node = SubResource("VisualShaderNodeTexture2DParameter_nsmnv")
nodes/fragment/19/position = Vector2(-880, 1320)
nodes/fragment/20/node = SubResource("VisualShaderNodeUVFunc_plyhd")
nodes/fragment/20/position = Vector2(-885.36, 1045.25)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatConstant_d4xmn")
nodes/fragment/21/position = Vector2(-1180, 1140)
nodes/fragment/22/node = SubResource("VisualShaderNodeUVFunc_yvsnp")
nodes/fragment/22/position = Vector2(-1160, 960)
nodes/fragment/24/node = SubResource("VisualShaderNodeStep_1gpox")
nodes/fragment/24/position = Vector2(200, 1200)
nodes/fragment/26/node = SubResource("VisualShaderNodeStep_2k632")
nodes/fragment/26/position = Vector2(580, 880)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 2, 0, 5, 0, 4, 0, 6, 0, 6, 0, 7, 0, 7, 0, 2, 0, 7, 0, 9, 0, 3, 0, 9, 2, 10, 0, 9, 1, 9, 0, 11, 2, 5, 0, 11, 1, 12, 0, 14, 1, 13, 0, 14, 0, 17, 0, 2, 1, 17, 0, 10, 0, 19, 0, 18, 2, 20, 0, 18, 0, 22, 0, 20, 0, 21, 0, 20, 1, 18, 0, 24, 1, 15, 0, 0, 1, 11, 0, 26, 0, 24, 0, 26, 1, 14, 0, 15, 0, 11, 0, 15, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pppui"]
shader = SubResource("VisualShader_fjmof")
shader_parameter/Circle = 0.365

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_7uaq6"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_rsdgc"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_pjvl3"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_0cij3"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_tmn26"]
parameter_name = "flash_opacity"
hint = 1
max = 0.5
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_kgs2e"]
default_input_values = [0, 0.03, 1, 0.065, 2, 0.26]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_4rvvp"]
parameter_name = "Size"
default_value_enabled = true
default_value = 0.7

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_8cese"]
parameter_name = "R"
default_value_enabled = true
default_value = 0.11

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_v2g8w"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_n25sg"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_rk1qc"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShader" id="VisualShader_0jkik"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float R = 0.10999999940395;
uniform float Size = 0.69999998807907;
uniform float flash_opacity : hint_range(0, 0.5) = 0.5;



void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:6
	vec2 n_in6p1 = vec2(1.80000, 1.00000);
	vec2 n_in6p2 = vec2(0.50000, 0.00000);
	vec2 n_out6p0 = (n_out4p0 - n_in6p2) * n_in6p1 + n_in6p2;


// UVFunc:7
	vec2 n_in7p1 = vec2(0.00000, 1.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = n_in7p2 * n_in7p1 + n_out6p0;


// FloatParameter:39
	float n_out39p0 = R;


// FloatParameter:38
	float n_out38p0 = Size;


	vec4 n_out16p0;
// Expression:16
	n_out16p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out7p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out39p0,n_out39p0 + n_out38p0,d);
		n_out16p0 = vec4(vec3(c),1.0);
	}


// FloatParameter:27
	float n_out27p0 = flash_opacity;


// FloatConstant:23
	float n_out23p0 = 0.400000;


	float n_out25p0;
// Expression:25
	n_out25p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out23p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out25p0 = n_out27p0 - DITHER_THRESHOLDS[index];
	}


// Step:22
	float n_out22p0 = step(n_out16p0.x, n_out25p0);


// Output:0
	COLOR.a = n_out22p0;


}
"
graph_offset = Vector2(-1847.17, 708.333)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(2240, 520)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_v2g8w")
nodes/fragment/4/position = Vector2(-2380, 860)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_n25sg")
nodes/fragment/6/position = Vector2(-2040, 800)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_rk1qc")
nodes/fragment/7/position = Vector2(-1800, 800)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_7uaq6")
nodes/fragment/16/position = Vector2(-1540, 1020)
nodes/fragment/16/size = Vector2(513.781, 284.487)
nodes/fragment/16/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/16/output_ports = "0,5,color;"
nodes/fragment/16/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/22/node = SubResource("VisualShaderNodeStep_rsdgc")
nodes/fragment/22/position = Vector2(980, 480)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatConstant_pjvl3")
nodes/fragment/23/position = Vector2(20, 1180)
nodes/fragment/25/node = SubResource("VisualShaderNodeExpression_0cij3")
nodes/fragment/25/position = Vector2(320, 1160)
nodes/fragment/25/size = Vector2(724.789, 654.559)
nodes/fragment/25/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/25/output_ports = "0,0,Dither_Node;"
nodes/fragment/25/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatParameter_tmn26")
nodes/fragment/27/position = Vector2(-1900, 1660)
nodes/fragment/37/node = SubResource("VisualShaderNodeMix_kgs2e")
nodes/fragment/37/position = Vector2(1220, 600)
nodes/fragment/38/node = SubResource("VisualShaderNodeFloatParameter_4rvvp")
nodes/fragment/38/position = Vector2(-2280, 1360)
nodes/fragment/39/node = SubResource("VisualShaderNodeFloatParameter_8cese")
nodes/fragment/39/position = Vector2(-2120, 1060)
nodes/fragment/connections = PackedInt32Array(4, 0, 6, 0, 6, 0, 7, 0, 23, 0, 25, 1, 7, 0, 16, 0, 22, 0, 37, 1, 22, 0, 0, 1, 16, 0, 22, 0, 25, 0, 22, 1, 27, 0, 25, 0, 38, 0, 16, 2, 39, 0, 16, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ta2vq"]
shader = SubResource("VisualShader_0jkik")
shader_parameter/R = -0.065
shader_parameter/Size = 0.7
shader_parameter/flash_opacity = 0.5

[sub_resource type="ShaderMaterial" id="ShaderMaterial_2vfuw"]
shader = SubResource("VisualShader_0jkik")
shader_parameter/R = 0.02
shader_parameter/Size = 0.35
shader_parameter/flash_opacity = 0.0

[sub_resource type="GDScript" id="GDScript_1c22g"]
script/source = "extends Node

@onready var pad_img = $\"../pad_img\"
@onready var key_img = $\"../key_img\"

@onready var material_pad : Material = pad_img.get_material()
@onready var material_key : Material = key_img.get_material()

var t

func _ready():
	_global_datas.using_pad.connect(show_whats_used)
	
	
func show_whats_used(condition : bool):
	
	pad_img.visible = condition
	key_img.visible = !condition
	
	
			
	if t:
		t.kill()
	t = create_tween()
	
	if condition:
		t .tween_method(set_shader_value,1.0,0.0,1.0)
	else:
		t .tween_method(set_shader_value_key,1.0,0.0,1.0)	

func set_shader_value(value):
	
	material_pad.set_shader_parameter(\"Opacity\",value)

func set_shader_value_key(value):
	
	material_key.set_shader_parameter(\"Opacity\",value)
"

[node name="07_SCREEN_UI" type="Node"]

[node name="INSTANCE_PICTURES" type="Node" parent="."]
script = SubResource("GDScript_ebu32")

[node name="INSTANCE_NOTE" type="Node" parent="."]
script = ExtResource("1_fcb2u")

[node name="Description" type="Node2D" parent="."]
position = Vector2(989, 752)

[node name="Zoom_backdrop" type="Node" parent="Description"]
script = SubResource("GDScript_b8tm5")

[node name="Update_description" type="Node" parent="Description"]
script = SubResource("GDScript_cnn2b")

[node name="Backdrop" type="ColorRect" parent="Description"]
material = SubResource("ShaderMaterial_infws")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -989.0
offset_top = -752.0
offset_right = 931.0
offset_bottom = 328.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.0156863, 0.0705882, 0.0823529, 1)

[node name="Backdrop_n" type="ColorRect" parent="Description"]
material = SubResource("ShaderMaterial_dfp26")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -989.0
offset_top = -752.0
offset_right = 931.0
offset_bottom = 328.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.0156863, 0.0705882, 0.0823529, 1)

[node name="Front_element" type="Node2D" parent="."]
script = SubResource("GDScript_4ec3v")

[node name="Description_Text" type="Label" parent="."]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -271.0
offset_top = 375.0
offset_right = 329.0
offset_bottom = 475.0
grow_horizontal = 2
grow_vertical = 2
theme_override_colors/font_color = Color(0.721569, 0.580392, 0.407843, 1)
theme_override_font_sizes/font_size = 30
text = "Lorem ipsum "
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 1

[node name="Photo_tools" type="Node" parent="."]

[node name="Ui_Scanner_Dots" type="Node" parent="Photo_tools"]
script = ExtResource("2_2br5g")

[node name="Vignette_opacity" type="Node" parent="Photo_tools"]
script = SubResource("GDScript_064xp")

[node name="Flash" type="Node" parent="Photo_tools"]
script = SubResource("GDScript_xsufx")

[node name="Flash_NoPhoto" type="Node" parent="Photo_tools"]
script = SubResource("GDScript_d3vsr")

[node name="Photo_effect_vignette" type="ColorRect" parent="Photo_tools"]
visible = false
material = SubResource("ShaderMaterial_y3o8d")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -540.0
offset_right = 960.0
offset_bottom = 540.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.0313726, 0.0941176, 0.0941176, 1)

[node name="Photo_effect_dots" type="ColorRect" parent="Photo_tools"]
visible = false
material = SubResource("ShaderMaterial_7tgd0")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -544.0
offset_right = 960.0
offset_bottom = 536.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.784314, 0.709804, 0.513726, 1)

[node name="Dots_scanner" type="ColorRect" parent="Photo_tools"]
material = SubResource("ShaderMaterial_augab")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -544.0
offset_right = 960.0
offset_bottom = 536.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.784314, 0.709804, 0.513726, 1)

[node name="Photo_tools" type="Node2D" parent="Photo_tools"]
position = Vector2(960, 540)

[node name="photo_UI_elements" type="Control" parent="Photo_tools/Photo_tools"]
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="Photo_FX" type="Node2D" parent="Photo_tools/Photo_tools/photo_UI_elements"]

[node name="Photo_circle" type="ColorRect" parent="Photo_tools/Photo_tools/photo_UI_elements/Photo_FX"]
visible = false
material = SubResource("ShaderMaterial_pppui")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -533.0
offset_right = 960.0
offset_bottom = 547.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.988235, 0.901961, 0.694118, 1)

[node name="Photo_effect" type="ColorRect" parent="Photo_tools/Photo_tools/photo_UI_elements/Photo_FX"]
visible = false
material = SubResource("ShaderMaterial_ta2vq")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -546.0
offset_right = 960.0
offset_bottom = 534.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.784314, 0.709804, 0.513726, 1)

[node name="Photo_effect_flashSubscene" type="ColorRect" parent="Photo_tools/Photo_tools/photo_UI_elements/Photo_FX"]
visible = false
material = SubResource("ShaderMaterial_2vfuw")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -540.0
offset_right = 960.0
offset_bottom = 540.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.784314, 0.709804, 0.513726, 1)

[node name="Inputs_used" type="Control" parent="."]
layout_mode = 3
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -128.0
offset_top = -111.0
offset_bottom = 17.0
grow_horizontal = 0
grow_vertical = 0

[node name="Show_Use_inputs" type="Node" parent="Inputs_used"]
script = SubResource("GDScript_1c22g")

[node name="pad_img" type="TextureRect" parent="Inputs_used"]
visible = false
material = ExtResource("4_opffw")
clip_contents = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("5_jufic")
expand_mode = 1
stretch_mode = 4

[node name="key_img" type="TextureRect" parent="Inputs_used"]
visible = false
material = ExtResource("4_opffw")
clip_contents = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("4_c4v0f")
expand_mode = 1
stretch_mode = 4
