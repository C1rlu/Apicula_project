[gd_scene load_steps=43 format=3 uid="uid://bwmu5iwushsl5"]

[ext_resource type="Texture2D" uid="uid://d31xi5f7tan5w" path="res://05_SHADER_TEST/Full_screen/Dither_pattners/Blue_noise/HDR_LA_7.png" id="1_2l1ih"]
[ext_resource type="Script" path="res://13_TOOLS_UI/INSTANCE_NOTE.gd" id="1_fcb2u"]
[ext_resource type="Script" path="res://13_TOOLS_UI/Scanner_UI_dots_effect.gd" id="2_2br5g"]
[ext_resource type="Script" path="res://13_TOOLS_UI/Front_element.gd" id="2_y4dp5"]
[ext_resource type="Texture2D" uid="uid://dto78na6ad5o2" path="res://00_SYSTEMS/KeyOrPad/Key_inputs.png" id="4_c4v0f"]
[ext_resource type="Material" uid="uid://bxikm4g1nkywk" path="res://06_UI/Disolved_simple_texture.tres" id="4_opffw"]
[ext_resource type="Script" path="res://13_TOOLS_UI/PhotoFlash.gd" id="5_4ukpq"]
[ext_resource type="Texture2D" uid="uid://4bq2l5jjm4r2" path="res://00_SYSTEMS/KeyOrPad/Pad_inputs.png" id="5_jufic"]

[sub_resource type="GDScript" id="GDScript_ebu32"]
script/source = "extends Node


const PHOTO_SQUARE_PREFABS = preload(\"res://12_INVENTORY/Behaviour/Photo_square_prefabs.tscn\")

@onready var front_element = $\"../Front_element\"


func _ready():
	_global_datas._take_photo.connect(_check_npc_photo)

func _check_npc_photo():
	
	if _global_datas.Npc_Dialogue != null:
		var photodata = _global_datas.Npc_Dialogue.photo_data
		
		if check_photo_exist(photodata):
			return
			
		_global_datas._photo_flash.emit()	
			
		_global_datas.selected_photoData = photodata
		_global_datas.ui_photo_flash.emit()
		_global_datas.show_on_scanner.emit(true)
		#instance_photo()
		
		_global_datas.photo_archives.append(photodata)
		_global_datas._show_object_legend.emit(true,photodata.legend)
	

func check_photo_exist(photo_Data):
	
	for photo in _global_datas.photo_archives:
		if photo == photo_Data:
			return true 	

func instance_photo():
	
	var new_node = 	PHOTO_SQUARE_PREFABS.instantiate()
	front_element.add_child(new_node)
	
	var screen_center = Vector2(1280.0 / 2.0, 720/ 2.0 )
	var random_angle = randf_range(-6.0, 6.0)
	new_node.rotation_degrees = random_angle
	new_node.position = screen_center
"

[sub_resource type="GDScript" id="GDScript_cnn2b"]
script/source = "extends Node


@onready var description_text = $\"../../Description_Text\"

var t 
var _is_typing : bool = false


func _ready():
	
	_global_datas._show_object_legend.connect(_update_text)
	_global_datas._go_Subscene.connect(disable_text)
	_global_datas._backFrom_subscene.connect(back_from_subscene)
	_global_datas.in_dialogue_zone.connect(back_from_dialogue)
	_global_datas._open_dialogue.connect(disable_text)
	
func _update_text(condition : bool, _text : String):
	
	description_text.visible = condition
	description_text.text = _text
	var text_count = _text.length()
	type_text(text_count)

func type_text(count : int):
	
	description_text.visible_ratio = 0.0
	var speed = 0.025 * count
	#var clamp_speed = clamp(1.0,2.0,speed)
	#print( speed,\" for \", count ,\" letter\")
	_is_typing = true
	
	
	var node = get_tree()
	if !node:
		return
	if t:
		t.kill()
	t = create_tween()
	
	t .tween_method(change_ration,0.0,1.0,speed)
	await create_tween().tween_interval(speed).finished

	_is_typing = false
	
func change_ration(value : float):
	description_text.visible_ratio = value
	

func disable_text():
	description_text.visible = false

func back_from_subscene():
	description_text.visible = true
	var text_count = description_text.text.length()
	type_text(text_count)
	
func back_from_dialogue():
	
	if _global_datas.Npc_Dialogue == null:
		return
	description_text.text = _global_datas.Npc_Dialogue.zone_name
	description_text.visible = true
	var text_count = description_text.text.length()
	type_text(text_count)
"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_uy744"]
parameter_name = "Opacity"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_rxrqi"]
parameter_name = "Noise"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tysav"]
source = 5

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_1rnw3"]
default_input_values = [0, 0.4, 1, 0.0, 2, 1.0]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_1llfs"]
constant = 5.0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_koe1o"]
function = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_ql4qe"]
default_input_values = [1, Vector2(1, 0.5), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_i57nw"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_atirq"]
default_input_values = [0, 0.0, 1, 0.001]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_05767"]
default_input_values = [0, 0.0, 1, 0.025]
operator = 2

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_lrevg"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_0tnew"]
size = Vector2(760, 540)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_6bqx5"]
constant = 5.011

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_e4o2p"]
constant = 0.105

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_0mmdj"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yw3km"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_7nvmw"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShader" id="VisualShader_vokeb"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Noise : repeat_enable;
uniform float Opacity : hint_range(0, 1) = 0.5;



void fragment() {
// UVFunc:44
	vec2 n_in44p1 = vec2(1.00000, 0.50000);
	vec2 n_in44p2 = vec2(0.00000, 0.00000);
	vec2 n_out44p0 = (UV - n_in44p2) * n_in44p1 + n_in44p2;


// FloatConstant:42
	float n_out42p0 = 5.000000;


// Input:45
	float n_out45p0 = TIME;


// FloatOp:46
	float n_in46p1 = 0.00100;
	float n_out46p0 = n_out45p0 * n_in46p1;


// FloatOp:47
	float n_in47p1 = 0.02500;
	float n_out47p0 = n_out46p0 * n_in47p1;


// UVFunc:43
	vec2 n_out43p0 = (n_out44p0 - vec2(n_out47p0)) * vec2(n_out42p0) + vec2(n_out47p0);


	vec4 n_out36p0;
// Texture2D:36
	n_out36p0 = texture(Noise, n_out43p0);


// FloatParameter:34
	float n_out34p0 = Opacity;


// Mix:37
	float n_in37p0 = 0.40000;
	float n_out37p0 = mix(n_in37p0, n_out36p0.x, n_out34p0);


// Input:78
	vec2 n_out78p0 = UV;


// UVFunc:79
	vec2 n_in79p1 = vec2(1.80000, 1.00000);
	vec2 n_in79p2 = vec2(0.50000, 0.00000);
	vec2 n_out79p0 = (n_out78p0 - n_in79p2) * n_in79p1 + n_in79p2;


// UVFunc:77
	vec2 n_in77p1 = vec2(0.00000, 1.00000);
	vec2 n_in77p2 = vec2(0.00000, 0.00000);
	vec2 n_out77p0 = n_in77p2 * n_in77p1 + n_out79p0;


// FloatConstant:75
	float n_out75p0 = 0.105000;


// FloatConstant:74
	float n_out74p0 = 5.011000;


	vec4 n_out73p0;
// Expression:73
	n_out73p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out77p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out75p0,n_out75p0 + n_out74p0,d);
		n_out73p0 = vec4(vec3(c),1.0);
	}


// Step:49
	float n_out49p0 = step(n_out37p0, n_out73p0.x);


// Output:0
	COLOR.a = n_out49p0;


}
"
graph_offset = Vector2(-2097.69, 613.149)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(-400, 1800)
nodes/fragment/34/node = SubResource("VisualShaderNodeFloatParameter_uy744")
nodes/fragment/34/position = Vector2(-1800, 2680)
nodes/fragment/35/node = SubResource("VisualShaderNodeTexture2DParameter_rxrqi")
nodes/fragment/35/position = Vector2(-2400, 2740)
nodes/fragment/36/node = SubResource("VisualShaderNodeTexture_tysav")
nodes/fragment/36/position = Vector2(-1840, 2100)
nodes/fragment/37/node = SubResource("VisualShaderNodeMix_1rnw3")
nodes/fragment/37/position = Vector2(-1400, 2140)
nodes/fragment/42/node = SubResource("VisualShaderNodeFloatConstant_1llfs")
nodes/fragment/42/position = Vector2(-3400, 2760)
nodes/fragment/43/node = SubResource("VisualShaderNodeUVFunc_koe1o")
nodes/fragment/43/position = Vector2(-2900, 2680)
nodes/fragment/44/node = SubResource("VisualShaderNodeUVFunc_ql4qe")
nodes/fragment/44/position = Vector2(-3400, 2480)
nodes/fragment/45/node = SubResource("VisualShaderNodeInput_i57nw")
nodes/fragment/45/position = Vector2(-3700, 2980)
nodes/fragment/46/node = SubResource("VisualShaderNodeFloatOp_atirq")
nodes/fragment/46/position = Vector2(-3180, 2920)
nodes/fragment/47/node = SubResource("VisualShaderNodeFloatOp_05767")
nodes/fragment/47/position = Vector2(-3120, 3120)
nodes/fragment/49/node = SubResource("VisualShaderNodeStep_lrevg")
nodes/fragment/49/position = Vector2(-900, 1800)
nodes/fragment/73/node = SubResource("VisualShaderNodeExpression_0tnew")
nodes/fragment/73/position = Vector2(-2080, 1080)
nodes/fragment/73/size = Vector2(760, 540)
nodes/fragment/73/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/73/output_ports = "0,5,color;"
nodes/fragment/73/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/74/node = SubResource("VisualShaderNodeFloatConstant_6bqx5")
nodes/fragment/74/position = Vector2(-2620, 1320)
nodes/fragment/75/node = SubResource("VisualShaderNodeFloatConstant_e4o2p")
nodes/fragment/75/position = Vector2(-2560, 1100)
nodes/fragment/77/node = SubResource("VisualShaderNodeUVFunc_0mmdj")
nodes/fragment/77/position = Vector2(-2220, 700)
nodes/fragment/78/node = SubResource("VisualShaderNodeInput_yw3km")
nodes/fragment/78/position = Vector2(-3000, 640)
nodes/fragment/79/node = SubResource("VisualShaderNodeUVFunc_7nvmw")
nodes/fragment/79/position = Vector2(-2580, 780)
nodes/fragment/connections = PackedInt32Array(35, 0, 36, 2, 37, 0, 49, 0, 45, 0, 46, 0, 46, 0, 47, 0, 42, 0, 43, 1, 47, 0, 43, 2, 43, 0, 36, 0, 44, 0, 43, 0, 34, 0, 37, 2, 36, 0, 37, 1, 49, 0, 0, 1, 78, 0, 79, 0, 79, 0, 77, 0, 74, 0, 73, 2, 77, 0, 73, 0, 75, 0, 73, 1, 73, 0, 49, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_augab"]
shader = SubResource("VisualShader_vokeb")
shader_parameter/Opacity = 0.0
shader_parameter/Noise = ExtResource("1_2l1ih")

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_hq125"]
parameter_name = "Opacity"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_n8xwv"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_sogwh"]
size = Vector2(760, 540)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_swa47"]
constant = -0.4

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_8mbkx"]
default_input_values = [1, Vector2(0, 1), 2, Vector2(0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kyp6d"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_djmbp"]
default_input_values = [1, Vector2(1.8, 1), 2, Vector2(0.5, 0)]
function = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_68su6"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_uq8lp"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_w1a7y"]
constant = 1.0

[sub_resource type="VisualShader" id="VisualShader_5bryy"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity : hint_range(0, 1) = 0.5;
global uniform float Dither_size;



void fragment() {
// Input:78
	vec2 n_out78p0 = UV;


// UVFunc:79
	vec2 n_in79p1 = vec2(1.80000, 1.00000);
	vec2 n_in79p2 = vec2(0.50000, 0.00000);
	vec2 n_out79p0 = (n_out78p0 - n_in79p2) * n_in79p1 + n_in79p2;


// UVFunc:77
	vec2 n_in77p1 = vec2(0.00000, 1.00000);
	vec2 n_in77p2 = vec2(0.00000, 0.00000);
	vec2 n_out77p0 = n_in77p2 * n_in77p1 + n_out79p0;


// FloatConstant:75
	float n_out75p0 = -0.400000;


// FloatParameter:34
	float n_out34p0 = Opacity;


	vec4 n_out73p0;
// Expression:73
	n_out73p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out77p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out75p0,n_out75p0 + n_out34p0,d);
		n_out73p0 = vec4(vec3(c),1.0);
	}


// FloatConstant:82
	float n_out82p0 = 1.000000;


// FloatParameter:81
	float n_out81p0 = Dither_size;


	float n_out80p0;
// Expression:80
	n_out80p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out81p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out80p0 = n_out82p0 - DITHER_THRESHOLDS[index];
	}


// Step:49
	float n_out49p0 = step(n_out73p0.x, n_out80p0);


// Output:0
	COLOR.a = n_out49p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(-400, 1800)
nodes/fragment/34/node = SubResource("VisualShaderNodeFloatParameter_hq125")
nodes/fragment/34/position = Vector2(-2700, 1540)
nodes/fragment/49/node = SubResource("VisualShaderNodeStep_n8xwv")
nodes/fragment/49/position = Vector2(-900, 1800)
nodes/fragment/73/node = SubResource("VisualShaderNodeExpression_sogwh")
nodes/fragment/73/position = Vector2(-2080, 1080)
nodes/fragment/73/size = Vector2(760, 540)
nodes/fragment/73/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/73/output_ports = "0,5,color;"
nodes/fragment/73/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/75/node = SubResource("VisualShaderNodeFloatConstant_swa47")
nodes/fragment/75/position = Vector2(-2560, 1100)
nodes/fragment/77/node = SubResource("VisualShaderNodeUVFunc_8mbkx")
nodes/fragment/77/position = Vector2(-2220, 700)
nodes/fragment/78/node = SubResource("VisualShaderNodeInput_kyp6d")
nodes/fragment/78/position = Vector2(-3000, 640)
nodes/fragment/79/node = SubResource("VisualShaderNodeUVFunc_djmbp")
nodes/fragment/79/position = Vector2(-2580, 780)
nodes/fragment/80/node = SubResource("VisualShaderNodeExpression_68su6")
nodes/fragment/80/position = Vector2(-1460, 2300)
nodes/fragment/80/size = Vector2(724.789, 654.559)
nodes/fragment/80/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/80/output_ports = "0,0,Dither_Node;"
nodes/fragment/80/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/81/node = SubResource("VisualShaderNodeFloatParameter_uq8lp")
nodes/fragment/81/position = Vector2(-1880, 2460)
nodes/fragment/82/node = SubResource("VisualShaderNodeFloatConstant_w1a7y")
nodes/fragment/82/position = Vector2(-1700, 2300)
nodes/fragment/connections = PackedInt32Array(49, 0, 0, 1, 78, 0, 79, 0, 79, 0, 77, 0, 77, 0, 73, 0, 75, 0, 73, 1, 81, 0, 80, 1, 82, 0, 80, 0, 80, 0, 49, 1, 73, 0, 49, 0, 34, 0, 73, 2)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_sbiv4"]
shader = SubResource("VisualShader_5bryy")
shader_parameter/Opacity = 0.0

[sub_resource type="GDScript" id="GDScript_1c22g"]
script/source = "extends Node

@onready var pad_img = $\"../pad_img\"
@onready var key_img = $\"../key_img\"

@onready var material_pad : Material = pad_img.get_material()
@onready var material_key : Material = key_img.get_material()

var t

func _ready():
	_global_datas.using_pad.connect(show_whats_used)
	
	
func show_whats_used(condition : bool):
	
	pad_img.visible = condition
	key_img.visible = !condition
	
	
			
	if t:
		t.kill()
	t = create_tween()
	
	if condition:
		t .tween_method(set_shader_value,1.0,0.0,1.0)
	else:
		t .tween_method(set_shader_value_key,1.0,0.0,1.0)	

func set_shader_value(value):
	
	material_pad.set_shader_parameter(\"Opacity\",value)

func set_shader_value_key(value):
	
	material_key.set_shader_parameter(\"Opacity\",value)
"

[node name="07_SCREEN_UI" type="Node"]

[node name="INSTANCE_PICTURES" type="Node" parent="."]
script = SubResource("GDScript_ebu32")

[node name="INSTANCE_NOTE" type="Node" parent="."]
script = ExtResource("1_fcb2u")

[node name="Description" type="Node2D" parent="."]
position = Vector2(989, 752)

[node name="Update_description" type="Node" parent="Description"]
script = SubResource("GDScript_cnn2b")

[node name="Front_element" type="Node2D" parent="."]
script = ExtResource("2_y4dp5")

[node name="Description_Text" type="Label" parent="."]
visible = false
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -300.0
offset_top = -135.0
offset_right = 300.0
offset_bottom = -35.0
grow_horizontal = 2
grow_vertical = 0
theme_override_colors/font_color = Color(0.721569, 0.580392, 0.407843, 1)
theme_override_font_sizes/font_size = 25
text = "Lorem ipsum "
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 1

[node name="Photo_tools" type="Node" parent="."]

[node name="Ui_Scanner_Dots" type="Node" parent="Photo_tools"]
script = ExtResource("2_2br5g")

[node name="Dots_scanner" type="ColorRect" parent="Photo_tools"]
material = SubResource("ShaderMaterial_augab")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.784314, 0.709804, 0.513726, 1)

[node name="PhotoFlash" type="Node" parent="."]
script = ExtResource("5_4ukpq")

[node name="Photo_Flash_2F_FX" type="ColorRect" parent="PhotoFlash"]
material = SubResource("ShaderMaterial_sbiv4")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.784314, 0.709804, 0.513726, 1)

[node name="Inputs_used" type="Control" parent="."]
layout_mode = 3
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -128.0
offset_top = -111.0
offset_bottom = 17.0
grow_horizontal = 0
grow_vertical = 0

[node name="Show_Use_inputs" type="Node" parent="Inputs_used"]
script = SubResource("GDScript_1c22g")

[node name="pad_img" type="TextureRect" parent="Inputs_used"]
visible = false
material = ExtResource("4_opffw")
clip_contents = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("5_jufic")
expand_mode = 1
stretch_mode = 4

[node name="key_img" type="TextureRect" parent="Inputs_used"]
visible = false
material = ExtResource("4_opffw")
clip_contents = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("4_c4v0f")
expand_mode = 1
stretch_mode = 4
