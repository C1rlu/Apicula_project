[gd_resource type="VisualShader" load_steps=27 format=3 uid="uid://b8diek1y2u36x"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_7tgu2"]
parameter_name = "Opacity"
hint = 1
step = 0.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_q7yo8"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_dlgiy"]
function = 31

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_kxvsb"]
source = 5

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_b36eq"]
size = Vector2(634.014, 470.339)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_s04an"]
parameter_name = "Main_base"
texture_filter = 1

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_454vm"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_6mprd"]
parameter_name = "Light_pass"
texture_filter = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_lh00l"]
source = 5

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_qltd2"]
constant = Color(0.0341017, 0.122733, 0.133838, 1)

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_ta4vg"]
parameter_name = "Light_pass_yellow"
texture_filter = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_iv2iw"]
source = 5

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_krcbt"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_q13yh"]
size = Vector2(634.014, 470.339)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_4th4w"]
constant = 1.0

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_jl1ix"]
operator = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_3rqvf"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_eg5yc"]
size = Vector2(634.014, 470.339)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_d3v40"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_jlscg"]
default_input_values = [0, 0.0, 1, 1.0, 2, 0.205]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_06jh8"]

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_blbxw"]
operator = 5

[sub_resource type="Gradient" id="Gradient_nul3q"]
colors = PackedColorArray(0, 0, 0, 1, 0.439049, 0.439049, 0.439049, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_14woq"]
gradient = SubResource("Gradient_nul3q")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_myfqw"]
texture = SubResource("GradientTexture1D_14woq")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_veprv"]

[resource]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_mix, unshaded;

uniform sampler2D Main_base : filter_nearest;
uniform sampler2D Light_pass : filter_nearest;
global uniform float Dither_size;
uniform float Opacity : hint_range(0, 1) = 1;



void fragment() {
// ColorConstant:51
	vec4 n_out51p0 = vec4(0.034102, 0.122733, 0.133838, 1.000000);


	vec4 n_out36p0;
// Texture2D:36
	n_out36p0 = texture(Main_base, UV);


	vec4 n_out50p0;
// Texture2D:50
	n_out50p0 = texture(Light_pass, UV);


// FloatConstant:61
	float n_out61p0 = 1.000000;


// FloatParameter:32
	float n_out32p0 = Dither_size;


	float n_out62p0;
// Expression:62
	n_out62p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out32p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out62p0 = n_out61p0 - DITHER_THRESHOLDS[index];
	}


// Step:63
	float n_out63p0 = step(n_out62p0, n_out50p0.x);


// Mix:64
	float n_in64p2 = 0.20500;
	float n_out64p0 = mix(n_out50p0.x, n_out63p0, n_in64p2);


// Mix:48
	vec3 n_out48p0 = mix(vec3(n_out51p0.xyz), vec3(n_out36p0.xyz), vec3(n_out64p0));


// FloatParameter:18
	float n_out18p0 = Opacity;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out32p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out18p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_in7p0 = 0.00000;
	float n_out7p0 = step(n_in7p0, n_out4p0);


// FloatFunc:33
	float n_out33p0 = 1.0 - n_out7p0;


// Output:0
	COLOR.rgb = n_out48p0;
	COLOR.a = n_out33p0;


}
"
mode = 1
flags/unshaded = true
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 20)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_b36eq")
nodes/fragment/4/position = Vector2(-1820, 1560)
nodes/fragment/4/size = Vector2(634.014, 470.339)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_veprv")
nodes/fragment/7/position = Vector2(-320, 1520)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatParameter_7tgu2")
nodes/fragment/18/position = Vector2(-2360, 1380)
nodes/fragment/32/node = SubResource("VisualShaderNodeFloatParameter_q7yo8")
nodes/fragment/32/position = Vector2(-2980, 980)
nodes/fragment/33/node = SubResource("VisualShaderNodeFloatFunc_dlgiy")
nodes/fragment/33/position = Vector2(320, 1580)
nodes/fragment/36/node = SubResource("VisualShaderNodeTexture_kxvsb")
nodes/fragment/36/position = Vector2(-880, -920)
nodes/fragment/47/node = SubResource("VisualShaderNodeTexture2DParameter_s04an")
nodes/fragment/47/position = Vector2(-1300, -1000)
nodes/fragment/48/node = SubResource("VisualShaderNodeMix_454vm")
nodes/fragment/48/position = Vector2(-460, -680)
nodes/fragment/49/node = SubResource("VisualShaderNodeTexture2DParameter_6mprd")
nodes/fragment/49/position = Vector2(-2180, -640)
nodes/fragment/50/node = SubResource("VisualShaderNodeTexture_lh00l")
nodes/fragment/50/position = Vector2(-1740, -520)
nodes/fragment/51/node = SubResource("VisualShaderNodeColorConstant_qltd2")
nodes/fragment/51/position = Vector2(-560, -820)
nodes/fragment/52/node = SubResource("VisualShaderNodeTexture2DParameter_ta4vg")
nodes/fragment/52/position = Vector2(-1960, 180)
nodes/fragment/53/node = SubResource("VisualShaderNodeTexture_iv2iw")
nodes/fragment/53/position = Vector2(-1560, 240)
nodes/fragment/56/node = SubResource("VisualShaderNodeStep_krcbt")
nodes/fragment/56/position = Vector2(-1180, 400)
nodes/fragment/57/node = SubResource("VisualShaderNodeExpression_q13yh")
nodes/fragment/57/position = Vector2(-1760, 880)
nodes/fragment/57/size = Vector2(634.014, 470.339)
nodes/fragment/57/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/57/output_ports = "0,0,Dither_Node;"
nodes/fragment/57/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/58/node = SubResource("VisualShaderNodeFloatConstant_4th4w")
nodes/fragment/58/position = Vector2(-2045.54, 776.342)
nodes/fragment/59/node = SubResource("VisualShaderNodeColorOp_jl1ix")
nodes/fragment/59/position = Vector2(140, 540)
nodes/fragment/61/node = SubResource("VisualShaderNodeFloatConstant_3rqvf")
nodes/fragment/61/position = Vector2(-3020, -220)
nodes/fragment/62/node = SubResource("VisualShaderNodeExpression_eg5yc")
nodes/fragment/62/position = Vector2(-2740, -120)
nodes/fragment/62/size = Vector2(634.014, 470.339)
nodes/fragment/62/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/62/output_ports = "0,0,Dither_Node;"
nodes/fragment/62/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/63/node = SubResource("VisualShaderNodeStep_d3v40")
nodes/fragment/63/position = Vector2(-1360, -280)
nodes/fragment/64/node = SubResource("VisualShaderNodeMix_jlscg")
nodes/fragment/64/position = Vector2(-940, -460)
nodes/fragment/65/node = SubResource("VisualShaderNodeMix_06jh8")
nodes/fragment/65/position = Vector2(-940, 240)
nodes/fragment/67/node = SubResource("VisualShaderNodeColorOp_blbxw")
nodes/fragment/67/position = Vector2(-300, -100)
nodes/fragment/68/node = SubResource("VisualShaderNodeTexture_myfqw")
nodes/fragment/68/position = Vector2(-740, 80)
nodes/fragment/connections = PackedInt32Array(32, 0, 4, 1, 18, 0, 4, 0, 4, 0, 7, 1, 7, 0, 33, 0, 33, 0, 0, 1, 47, 0, 36, 2, 49, 0, 50, 2, 51, 0, 48, 0, 36, 0, 48, 1, 52, 0, 53, 2, 32, 0, 57, 1, 58, 0, 57, 0, 57, 0, 56, 0, 53, 0, 56, 1, 61, 0, 62, 0, 32, 0, 62, 1, 50, 0, 64, 0, 63, 0, 64, 1, 64, 0, 48, 2, 62, 0, 63, 0, 50, 0, 63, 1, 53, 0, 65, 0, 56, 0, 65, 1, 65, 0, 68, 0, 48, 0, 67, 0, 68, 0, 67, 1, 48, 0, 0, 0)
