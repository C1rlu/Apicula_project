[gd_scene load_steps=64 format=3 uid="uid://uwg2qc3svu11"]

[ext_resource type="Script" path="res://10_BOARD/Photo_element.gd" id="1_0a8jl"]
[ext_resource type="Resource" uid="uid://dyh1qg1u652pl" path="res://15_GAME_RESSOURCE/Epave_ch_photoData.tres" id="2_8x1kk"]
[ext_resource type="Resource" uid="uid://cjwmwf4frvq3c" path="res://15_GAME_RESSOURCE/03_BoardCam_state/BoardZoom_focus_data.tres" id="3_tu215"]
[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/Movable_obj.gd" id="4_4uyoa"]
[ext_resource type="Resource" uid="uid://3pilop3f4m6r" path="res://15_GAME_RESSOURCE/03_BoardCam_state/ScannerM_focus_data.tres" id="4_w1sdr"]
[ext_resource type="Texture2D" uid="uid://38btbw60olcn" path="res://12_INVENTORY/Photo/IMG/Boat.png" id="4_wljme"]
[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/On_click_object.gd" id="6_46a1v"]
[ext_resource type="Script" path="res://10_BOARD/On_over_node.tres.gd" id="7_vd1wc"]
[ext_resource type="Script" path="res://10_BOARD/On_View.tres.gd" id="8_2nycl"]

[sub_resource type="BoxShape3D" id="BoxShape3D_nnxyu"]
size = Vector3(0.0849429, 0.0129531, 0.0916202)

[sub_resource type="GDScript" id="GDScript_32kbr"]
script/source = "@tool
extends Node


@onready var photo_area = $\"../..\"
@onready var img = $\"../IMG\"


func _ready():
	
	var texture_data = photo_area.Photo_data.image
	var mat = img.get_surface_override_material(0)
	mat.set_shader_parameter(\"t_render\", texture_data)
	
	
	
func _run():
	var texture_data = photo_area.Photo_data.image
	var mat  : Material = img.get_surface_override_material(0)
	mat.set_shader_parameter(\"t_render\", texture_data)
"

[sub_resource type="QuadMesh" id="QuadMesh_1i4du"]

[sub_resource type="Gradient" id="Gradient_o0krw"]
offsets = PackedFloat32Array(0, 0.528875, 0.547112, 0.984802)
colors = PackedColorArray(1, 1, 1, 1, 0.0102558, 0.0102558, 0.0102558, 1, 0.0243161, 0.0243161, 0.0243161, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_2xai1"]
gradient = SubResource("Gradient_o0krw")
fill_from = Vector2(0, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_mt75c"]
source = 5
texture = SubResource("GradientTexture2D_2xai1")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_u7na4"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3cw6h"]
input_name = "normal"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_tag3p"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_3jpth"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_2calb"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_a4uee"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_kam4m"]
constant = 0.915

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ray7x"]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_g4g7h"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_3rkhe"]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_usl74"]
parameter_name = "isGray"
qualifier = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_h3fqg"]
parameter_name = "t_render"
texture_type = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_bu5au"]
size = Vector2(620, 200)
expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_jd3py"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hlg78"]
constant = 1.0

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_5pj88"]
parameter_name = "Gradiant"
texture_repeat = 1

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_h1fb8"]
parameter_name = "Main_color"

[sub_resource type="VisualShader" id="VisualShader_f12d4"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 Main_color : source_color;
uniform sampler2D t_render : source_color;
uniform sampler2D Gradiant : repeat_enable;
global uniform float Dither_size;
global uniform bool isGray;



void fragment() {
// ColorParameter:9
	vec4 n_out9p0 = Main_color;


	vec4 n_out2p0;
// Texture2D:2
	n_out2p0 = texture(t_render, UV);


// Input:20
	vec2 n_out20p0 = UV;


	vec4 n_out10p0;
// Texture2D:10
	n_out10p0 = texture(Gradiant, n_out20p0);


// FloatConstant:7
	float n_out7p0 = 1.000000;


// FloatParameter:15
	float n_out15p0 = Dither_size;


	float n_out16p0;
// Expression:16
	n_out16p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out15p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out16p0 = n_out7p0 - DITHER_THRESHOLDS[index];
	}


// Step:11
	float n_out11p0 = step(n_out10p0.x, n_out16p0);


// FloatConstant:19
	float n_out19p0 = 0.915000;


// Mix:17
	vec3 n_in17p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out17p0 = mix(vec3(n_out11p0), n_in17p1, vec3(n_out19p0));


// Mix:14
	vec3 n_out14p0 = mix(vec3(n_out9p0.xyz), vec3(n_out2p0.xyz), n_out17p0);


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		float luminance = 0.299 * n_out14p0.x + 0.587 * n_out14p0.y + 0.114 * n_out14p0.z;
		n_out4p0 = luminance;
	}


// BooleanParameter:22
	bool n_out22p0 = isGray;


// Mix:5
	vec3 n_out5p0 = mix(n_out14p0, vec3(n_out4p0), vec3(n_out22p0 ? 1.0 : 0.0));


// Output:0
	ALBEDO = n_out5p0;


}
"
graph_offset = Vector2(121, -73)
flags/unshaded = true
nodes/fragment/0/position = Vector2(1000, 180)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_ray7x")
nodes/fragment/2/position = Vector2(-1060, -100)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_h3fqg")
nodes/fragment/3/position = Vector2(-1440, -280)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_bu5au")
nodes/fragment/4/position = Vector2(-80, -360)
nodes/fragment/4/size = Vector2(620, 200)
nodes/fragment/4/input_ports = "0,4,color;"
nodes/fragment/4/output_ports = "0,0,grey_value;"
nodes/fragment/4/expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"
nodes/fragment/5/node = SubResource("VisualShaderNodeMix_jd3py")
nodes/fragment/5/position = Vector2(840, -100)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_hlg78")
nodes/fragment/7/position = Vector2(-2860, 340)
nodes/fragment/8/node = SubResource("VisualShaderNodeTexture2DParameter_5pj88")
nodes/fragment/8/position = Vector2(-1900, 80)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorParameter_h1fb8")
nodes/fragment/9/position = Vector2(-660, -120)
nodes/fragment/10/node = SubResource("VisualShaderNodeTexture_mt75c")
nodes/fragment/10/position = Vector2(-1360, 120)
nodes/fragment/11/node = SubResource("VisualShaderNodeStep_u7na4")
nodes/fragment/11/position = Vector2(-1100, 900)
nodes/fragment/12/node = SubResource("VisualShaderNodeInput_3cw6h")
nodes/fragment/12/position = Vector2(-2200, -100)
nodes/fragment/14/node = SubResource("VisualShaderNodeMix_tag3p")
nodes/fragment/14/position = Vector2(-400, 420)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatParameter_3jpth")
nodes/fragment/15/position = Vector2(-3100, 540)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_2calb")
nodes/fragment/16/position = Vector2(-2540, 560)
nodes/fragment/16/size = Vector2(724.789, 654.559)
nodes/fragment/16/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/16/output_ports = "0,0,Dither_Node;"
nodes/fragment/16/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/17/node = SubResource("VisualShaderNodeMix_a4uee")
nodes/fragment/17/position = Vector2(-500, 760)
nodes/fragment/19/node = SubResource("VisualShaderNodeFloatConstant_kam4m")
nodes/fragment/19/position = Vector2(-600, 960)
nodes/fragment/20/node = SubResource("VisualShaderNodeInput_g4g7h")
nodes/fragment/20/position = Vector2(-2140, -200)
nodes/fragment/21/node = SubResource("VisualShaderNodeUVFunc_3rkhe")
nodes/fragment/21/position = Vector2(-1699.56, -134.443)
nodes/fragment/22/node = SubResource("VisualShaderNodeBooleanParameter_usl74")
nodes/fragment/22/position = Vector2(428, 213)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 4, 0, 5, 1, 5, 0, 0, 0, 7, 0, 16, 0, 16, 0, 11, 1, 8, 0, 10, 2, 9, 0, 14, 0, 10, 0, 11, 0, 15, 0, 16, 1, 14, 0, 4, 0, 14, 0, 5, 0, 2, 0, 14, 1, 19, 0, 17, 2, 17, 0, 14, 2, 11, 0, 17, 0, 20, 0, 21, 0, 12, 0, 21, 2, 20, 0, 10, 0, 22, 0, 5, 2)

[sub_resource type="Gradient" id="Gradient_ycer5"]
offsets = PackedFloat32Array(0, 0.484444, 1)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_hghgh"]
gradient = SubResource("Gradient_ycer5")
fill_to = Vector2(1, 1)
repeat = 1

[sub_resource type="ShaderMaterial" id="ShaderMaterial_trilb"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("VisualShader_f12d4")
shader_parameter/Main_color = Color(0.792157, 0.65098, 0.482353, 1)
shader_parameter/t_render = ExtResource("4_wljme")
shader_parameter/Gradiant = SubResource("GradientTexture2D_hghgh")

[sub_resource type="BoxMesh" id="BoxMesh_8e2mh"]
size = Vector3(1, 1, 1.075)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_hmdwg"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0.125, 0.125, 0.125, 0.125), 2, Quaternion(0.5, 0.5, 0.5, 0.5)]
op_type = 5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_nkxwk"]
parameter_name = "ColorParameter"
default_value_enabled = true
default_value = Color(0.027451, 0.14902, 0.156863, 1)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_i727x"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_n3xmo"]
size = Vector2(620, 200)
expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_j86lc"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_rb2ba"]
size = Vector2(620, 200)
expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_snpqm"]
constant = 1.0

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_3y63r"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="Gradient" id="Gradient_3rj5j"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_6a54q"]
gradient = SubResource("Gradient_3rj5j")
fill_from = Vector2(0, 1)
fill_to = Vector2(0, 0)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_xe0um"]
texture = SubResource("GradientTexture2D_6a54q")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_eq5xp"]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_et7t7"]
parameter_name = "isGray"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_8tisx"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_h702a"]
parameter_name = "light_color"
default_value = Color(0.401313, 0.399257, 0, 1)

[sub_resource type="VisualShader" id="VisualShader_drhdi"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 ColorParameter : source_color = vec4(0.027451, 0.149020, 0.156863, 1.000000);
global uniform bool isGray;
uniform vec4 light_color : source_color;
global uniform float Dither_size;
uniform sampler2D tex_frg_21;



void fragment() {
// ColorParameter:14
	vec4 n_out14p0 = ColorParameter;


	float n_out16p0;
// Expression:16
	n_out16p0 = 0.0;
	{
		float luminance = 0.299 * vec3(n_out14p0.xyz).x + 0.587 * vec3(n_out14p0.xyz).y + 0.114 * vec3(n_out14p0.xyz).z;
		n_out16p0 = luminance;
	}


// BooleanParameter:23
	bool n_out23p0 = isGray;


// Mix:17
	vec3 n_out17p0 = mix(vec3(n_out14p0.xyz), vec3(n_out16p0), vec3(n_out23p0 ? 1.0 : 0.0));


// ColorParameter:9
	vec4 n_out9p0 = light_color;


	float n_out19p0;
// Expression:19
	n_out19p0 = 0.0;
	{
		float luminance = 0.299 * vec3(n_out9p0.xyz).x + 0.587 * vec3(n_out9p0.xyz).y + 0.114 * vec3(n_out9p0.xyz).z;
		n_out19p0 = luminance;
	}


// Mix:20
	vec3 n_out20p0 = mix(vec3(n_out9p0.xyz), vec3(n_out19p0), vec3(n_out23p0 ? 1.0 : 0.0));


// FloatConstant:2
	float n_out2p0 = 1.000000;


// FloatParameter:15
	float n_out15p0 = Dither_size;


	float n_out3p0;
// Expression:3
	n_out3p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out15p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out3p0 = n_out2p0 - DITHER_THRESHOLDS[index];
	}


// Texture2D:21
	vec4 n_out21p0 = texture(tex_frg_21, UV);


// Step:22
	float n_out22p0 = step(n_out3p0, n_out21p0.x);


// Mix:13
	vec4 n_out13p0 = mix(vec4(n_out17p0, 0.0), vec4(n_out20p0, 0.0), vec4(n_out22p0));


// Output:0
	ALBEDO = vec3(n_out13p0.xyz);


}
"
graph_offset = Vector2(-676.505, -535.065)
flags/unshaded = true
nodes/vertex/0/position = Vector2(400, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_snpqm")
nodes/fragment/2/position = Vector2(-1160, 580)
nodes/fragment/3/node = SubResource("VisualShaderNodeExpression_8tisx")
nodes/fragment/3/position = Vector2(-880, 580)
nodes/fragment/3/size = Vector2(724.789, 654.559)
nodes/fragment/3/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/3/output_ports = "0,0,Dither_Node;"
nodes/fragment/3/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/9/node = SubResource("VisualShaderNodeColorParameter_h702a")
nodes/fragment/9/position = Vector2(-1197.08, -441.685)
nodes/fragment/13/node = SubResource("VisualShaderNodeMix_hmdwg")
nodes/fragment/13/position = Vector2(-77.0765, -61.6854)
nodes/fragment/14/node = SubResource("VisualShaderNodeColorParameter_nkxwk")
nodes/fragment/14/position = Vector2(-1197.08, -661.685)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatParameter_i727x")
nodes/fragment/15/position = Vector2(-1520, 740)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_n3xmo")
nodes/fragment/16/position = Vector2(-737.077, -1021.69)
nodes/fragment/16/size = Vector2(620, 200)
nodes/fragment/16/input_ports = "0,4,color;"
nodes/fragment/16/output_ports = "0,0,grey_value;"
nodes/fragment/16/expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"
nodes/fragment/17/node = SubResource("VisualShaderNodeMix_j86lc")
nodes/fragment/17/position = Vector2(22.9235, -801.685)
nodes/fragment/19/node = SubResource("VisualShaderNodeExpression_rb2ba")
nodes/fragment/19/position = Vector2(-757.077, -481.685)
nodes/fragment/19/size = Vector2(620, 200)
nodes/fragment/19/input_ports = "0,4,color;"
nodes/fragment/19/output_ports = "0,0,grey_value;"
nodes/fragment/19/expression = "float luminance = 0.299 * color.x + 0.587 * color.y + 0.114 * color.z;
grey_value = luminance;"
nodes/fragment/20/node = SubResource("VisualShaderNodeMix_3y63r")
nodes/fragment/20/position = Vector2(-317.077, -661.685)
nodes/fragment/21/node = SubResource("VisualShaderNodeTexture_xe0um")
nodes/fragment/21/position = Vector2(-820, 180)
nodes/fragment/22/node = SubResource("VisualShaderNodeStep_eq5xp")
nodes/fragment/22/position = Vector2(-220, 220)
nodes/fragment/23/node = SubResource("VisualShaderNodeBooleanParameter_et7t7")
nodes/fragment/23/position = Vector2(-780, -700)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 15, 0, 3, 1, 14, 0, 16, 0, 14, 0, 17, 0, 16, 0, 17, 1, 9, 0, 19, 0, 19, 0, 20, 1, 9, 0, 20, 0, 20, 0, 13, 1, 17, 0, 13, 0, 13, 0, 0, 0, 21, 0, 22, 1, 3, 0, 22, 0, 22, 0, 13, 2, 23, 0, 17, 2, 23, 0, 20, 2)
nodes/light/0/position = Vector2(2440, 1640)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0vsb7"]
render_priority = 0
shader = SubResource("VisualShader_drhdi")
shader_parameter/ColorParameter = Color(0.380392, 0.372549, 0.337255, 1)
shader_parameter/light_color = Color(0.462745, 0.431373, 0.317647, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_u37px"]
render_priority = 0
shader = SubResource("VisualShader_drhdi")
shader_parameter/ColorParameter = Color(0.0431373, 0.133333, 0.117647, 1)
shader_parameter/light_color = Color(0.0235294, 0.176471, 0.2, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_l1221"]
resource_local_to_scene = true

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_shisn"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_y3hi8"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_fdada"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_qmaqj"]
default_input_values = [0, 0.83, 1, 0.0]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_w2suj"]
constant = Color(0.73, 0.47377, 0.1606, 1)

[sub_resource type="VisualShader" id="VisualShader_tl2py"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

global uniform float Dither_size;



void fragment() {
// ColorConstant:7
	vec4 n_out7p0 = vec4(0.730000, 0.473770, 0.160600, 1.000000);


// FloatConstant:3
	float n_out3p0 = 1.000000;


// FloatParameter:5
	float n_out5p0 = Dither_size;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out3p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_in6p0 = 0.83000;
	float n_out6p0 = step(n_in6p0, n_out4p0);


// Output:0
	ALBEDO = vec3(n_out7p0.xyz);
	ALPHA = n_out6p0;


}
"
graph_offset = Vector2(-573.321, -129.617)
flags/unshaded = true
nodes/fragment/0/position = Vector2(580, 220)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_shisn")
nodes/fragment/3/position = Vector2(-1180, 460)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_y3hi8")
nodes/fragment/4/position = Vector2(-900, 460)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_fdada")
nodes/fragment/5/position = Vector2(-1540, 620)
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_qmaqj")
nodes/fragment/6/position = Vector2(130.23, 516.22)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorConstant_w2suj")
nodes/fragment/7/position = Vector2(226.136, 51.1274)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 6, 1, 6, 0, 0, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gfhbg"]
render_priority = 0
shader = SubResource("VisualShader_tl2py")

[node name="Photo_element_root" type="Node3D" node_paths=PackedStringArray("_On_View", "_On_Over", "on_over_node")]
script = ExtResource("1_0a8jl")
Photo_data = ExtResource("2_8x1kk")
camera_state = ExtResource("3_tu215")
camera_state_focus = ExtResource("4_w1sdr")
_On_View = NodePath("Click/On_View")
_On_Over = NodePath("Click/On_Over")
on_over_node = NodePath("All_over")

[node name="Movable_object" type="Node" parent="." node_paths=PackedStringArray("collider", "limit_zone", "move_root", "rotation_root", "On_Move", "Render")]
script = ExtResource("4_4uyoa")
collider = NodePath("../Click/CollisionShape3D")
limit_zone = NodePath("../Limit")
move_root = NodePath("..")
rotation_root = NodePath("..")
On_Move = NodePath("../Click/On_Move")
rotation_degrees = 15.0
Render = NodePath("../Photo/render_base")

[node name="Click" type="Area3D" parent="."]
transform = Transform3D(0.999989, 0, 0.00467785, 0, 1, 0, -0.00467785, 0, 0.999989, -0.000246863, 0.00516227, -0.00658954)

[node name="On_Move" type="Node" parent="Click"]
script = ExtResource("6_46a1v")

[node name="On_View" type="Node" parent="Click"]
script = ExtResource("8_2nycl")

[node name="On_Over" type="Node" parent="Click"]
script = ExtResource("7_vd1wc")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Click"]
transform = Transform3D(0.999997, 0, 4.14439e-08, 0, 1, 0, -4.14439e-08, 0, 0.999997, 0.0014558, 0, 0.0114536)
shape = SubResource("BoxShape3D_nnxyu")

[node name="Photo" type="Node3D" parent="."]

[node name="texture" type="Node" parent="Photo"]
script = SubResource("GDScript_32kbr")

[node name="IMG" type="MeshInstance3D" parent="Photo"]
transform = Transform3D(0.0725886, 0, 0, 0, -3.17295e-09, 0.0725886, 0, -0.0725886, -3.17295e-09, 0, 0.003, 0.003)
layers = 2
mesh = SubResource("QuadMesh_1i4du")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("ShaderMaterial_trilb")

[node name="render_base" type="MeshInstance3D" parent="Photo"]
transform = Transform3D(0.08478, 0, 0, 0, 0.00135893, 0, 0, 0, 0.0810078, 0, 0.00166521, 0.00384115)
layers = 2
mesh = SubResource("BoxMesh_8e2mh")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("ShaderMaterial_0vsb7")

[node name="render_scannable" type="MeshInstance3D" parent="Photo"]
transform = Transform3D(0.08478, 0, 0, 0, 0.00135893, 0, 0, 0, 0.0810078, 0, 0.00166521, 0.00384115)
visible = false
layers = 2
mesh = SubResource("BoxMesh_8e2mh")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("ShaderMaterial_u37px")

[node name="render_base2" type="MeshInstance3D" parent="Photo/render_scannable"]
transform = Transform3D(1.03232, 0, 0, 0, 1.03232, 0, 0, 0, 1.03232, 0, -0.224889, 0)
layers = 2
mesh = SubResource("BoxMesh_8e2mh")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("ShaderMaterial_0vsb7")

[node name="Limit" type="Area3D" parent="."]
transform = Transform3D(0.999989, 0, 0.00467785, 0, 1, 0, -0.00467785, 0, 0.999989, -0.000246863, 0.00516227, -0.00658954)
collision_layer = 4
collision_mask = 4

[node name="Limit" type="Node" parent="Limit"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Limit"]
transform = Transform3D(0.999997, 0, 4.14439e-08, 0, 1, 0, -4.14439e-08, 0, 0.999997, 0.0014558, 0, 0.0114536)
shape = SubResource("BoxShape3D_nnxyu")

[node name="All_over" type="Node3D" parent="."]
transform = Transform3D(0.999989, 0, 0.00467785, 0, 1, 0, -0.00467785, 0, 0.999989, -0.000246863, 0.00516227, 0.038578)
visible = false

[node name="On_Over_full" type="MeshInstance3D" parent="All_over"]
transform = Transform3D(0.0474709, 0, -0.000336778, 0, 0.0413756, 0, 0.000335574, 0, 0.047641, 0.000755743, -0.00282692, -0.0347451)
layers = 2
mesh = SubResource("PlaneMesh_l1221")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("ShaderMaterial_gfhbg")
