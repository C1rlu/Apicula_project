[gd_scene load_steps=49 format=3 uid="uid://cein0q2eirkay"]

[ext_resource type="Script" path="res://10_BOARD/Board_CamTarget.gd" id="1_janbq"]
[ext_resource type="Script" path="res://10_BOARD/Update_descriptions.gd" id="1_ym670"]
[ext_resource type="PackedScene" uid="uid://dr73p5vs0sixe" path="res://10_BOARD/board_scene.tscn" id="2_6c571"]

[sub_resource type="GDScript" id="GDScript_w13ry"]
script/source = "extends Node


@export var debug_board = true
@onready var board_ui = $BOARD_UI
@onready var camera_xray = $Camp_root_XRay/Camera_xray


func _ready():
	_global_datas.Player_In_Inventory = debug_board
	#board_ui.visible = debug_board
	_global_datas.open_inventory.connect(open_inventory)
	
func open_inventory(condition : bool):
	#board_ui.visible = condition
	_global_datas.Player_In_Inventory = condition
	camera_xray.current = condition
	
	if !condition:
		_global_datas.show_board_description.emit(false,\"\")	
"

[sub_resource type="GDScript" id="GDScript_52477"]
script/source = "extends Node

@onready var board_ui = $\"../BOARD_UI\"
@onready var material : Material = board_ui.get_material()



var fade_in
var fade_out

func _ready():
	_global_datas.open_inventory.connect(open_inventory)
	material.set_shader_parameter(\"Opacity\",0.0)
	
func open_inventory(condition : bool):
	
	if condition:
		if fade_in:
			fade_in.kill()
		
		fade_in = create_tween()
		fade_in.tween_method(set_shader_value,0.0,1.0,0.5)
		
	else:
		if fade_in:
			fade_in.kill()
		
		fade_in = create_tween()
		fade_in.tween_method(set_shader_value,1.0,0.0,0.5)

	

func set_shader_value(value):
	
	material.set_shader_parameter(\"Opacity\",value)
"

[sub_resource type="GDScript" id="GDScript_00hwt"]
script/source = "extends Node

@onready var Cam : Camera3D = $\"../BOARD_UI/SubViewport/Camp_root_Render/Camera3D\"
@onready var camera_xray = $\"../Camp_root_XRay/Camera_xray\"

@export var no_zoom_pos : Vector3
@export var mid_zoom_pos : Vector3
@export var max_zoom_pos : Vector3
var target : Vector3
var rotation_target : Vector3
var zoom_index : int = 1
var zoom_value : float
var origin_value : float

var t 
var r
var origin_global_pos : Vector3

func _ready():

	_global_datas.zoom_value = 42
	origin_global_pos = Cam.global_position
	_set_zoom_pos()	
	
func _input(event):
	

	
	if !_global_datas.Player_In_Inventory:
		return
	if event.is_action_pressed(\"Inventory_zoom_in\"):
		_Zoom(1)
	if event.is_action_pressed(\"Inventory_zoom_out\"):
		_Zoom(-1)
		
		
func _Zoom(value : int):
	
	zoom_index += value
	
	if zoom_index == 1:
		target = no_zoom_pos
		rotation_target = Vector3(-43.9,-5.8,0)
	
	
	if zoom_index == 2:
		target = mid_zoom_pos
		rotation_target = Vector3(-50,-5.8,0)
	
	
	if zoom_index == 3:
		target = max_zoom_pos	
		rotation_target = Vector3(-60,-5.8,0)
	
	
	_global_datas.zoom_value = zoom_index 

	zoom_index = clamp(zoom_index,1,3)
	
	
	if t:
		t.kill()
	t = create_tween()
	
	t.tween_property(Cam,\"position\",target,0.5)
	
	if r:
		r.kill()
	r = create_tween()
	r.tween_property(Cam,\"rotation_degrees\",rotation_target,0.5)
	
func _set_zoom_pos():
	
	var dir = Cam.get_camera_transform().basis.z
	var forward = -dir.normalized()

	no_zoom_pos = Cam.position
	mid_zoom_pos = no_zoom_pos + forward * 0.8 + Vector3(0.0,0.0,-0.1)
	max_zoom_pos = no_zoom_pos + forward * 1.125 + Vector3(0.0,0.0,-0.1)
"

[sub_resource type="GDScript" id="GDScript_q7x8f"]
script/source = "extends Node

var smooth_speed = 3.0
var offset: Vector3
var active_target : Vector3

@onready var cam_target = $\"../BOARD_UI/SubViewport/CamTarget\"
@export var _all_cam_array : Array[Node3D]
@onready var camera_xray = $\"../Camp_root_XRay/Camera_xray\"
@onready var camera_3d = $\"../BOARD_UI/SubViewport/Camp_root_Render/Camera3D\"

func _ready():
	

	offset = _all_cam_array[0].transform.origin - cam_target.position
	active_target = offset
	
	
	
func _physics_process(_delta):
	
	if !_global_datas.Player_In_Inventory:
		return
		
	var playerPosition = cam_target.position
	for cam in _all_cam_array:
		cam.transform.origin = lerp(cam.transform.origin, playerPosition + active_target, smooth_speed * _delta)	
	
	camera_xray.position = camera_3d.position
	camera_xray.rotation = camera_3d.rotation
"

[sub_resource type="GDScript" id="GDScript_xw18g"]
script/source = "extends Node

@onready var colorRec = $\"../../ColorRec\"
@onready var material : Material = colorRec.get_material()
@onready var description = $\"../../ColorRec/description\"
@onready var material_text : Material = description.get_material()
var fade_in
var actual_opacity : float = 0.0

func _fade(condition : bool):
	

	if condition:
		if fade_in:
			fade_in.kill()
		
		fade_in = create_tween()
		fade_in.tween_method(set_shader_value,0.0,1.0,0.25)
		
	else:
		if fade_in:
			fade_in.kill()
		
		fade_in = create_tween()
		fade_in.tween_method(set_shader_value,actual_opacity,0.0,0.25)

	

func set_shader_value(value):
	
	material.set_shader_parameter(\"Opacity\",value)
	material_text.set_shader_parameter(\"Opacity\",value)
	actual_opacity = value
"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_lhyu5"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_r0roy"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pq3rc"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bbdki"]
parameter_name = "Opacity"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShader" id="VisualShader_wl38o"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity : hint_range(0, 1) = 0.5;



void fragment() {
// FloatParameter:5
	float n_out5p0 = Opacity;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out5p0 - DITHER_THRESHOLDS[index];
	}


// Step:2
	float n_in2p0 = 0.00000;
	float n_out2p0 = step(n_in2p0, n_out4p0);


// Output:0
	COLOR.a = n_out2p0;


}
"
graph_offset = Vector2(-1178.47, -20.4586)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeStep_lhyu5")
nodes/fragment/2/position = Vector2(60, 220)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_r0roy")
nodes/fragment/3/position = Vector2(-1360, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_pq3rc")
nodes/fragment/4/position = Vector2(-1060, 360)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_bbdki")
nodes/fragment/5/position = Vector2(-1420, 80)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 1, 5, 0, 4, 0, 4, 0, 2, 1, 2, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jmuyw"]
shader = SubResource("VisualShader_wl38o")
shader_parameter/Opacity = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_yrkdd"]
size = Vector2(513.781, 284.487)
expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_fxvjj"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_xdogs"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_wb6mp"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_evu1d"]
function = 31

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_5pf1n"]
constant = 0.1

[sub_resource type="VisualShader" id="VisualShader_elssd"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:4
	float n_out4p0 = 0.500000;


// FloatConstant:5
	float n_out5p0 = 0.000000;


	vec4 n_out2p0;
// Expression:2
	n_out2p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec2 n_uv = n_out3p0 -0.5;
		float d = length(n_uv);
		float c = smoothstep(n_out4p0,n_out4p0 + n_out5p0,d);
		n_out2p0 = vec4(vec3(c),1.0);
	}


// FloatFunc:6
	float n_out6p0 = 1.0 - n_out2p0.x;


// Output:0
	COLOR.a = n_out6p0;


}
"
graph_offset = Vector2(-507.845, 108.253)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(820, 140)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_yrkdd")
nodes/fragment/2/position = Vector2(-82.4779, 287.841)
nodes/fragment/2/size = Vector2(513.781, 284.487)
nodes/fragment/2/input_ports = "0,3,UV;1,0,r;2,0,feather;"
nodes/fragment/2/output_ports = "0,5,color;"
nodes/fragment/2/expression = "vec2 n_uv = UV -0.5;
float d = length(n_uv);
float c = smoothstep(r,r + feather,d);
color = vec4(vec3(c),1.0);"
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_fxvjj")
nodes/fragment/3/position = Vector2(-482.478, 227.841)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_xdogs")
nodes/fragment/4/position = Vector2(-362.478, 387.841)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatConstant_wb6mp")
nodes/fragment/5/position = Vector2(-282.478, 487.841)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatFunc_evu1d")
nodes/fragment/6/position = Vector2(654.179, 36.3039)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_5pf1n")
nodes/fragment/7/position = Vector2(57.5221, -12.1591)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 2, 0, 6, 0, 6, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_blt4p"]
shader = SubResource("VisualShader_elssd")

[sub_resource type="GDScript" id="GDScript_l5hmx"]
script/source = "extends Camera3D

func _ready():
	_global_datas.board_camera = self

"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_vjd82"]
parameter_name = "Opacity"
hint = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_2ekg8"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_dr3b2"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_siw6w"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hgd2s"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_aagub"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_82ipm"]
constant = 1.0

[sub_resource type="Gradient" id="Gradient_2g186"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_yedxn"]
gradient = SubResource("Gradient_2g186")
fill_from = Vector2(1, 0.269231)
fill_to = Vector2(1, 0.696581)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_d5m4w"]
texture = SubResource("GradientTexture2D_yedxn")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_u3w44"]
input_name = "color"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_hagrv"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_2kdrt"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_kkjmo"]
constant = Color(0.412152, 0.412152, 0.412152, 1)

[sub_resource type="VisualShader" id="VisualShader_bpkog"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;
uniform float Opacity : hint_range(0, 1);



void fragment() {
// ColorConstant:9
	vec4 n_out9p0 = vec4(0.412152, 0.412152, 0.412152, 1.000000);


// Input:6
	vec4 n_out6p0 = COLOR;


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, UV);


// FloatConstant:4
	float n_out4p0 = 1.000000;


// FloatConstant:2
	float n_out2p0 = 0.400000;


	float n_out3p0;
// Expression:3
	n_out3p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out2p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out3p0 = n_out4p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_out7p0 = step(n_out5p0.x, n_out3p0);


// Mix:8
	vec3 n_out8p0 = mix(vec3(n_out9p0.xyz), vec3(n_out6p0.xyz), vec3(n_out7p0));


// FloatParameter:10
	float n_out10p0 = Opacity;


// FloatConstant:11
	float n_out11p0 = 0.400000;


	float n_out13p0;
// Expression:13
	n_out13p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out11p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out13p0 = n_out10p0 - DITHER_THRESHOLDS[index];
	}


// Step:14
	float n_in14p0 = 0.00000;
	float n_out14p0 = step(n_in14p0, n_out13p0);


// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out14p0;


}
"
graph_offset = Vector2(-397.972, 8.64333)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(640, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_hgd2s")
nodes/fragment/2/position = Vector2(-1380, 340)
nodes/fragment/3/node = SubResource("VisualShaderNodeExpression_aagub")
nodes/fragment/3/position = Vector2(-1040, 200)
nodes/fragment/3/size = Vector2(724.789, 654.559)
nodes/fragment/3/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/3/output_ports = "0,0,Dither_Node;"
nodes/fragment/3/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_82ipm")
nodes/fragment/4/position = Vector2(-1380, 200)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_d5m4w")
nodes/fragment/5/position = Vector2(-400, -80)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_u3w44")
nodes/fragment/6/position = Vector2(-140, -160)
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_hagrv")
nodes/fragment/7/position = Vector2(1.78134, 16.9231)
nodes/fragment/8/node = SubResource("VisualShaderNodeMix_2kdrt")
nodes/fragment/8/position = Vector2(380, -140)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorConstant_kkjmo")
nodes/fragment/9/position = Vector2(280, -240)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatParameter_vjd82")
nodes/fragment/10/position = Vector2(20, 340)
nodes/fragment/11/node = SubResource("VisualShaderNodeFloatConstant_2ekg8")
nodes/fragment/11/position = Vector2(-100, 740)
nodes/fragment/13/node = SubResource("VisualShaderNodeExpression_dr3b2")
nodes/fragment/13/position = Vector2(300, 480)
nodes/fragment/13/size = Vector2(724.789, 654.559)
nodes/fragment/13/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/13/output_ports = "0,0,Dither_Node;"
nodes/fragment/13/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/14/node = SubResource("VisualShaderNodeStep_siw6w")
nodes/fragment/14/position = Vector2(478.768, 207.92)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 1, 4, 0, 3, 0, 3, 0, 7, 1, 5, 0, 7, 0, 7, 0, 8, 2, 8, 0, 0, 0, 6, 0, 8, 1, 9, 0, 8, 0, 11, 0, 13, 1, 10, 0, 13, 0, 13, 0, 14, 1, 14, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nsjqj"]
shader = SubResource("VisualShader_bpkog")
shader_parameter/Opacity = 0.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_m0hbd"]
parameter_name = "Opacity"
hint = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ebj8x"]
constant = 0.4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ecw25"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_hty0c"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yx43e"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_7ngcq"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_jbm0b"]
function = 31

[sub_resource type="VisualShader" id="VisualShader_1s3cu"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Opacity : hint_range(0, 1);



void fragment() {
	vec4 n_out7p0;
// Texture2D:7
	n_out7p0 = texture(TEXTURE, UV);
	float n_out7p4 = n_out7p0.a;


// FloatFunc:8
	float n_out8p0 = 1.0 - n_out7p4;


// FloatParameter:2
	float n_out2p0 = Opacity;


// FloatConstant:3
	float n_out3p0 = 0.400000;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out3p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out2p0 - DITHER_THRESHOLDS[index];
	}


// Step:5
	float n_out5p0 = step(n_out8p0, n_out4p0);


// Output:0
	COLOR.a = n_out5p0;


}
"
graph_offset = Vector2(-653.856, -250.246)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatParameter_m0hbd")
nodes/fragment/2/position = Vector2(-840, 60)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_ebj8x")
nodes/fragment/3/position = Vector2(-960, 460)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_ecw25")
nodes/fragment/4/position = Vector2(-560, 200)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeStep_hty0c")
nodes/fragment/5/position = Vector2(-380, -80)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_yx43e")
nodes/fragment/6/position = Vector2(-940, -460)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture_7ngcq")
nodes/fragment/7/position = Vector2(-640, -480)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatFunc_jbm0b")
nodes/fragment/8/position = Vector2(-299.302, -292.684)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 1, 2, 0, 4, 0, 4, 0, 5, 1, 6, 0, 7, 2, 5, 0, 0, 1, 7, 4, 8, 0, 8, 0, 5, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lvqjl"]
shader = SubResource("VisualShader_1s3cu")
shader_parameter/Opacity = 0.0

[node name="04_BOARD" type="Node"]
script = SubResource("GDScript_w13ry")
debug_board = false
metadata/_edit_horizontal_guides_ = [-58.0]

[node name="Fade" type="Node" parent="."]
script = SubResource("GDScript_52477")

[node name="ZOOM_Behaviour" type="Node" parent="."]
script = SubResource("GDScript_00hwt")

[node name="Cam_follow" type="Node" parent="." node_paths=PackedStringArray("_all_cam_array")]
script = SubResource("GDScript_q7x8f")
_all_cam_array = [NodePath("../BOARD_UI/SubViewport/Camp_root_Render"), NodePath("../Camp_root_XRay")]

[node name="Update_descriptions" type="Node" parent="."]
script = ExtResource("1_ym670")

[node name="Fade" type="Node" parent="Update_descriptions"]
script = SubResource("GDScript_xw18g")

[node name="Camp_root_XRay" type="Node3D" parent="."]

[node name="Camera_xray" type="Camera3D" parent="Camp_root_XRay"]
transform = Transform3D(0.994881, 0.0700726, -0.0728162, 0, 0.720551, 0.693402, 0.101056, -0.689852, 0.716862, -0.08, 20.945, 1.035)
cull_mask = 2
current = true
fov = 42.0

[node name="BOARD_UI" type="SubViewportContainer" parent="."]
material = SubResource("ShaderMaterial_jmuyw")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="BOARD_UI"]
handle_input_locally = false
scaling_3d_scale = 0.9
fsr_sharpness = 2.0
size = Vector2i(1920, 1080)
render_target_update_mode = 4

[node name="ColorRect" type="ColorRect" parent="BOARD_UI/SubViewport"]
visible = false
material = SubResource("ShaderMaterial_blt4p")
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -7.5
offset_top = -7.5
offset_right = 7.5
offset_bottom = 7.5
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.862745, 0.784314, 0.603922, 1)

[node name="Camp_root_Render" type="Node3D" parent="BOARD_UI/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -2.38419e-07)

[node name="Camera3D" type="Camera3D" parent="BOARD_UI/SubViewport/Camp_root_Render"]
transform = Transform3D(0.994881, 0.0700726, -0.0728162, 0, 0.720551, 0.693401, 0.101056, -0.689852, 0.716862, -0.08, 20.945, 1.035)
cull_mask = 2
fov = 42.0
far = 4.25
script = SubResource("GDScript_l5hmx")

[node name="CamTarget" type="Node3D" parent="BOARD_UI/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 20.002, 0)
script = ExtResource("1_janbq")
move_speed = 1.0
min_x = -0.5
max_x = 0.5
min_z = -0.5
max_z = 0.5

[node name="ColorRec" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_nsjqj")
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = 198.0
offset_top = -277.0
offset_right = 691.0
offset_bottom = 209.0
grow_horizontal = 2
grow_vertical = 0
rotation = -0.0682507
mouse_filter = 2
color = Color(0.537255, 0.537255, 0.537255, 1)

[node name="description" type="Label" parent="ColorRec"]
material = SubResource("ShaderMaterial_lvqjl")
layout_mode = 0
offset_left = 26.0
offset_top = 19.0
offset_right = 471.0
offset_bottom = 468.0
theme_override_colors/font_color = Color(0.384314, 0.345098, 0.258824, 1)
theme_override_font_sizes/font_size = 35
text = "dadadddddddddddddddda"
autowrap_mode = 3

[node name="Board_scene" parent="." instance=ExtResource("2_6c571")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 20, 0)
