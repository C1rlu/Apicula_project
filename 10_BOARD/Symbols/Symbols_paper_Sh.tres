[gd_resource type="VisualShader" load_steps=15 format=3 uid="uid://wkjv6v8poo5j"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_8gmnd"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_42xqw"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_arrb4"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_4ws14"]
constant = 0.023

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ryf0y"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ttdpq"]
parameter_name = "ColorParameter"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_tx6rl"]
parameter_name = "Alpha"
texture_filter = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_s67yi"]
source = 5

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_eeisf"]
function = 31

[sub_resource type="Gradient" id="Gradient_8vs6s"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_gc2so"]
gradient = SubResource("Gradient_8vs6s")
fill_from = Vector2(1, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_y7hnh"]
texture = SubResource("GradientTexture2D_gc2so")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_jb5c2"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_5eeid"]
size = Vector2(580, 420)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 ColorParameter : source_color;
global uniform float Dither_size;
uniform sampler2D tex_frg_6;
uniform sampler2D Alpha : filter_nearest;



void fragment() {
// ColorParameter:2
	vec4 n_out2p0 = ColorParameter;


// FloatConstant:8
	float n_out8p0 = 1.000000;


// FloatParameter:10
	float n_out10p0 = Dither_size;


	float n_out9p0;
// Expression:9
	n_out9p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out10p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out9p0 = n_out8p0 - DITHER_THRESHOLDS[index];
	}


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Step:11
	float n_out11p0 = step(n_out9p0, n_out6p0.x);


// FloatConstant:13
	float n_out13p0 = 0.023000;


// Mix:12
	vec3 n_out12p0 = mix(vec3(n_out2p0.xyz), vec3(n_out11p0), vec3(n_out13p0));


	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(Alpha, UV);


// Step:14
	float n_out14p0 = step(n_out9p0, n_out4p0.x);


// Output:0
	ALBEDO = n_out12p0;
	ALPHA = n_out14p0;


}
"
graph_offset = Vector2(-601.789, -144.267)
flags/unshaded = true
nodes/fragment/0/position = Vector2(400, 100)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorParameter_ttdpq")
nodes/fragment/2/position = Vector2(-180, -200)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_tx6rl")
nodes/fragment/3/position = Vector2(-1000, 340)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_s67yi")
nodes/fragment/4/position = Vector2(-500, 480)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatFunc_eeisf")
nodes/fragment/5/position = Vector2(-80, 540)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_y7hnh")
nodes/fragment/6/position = Vector2(-660, 80)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatConstant_jb5c2")
nodes/fragment/8/position = Vector2(-1480, -400)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_5eeid")
nodes/fragment/9/position = Vector2(-1200, -400)
nodes/fragment/9/size = Vector2(580, 420)
nodes/fragment/9/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/9/output_ports = "0,0,Dither_Node;"
nodes/fragment/9/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatParameter_8gmnd")
nodes/fragment/10/position = Vector2(-1520, -40)
nodes/fragment/11/node = SubResource("VisualShaderNodeStep_42xqw")
nodes/fragment/11/position = Vector2(-300, 40)
nodes/fragment/12/node = SubResource("VisualShaderNodeMix_arrb4")
nodes/fragment/12/position = Vector2(140, -80)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatConstant_4ws14")
nodes/fragment/13/position = Vector2(-20, 60)
nodes/fragment/14/node = SubResource("VisualShaderNodeStep_ryf0y")
nodes/fragment/14/position = Vector2(-85.5307, 347.7)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 2, 8, 0, 9, 0, 10, 0, 9, 1, 9, 0, 11, 0, 6, 0, 11, 1, 2, 0, 12, 0, 12, 0, 0, 0, 11, 0, 12, 1, 13, 0, 12, 2, 9, 0, 14, 0, 4, 0, 14, 1, 14, 0, 0, 1)
