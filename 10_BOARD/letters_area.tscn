[gd_scene load_steps=24 format=3 uid="uid://qgyjfq88teq8"]

[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/Movable_obj.gd" id="1_3c8dm"]
[ext_resource type="Script" path="res://10_BOARD/On_over_node.tres.gd" id="2_ke4da"]
[ext_resource type="Script" path="res://00_SCENE/Board_control_object_test/On_click_object.gd" id="2_rje64"]
[ext_resource type="Shader" uid="uid://upo0fuo5sqgd" path="res://05_SHADER/Board/Board_sh.tres" id="3_ydeap"]

[sub_resource type="GDScript" id="GDScript_ypp87"]
script/source = "extends Area3D


@export var Note_data : Note_Data
@export var Camera_state : boardCamState_data
@onready var collision_shape_3d = $CollisionShape3D
@onready var photo = $photo
@onready var note_text = $Render_text
@onready var note = $Note

@export var On_View : Node
@export var Quest_letter : Node3D


func _ready():
	note._set_note(Note_data.note_text,Note_data.from)
	Note_data.scene_node_3d = self
	_global_datas.open_quest_info.connect(show_quest_letter)
	
	On_View.On_View.connect(Open_quest_responce)
	
	
func Open_quest_responce():
	
	if Note_data:
		_global_datas.open_quest_info.emit(true,Note_data)
		_global_datas.camera_focus_On.emit(Camera_state)
		_global_datas.focus_this_on_board.emit(global_position)
	else:
		print(\"NEED A NOTE_DATA HERE\")		
	

func show_quest_letter(condition, letter_quest):
	Quest_letter.visible = condition	
		
func _active():
	collision_shape_3d.disabled = false	

	photo.visible = true
	note_text.visible = true

func _disable():
	
	collision_shape_3d.disabled = true

	photo.visible = false
	note_text.visible = false


"

[sub_resource type="GDScript" id="GDScript_4uwx0"]
script/source = "extends Node

@onready var note = $\"../Text_render/text\"
@onready var from = $\"../Text_render/text/from\"

func _set_note(_text : String, _from: String):
	note.text = _text
	from.text = _from
"

[sub_resource type="GDScript" id="GDScript_ikx4k"]
script/source = "extends Node

signal On_View

"

[sub_resource type="ViewportTexture" id="ViewportTexture_3jdh6"]
viewport_path = NodePath("Quest_letter/Text_quest")

[sub_resource type="QuadMesh" id="QuadMesh_4umhe"]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id="ShaderMaterial_b5eno"]
resource_local_to_scene = true
render_priority = 0
shader = ExtResource("3_ydeap")
shader_parameter/Dark_color = Color(0.0196078, 0.121569, 0.129412, 1)
shader_parameter/ColorParameter = Color(0.627451, 0.603922, 0.552941, 1)
shader_parameter/light_color = Color(0.670588, 0.654902, 0.607843, 1)

[sub_resource type="QuadMesh" id="QuadMesh_2j3jf"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_qw2qb"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_bquyj"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_h8sli"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_2ulhe"]
default_input_values = [0, 0.83, 1, 0.0]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_kj1yp"]
constant = Color(0.73, 0.47377, 0.1606, 1)

[sub_resource type="VisualShader" id="VisualShader_or8y4"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

global uniform float Dither_size;



void fragment() {
// ColorConstant:7
	vec4 n_out7p0 = vec4(0.730000, 0.473770, 0.160600, 1.000000);


// FloatConstant:3
	float n_out3p0 = 1.000000;


// FloatParameter:5
	float n_out5p0 = Dither_size;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out3p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_in6p0 = 0.83000;
	float n_out6p0 = step(n_in6p0, n_out4p0);


// Output:0
	ALBEDO = vec3(n_out7p0.xyz);
	ALPHA = n_out6p0;


}
"
graph_offset = Vector2(-573.321, -129.617)
flags/unshaded = true
nodes/fragment/0/position = Vector2(580, 220)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_qw2qb")
nodes/fragment/3/position = Vector2(-1180, 460)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_bquyj")
nodes/fragment/4/position = Vector2(-900, 460)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_h8sli")
nodes/fragment/5/position = Vector2(-1540, 620)
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_2ulhe")
nodes/fragment/6/position = Vector2(130.23, 516.22)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorConstant_kj1yp")
nodes/fragment/7/position = Vector2(226.136, 51.1274)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 6, 1, 6, 0, 0, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0o376"]
render_priority = 0
shader = SubResource("VisualShader_or8y4")

[sub_resource type="BoxShape3D" id="BoxShape3D_bangl"]
size = Vector3(0.704834, 0.0866016, 0.462646)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_e1a31"]
resource_local_to_scene = true
render_priority = 0
shader = ExtResource("3_ydeap")
shader_parameter/Dark_color = Color(0.0196078, 0.121569, 0.129412, 1)
shader_parameter/ColorParameter = Color(0.427451, 0.407843, 0.360784, 1)
shader_parameter/light_color = Color(0.333333, 0.317647, 0.278431, 1)

[sub_resource type="ViewportTexture" id="ViewportTexture_lq3n1"]
viewport_path = NodePath("Text_render")

[sub_resource type="CylinderMesh" id="CylinderMesh_2qibs"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_oms88"]
resource_local_to_scene = true
render_priority = 0
shader = ExtResource("3_ydeap")
shader_parameter/Dark_color = Color(0.0196078, 0.121569, 0.129412, 1)
shader_parameter/ColorParameter = Color(0.443137, 0.2, 0.105882, 1)
shader_parameter/light_color = Color(0.443137, 0.2, 0.105882, 1)

[node name="Letter_area" type="Area3D" node_paths=PackedStringArray("On_View", "Quest_letter")]
transform = Transform3D(1.5, 0, 0, 0, 1.5, 0, 0, 0, 1.5, 0, 0.00272226, 0)
script = SubResource("GDScript_ypp87")
On_View = NodePath("On_View")
Quest_letter = NodePath("Quest_letter")

[node name="Movable_obj" type="Node" parent="." node_paths=PackedStringArray("collider", "move_root", "rotation_root", "On_Move")]
script = ExtResource("1_3c8dm")
collider = NodePath("../CollisionShape3D")
move_root = NodePath("..")
rotation_root = NodePath("..")
On_Move = NodePath("../On_Move_off")

[node name="On_Move_off" type="Node" parent="."]
script = ExtResource("2_rje64")

[node name="Note" type="Node" parent="."]
script = SubResource("GDScript_4uwx0")

[node name="On_Over" type="Node" parent="."]
script = ExtResource("2_ke4da")

[node name="On_View" type="Node" parent="."]
script = SubResource("GDScript_ikx4k")

[node name="Quest_letter" type="Node3D" parent="."]
transform = Transform3D(0.974169, 0, -0.225818, 0, 1, 0, 0.225818, 0, 0.974169, 0.00882291, 0.00296854, 0.0150403)
visible = false

[node name="Render_quest" type="Sprite3D" parent="Quest_letter"]
transform = Transform3D(0.0136498, -1.24176e-09, 9.25186e-17, -7.40149e-17, -5.96652e-10, 0.0136498, -9.31323e-10, -0.0136498, -5.96652e-10, 0, 0.000399773, 0)
layers = 2
modulate = Color(0.333333, 0.321569, 0.286275, 1)
texture = SubResource("ViewportTexture_3jdh6")

[node name="photo2" type="MeshInstance3D" parent="Quest_letter"]
transform = Transform3D(0.0898917, 0, 0, 0, -2.52697e-09, 0.0405362, 0, -0.0578102, -1.77189e-09, 0, 0, 0)
layers = 2
mesh = SubResource("QuadMesh_4umhe")
skeleton = NodePath("")
surface_material_override/0 = SubResource("ShaderMaterial_b5eno")

[node name="Text_quest" type="SubViewport" parent="Quest_letter"]
transparent_bg = true
size = Vector2i(600, 400)

[node name="text" type="Label" parent="Quest_letter/Text_quest"]
custom_minimum_size = Vector2(600, 400)
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 40
text = "We are looking for a pocket watch. This object was seens last time in 1900 before the social revolution. His last owner was mister Anderson:
need 3 proofs"
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 2

[node name="IS_SELECT" type="MeshInstance3D" parent="."]
transform = Transform3D(0.1107, 0, 0, 0, -3.07261e-09, 0.0535114, 0, -0.0702929, -2.33906e-09, 0, 0.000994979, 0)
visible = false
layers = 2
mesh = SubResource("QuadMesh_2j3jf")
surface_material_override/0 = SubResource("ShaderMaterial_0o376")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(0.131916, 0, 0, 0, 0.131916, 0, 0, 0, 0.131916, -0.000177134, 0.00536683, 0.000563608)
shape = SubResource("BoxShape3D_bangl")

[node name="photo" type="MeshInstance3D" parent="."]
transform = Transform3D(0.0928963, 0, 0, 0, -2.61143e-09, 0.0418911, 0, -0.0597425, -1.83112e-09, 0.000475392, 0.00130028, 0)
layers = 2
mesh = SubResource("QuadMesh_4umhe")
skeleton = NodePath("")
surface_material_override/0 = SubResource("ShaderMaterial_e1a31")

[node name="Render_text" type="Sprite3D" parent="."]
transform = Transform3D(0.0136498, 0, 0, 0, -5.96652e-10, 0.0136498, 0, -0.0136498, -5.96652e-10, 0.000475392, 0.0021256, 0)
layers = 2
modulate = Color(0.294118, 0.286275, 0.25098, 1)
texture = SubResource("ViewportTexture_lq3n1")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(0.022523, 0, 0, 0, 0.000455902, 0, 0, 0, 0.022523, 0.02257, 0.00178259, -0.0249337)
layers = 2
mesh = SubResource("CylinderMesh_2qibs")
skeleton = NodePath("../photo")
surface_material_override/0 = SubResource("ShaderMaterial_oms88")

[node name="Text_render" type="SubViewport" parent="."]
transparent_bg = true
size = Vector2i(600, 400)

[node name="text" type="Label" parent="Text_render"]
custom_minimum_size = Vector2(600, 400)
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 80
text = "NOTE"
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 2

[node name="from" type="Label" parent="Text_render/text"]
layout_mode = 1
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -144.0
offset_top = -86.0
offset_bottom = 1.0
grow_horizontal = 0
grow_vertical = 0
theme_override_font_sizes/font_size = 50
text = "FROM"
horizontal_alignment = 1
vertical_alignment = 1
