[gd_resource type="ShaderMaterial" load_steps=8 format=3 uid="uid://mqx4i5esml54"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_h7jc4"]
parameter_name = "ColorParameter"

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_suh5w"]
default_input_values = [2, true, 3, 1.0]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_3ijob"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_nybqb"]
constant = 0.6

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2hs08"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_bserl"]

[sub_resource type="VisualShader" id="VisualShader_isvkw"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 ColorParameter : source_color;
global uniform float Dither_size;



void fragment() {
// ColorParameter:2
	vec4 n_out2p0 = ColorParameter;


// Fresnel:3
	float n_in3p3 = 1.00000;
	float n_out3p0 = pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in3p3);


// FloatConstant:5
	float n_out5p0 = 0.600000;


// FloatParameter:6
	float n_out6p0 = Dither_size;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out6p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out5p0 - DITHER_THRESHOLDS[index];
	}


// Step:7
	float n_out7p0 = step(n_out3p0, n_out4p0);


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out7p0;


}
"
flags/unshaded = true
nodes/fragment/0/position = Vector2(560, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorParameter_h7jc4")
nodes/fragment/2/position = Vector2(-140, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeFresnel_suh5w")
nodes/fragment/3/position = Vector2(-520, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_3ijob")
nodes/fragment/4/position = Vector2(-540, 440)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatConstant_nybqb")
nodes/fragment/5/position = Vector2(-1060, 440)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatParameter_2hs08")
nodes/fragment/6/position = Vector2(-1280, 680)
nodes/fragment/7/node = SubResource("VisualShaderNodeStep_bserl")
nodes/fragment/7/position = Vector2(280, 220)
nodes/fragment/connections = PackedInt32Array(5, 0, 4, 0, 6, 0, 4, 1, 3, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 1, 2, 0, 0, 0)

[resource]
render_priority = 0
shader = SubResource("VisualShader_isvkw")
shader_parameter/ColorParameter = Color(0.113725, 0.45098, 0.403922, 1)
